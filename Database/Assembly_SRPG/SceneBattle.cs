namespace SRPG
{
    using GR;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using UnityEngine;
    using UnityEngine.UI;

    [AddComponentMenu("Scripts/SRPG/Scene/Battle")]
    public class SceneBattle : Scene
    {
        private const float RenkeiSceneFadeTime = 0.5f;
        private const float RenkeiSceneBrightness = 0.25f;
        private const float RenkeiChargeTime = 1f;
        private const float RenkeiAssistInterval = 0.5f;
        private const float MinLoadSkillTime = 0.75f;
        private const uint CHARGE_TARGET_ATTR_GRN = 1;
        private const uint CHARGE_TARGET_ATTR_RED = 2;
        private const float UPVIEW_CAMERADISTANCE_BASE = 5f;
        private const int GRIDLAYER_MOVABLE = 0;
        private const int GRIDLAYER_SHATEI = 1;
        private const int GRIDLAYER_KOUKA = 2;
        private const int GRIDLAYER_CHARGE_GRN = 3;
        private const int GRIDLAYER_CHARGE_RED = 4;
        private const string GRIDLAYER_MATPATH_CHARGE_GRN = "BG/GridMaterialGrn";
        private const string GRIDLAYER_MATPATH_CHARGE_RED = "BG/GridMaterialRed";
        public static readonly string QUEST_TEXTTABLE;
        private static readonly Color RenkeiChargeColor;
        public static readonly string DefaultExitPoint;
        public static SceneBattle Instance;
        private int mStartPlayerLevel;
        private BattleCore mBattle;
        private StateMachine<SceneBattle> mState;
        private Unit mSelectedBattleCommandTarget;
        private int mSelectedBattleCommandGridX;
        private int mSelectedBattleCommandGridY;
        private SkillData mSelectedBattleCommandSkill;
        private ItemData mSelectedBattleCommandItem;
        private GameObject mNavigation;
        private FlowNode_TutorialTrigger[] mTutorialTriggers;
        private bool mStartCalled;
        private bool mStartQuestCalled;
        private int mUnitStartCount;
        private int mUnitStartCountTotal;
        private FlowNode_BattleUI mBattleUI;
        private FlowNode_BattleUI_MultiPlay mBattleUI_MultiPlay;
        private bool mUISignal;
        private SRPG.UnitCursor UnitCursor;
        private TacticsSceneSettings mTacticsSceneRoot;
        private BattleSceneSettings mBattleSceneRoot;
        private BattleSceneSettings mDefaultBattleScene;
        private List<BattleSceneSettings> mBattleScenes;
        private DropGoldEffect mTreasureGoldTemplate;
        private TreasureBox mTreasureBoxTemplate;
        private DropItemEffect mTreasureDropTemplate;
        private GameObject mMapAddGemEffectTemplate;
        private Vector3 mCameraCenter;
        private List<TacticsUnitController> mTacticsUnits;
        private QuestParam mCurrentQuest;
        private QuestStates mStartQuestState;
        private bool mDownloadTutorialAssets;
        private string mEventName;
        private int mNumHotTargets;
        private List<TacticsUnitController> mHotTargets;
        private bool mIsRankingQuestNewScore;
        private bool mIsRankingQuestJoinReward;
        private int mRankingQuestNewRank;
        public string FirstClearItemId;
        public string EventPlayBgmID;
        private bool m_IsCardSendMail;
        private eArenaSubmitMode mArenaSubmitMode;
        private int mCurrentUnitStartX;
        private int mCurrentUnitStartY;
        private List<JSON_MyPhotonPlayerParam> mAudiencePlayers;
        private bool mQuestStart;
        private StateTransitionRequest mOnRequestStateChange;
        private Json_Unit mEditorSupportUnit;
        private bool mIsFirstPlay;
        private bool mIsFirstWin;
        private GridMap<float> mHeightMap;
        private float mWorldPosZ;
        private bool mMapReady;
        private bool mInterpAmbientLight;
        private bool mFirstTurn;
        private CloseBattleUIWindow mCloseBattleUIWindow;
        private bool mIsShowCastSkill;
        private bool mAutoActivateGimmick;
        [NonSerialized]
        public int GoldCount;
        [NonSerialized]
        public int TreasureCount;
        public int DispTreasureCount;
        [NonSerialized]
        public ExitRequests ExitRequest;
        private FlowNode_Network mReqSubmit;
        private bool mQuestResultSending;
        private bool mQuestResultSent;
        private int mFirstContact;
        private bool mRevertQuestNewIfRetire;
        private bool mIsForceEndQuest;
        private QuestResultData mSavedResult;
        public QuestEndEvent OnQuestEnd;
        private GameObject GoResultBg;
        private bool mSceneExiting;
        private int mPauseReqCount;
        private Unit mLastPlayerSideUseSkillUnit;
        private bool mWaitSkillSplashClose;
        private SkillSplash mSkillSplash;
        private Unit mCollaboMainUnit;
        private TacticsUnitController mCollaboTargetTuc;
        private bool mIsInstigatorSubUnit;
        private SkillSplashCollabo mSkillSplashCollabo;
        private bool isScreenMirroring;
        private List<TacticsUnitController> mUnitsInBattle;
        private List<TacticsUnitController> mIgnoreShieldEffect;
        private List<EventRecvSkillUnit> mEventRecvSkillUnitLists;
        private GameObject GoWeatherEffect;
        private bool IsSetWeatherEffect;
        private bool IsStoppedWeatherEffect;
        private CameraMode m_CameraMode;
        private float m_CameraYaw;
        private bool m_NewCamera;
        private bool m_FullRotationCamera;
        private TargetCamera m_TargetCamera;
        private float m_CameraYawMin;
        private float m_CameraYawMax;
        private float m_DefaultCameraYawMin;
        private float m_DefaultCameraYawMax;
        private bool m_UpdateCamera;
        private bool m_BattleCamera;
        private bool m_AllowCameraRotation;
        private bool m_AllowCameraTranslation;
        private float m_CameraAngle;
        private Vector3 m_CameraPosition;
        private bool m_TargetCameraDistanceInterp;
        private float m_TargetCameraDistance;
        private bool m_TargetCameraPositionInterp;
        private Vector3 m_TargetCameraPosition;
        private bool m_TargetCameraAngleInterp;
        private float m_TargetCameraAngle;
        private float m_TargetCameraAngleStart;
        private float m_TargetCameraAngleTime;
        private float m_TargetCameraAngleTimeMax;
        private readonly float MULTI_PLAY_INPUT_TIME_LIMIT_SEC;
        private readonly float MULTI_PLAY_INPUT_EXT_MOVE;
        private readonly float MULTI_PLAY_INPUT_EXT_SELECT;
        private readonly float SEND_TURN_SEC;
        private readonly int CPUBATTLE_PLAYER_NUM;
        public readonly float SYNC_INTERVAL;
        public readonly float RESUME_REQUEST_INTERVAL;
        public readonly float RESUME_SUCCESS_INTERVAL;
        public float mRestSyncInterval;
        public float mRestResumeRequestInterval;
        public float mRestResumeSuccessInterval;
        private List<MultiPlayInput> mSendList;
        private float mSendTime;
        private bool mBeginMultiPlay;
        private bool mAudiencePause;
        private bool mAudienceSkip;
        private int mPrevGridX;
        private int mPrevGridY;
        private EUnitDirection mPrevDir;
        private List<MultiPlayRecvData> mRecvBattle;
        private List<MultiPlayRecvData> mRecvCheck;
        private List<MultiPlayRecvData> mRecvGoodJob;
        private List<MultiPlayRecvData> mRecvContinue;
        private List<MultiPlayRecvData> mRecvIgnoreMyDisconnect;
        private List<MultiPlayRecvData> mRecvResume;
        private List<MultiPlayRecvData> mRecvResumeRequest;
        private List<MultiPlayRecvData> mAudienceDisconnect;
        private MultiPlayRecvData mAudienceRetire;
        private Dictionary<int, MultiPlayRecvData> mRecvCheckData;
        private Dictionary<int, MultiPlayRecvData> mRecvCheckMyData;
        private List<MultiPlayCheck> mMultiPlayCheckList;
        private EDisconnectType mDisconnectType;
        private List<MultiPlayer> mMultiPlayer;
        private List<MultiPlayerUnit> mMultiPlayerUnit;
        private bool mResumeMultiPlay;
        private bool mResumeSend;
        private bool mResumeOnlyPlayer;
        private bool mResumeSuccess;
        private List<int> mResumeAlreadyStartPlayer;
        private bool mMapViewMode;
        private bool mAlreadyEndBattle;
        private bool mCheater;
        private bool mAudienceForceEnd;
        private int mCurrentSendInputUnitID;
        private int mMultiPlaySendID;
        private bool mExecDisconnected;
        private bool mShowInputTimeLimit;
        private int mThinkingPlayerIndex;
        private string mPhotonErrString;
        public List<ReqCreateBreakObjUc> ReqCreateBreakObjUcLists;
        private bool mSetupGoodJob;
        private float mGoodJobWait;
        private DirectionArrow DirectionArrowTemplate;
        private GameObject TargetMarkerTemplate;
        private MoveInput mMoveInput;
        private SRPG.EventScript mEventScript;
        private SRPG.EventScript.Sequence mEventSequence;
        private UnitGauge GaugeOverlayTemplate;
        private UnitGauge EnemyGaugeOverlayTemplate;
        private GameObject mContinueWindowRes;
        [NonSerialized]
        private Unit mSelectedTarget;
        [NonSerialized]
        public bool UIParam_TargetValid;
        [NonSerialized]
        public AbilityData UIParam_CurrentAbility;
        private bool mIsWaitingForBattleSignal;
        private bool mIsUnitChgActive;
        private TargetSelectorParam mTargetSelectorParam;
        private EUnitDirection mSkillDirectionByKouka;
        private bool mIsBackSelectSkill;
        private static int MAX_MASK_BATTLE_UI;
        private uint mControlDisableMask;
        private TutorialButtonImage[] mTutorialButtonImages;
        private Quest_MoveUnit mUIMoveUnit;
        private GameObject mRenkeiAuraEffect;
        private GameObject mRenkeiAssistEffect;
        private GameObject mRenkeiChargeEffect;
        private GameObject mRenkeiHitEffect;
        private GameObject mSummonUnitEffect;
        private GameObject mUnitChangeEffect;
        private GameObject mWithdrawUnitEffect;
        private DamagePopup mDamageTemplate;
        private DamageDsgPopup mDamageDsgTemplate;
        private DamagePopup mHpHealTemplate;
        private DamagePopup mMpHealTemplate;
        private GameObject mAutoHealEffectTemplate;
        private GameObject mDrainHpEffectTemplate;
        private GameObject mDrainMpEffectTemplate;
        private GameObject mParamChangeEffectTemplate;
        private GameObject mConditionChangeEffectTemplate;
        private GameObject mChargeGrnTargetUnitEffect;
        private GameObject mChargeRedTargetUnitEffect;
        private GameObject mKnockBackEffect;
        private GameObject mTrickMarker;
        private Dictionary<string, GameObject> mTrickMarkerDics;
        private GameObject mJumpFallEffect;
        private SkillNamePlate mSkillNamePlate;
        private SkillTargetWindow mSkillTargetWindow;
        private GameObject mJumpSpotEffectTemplate;
        private GameObject mGuardPopup;
        private GameObject mAbsorbPopup;
        private GameObject mCriticalPopup;
        private GameObject mBackstabPopup;
        private GameObject mMissPopup;
        private GameObject mPerfectAvoidPopup;
        private GameObject mWeakPopup;
        private GameObject mResistPopup;
        private GameObject mGutsPopup;
        private GameObject mUnitOwnerIndex;
        private GemParticle[] mGemDrainEffect_Front;
        private GemParticle[] mGemDrainEffect_Side;
        private GemParticle[] mGemDrainEffect_Back;
        private GameObject mGemDrainHitEffect;
        private List<KeyValuePair<Unit, GameObject>> mJumpSpotEffects;
        private GameObject mTargetMarkerTemplate;
        private GameObject mAssistMarkerTemplate;
        private GameObject mBlockedGridMarker;
        private bool mDisplayBlockedGridMarker;
        private Grid mGridDisplayBlockedGridMarker;
        private GameObject[] mUnitMarkerTemplates;
        private List<GameObject>[] mUnitMarkers;
        private bool mLoadedAllUI;
        private TouchController mTouchController;
        private GameObject mVersusPlayerTarget;
        private GameObject mVersusEnemyTarget;
        private GameObject mGoWeatherAttach;
        private GridClickEvent mOnGridClick;
        private UnitClickEvent mOnUnitClick;
        private UnitFocusEvent mOnUnitFocus;
        private TacticsUnitController mFocusedUnit;
        private TacticsUnitController mMapModeFocusedUnit;
        private ScreenClickEvent mOnScreenClick;
        private float mLoadProgress_UI;
        private float mLoadProgress_Scene;
        private float mLoadProgress_Animation;
        private FocusTargetEvent mOnFocusTarget;
        private SelectTargetEvent mOnSelectTarget;
        private CancelTargetSelectEvent mOnCancelTargetSelect;
        private List<KeyValuePair<PupupData, GameObject>> mPopups;
        private Dictionary<RectTransform, Vector3> mPopupPositionCache;
        private List<RectTransform> mLayoutGauges;
        private Dictionary<RectTransform, Vector2> mGaugePositionCache;
        private float mGaugeCollisionRadius;
        private float mGaugeYAspectRatio;
        private Dictionary<SkillParam, GameObject> mShieldEffects;
        private bool mLoadingShieldEffects;
        [CompilerGenerated]
        private float <MultiPlayInputTimeLimit>k__BackingField;
        [CompilerGenerated]
        private bool <MultiPlayExtMoveInputTime>k__BackingField;
        [CompilerGenerated]
        private bool <MultiPlayExtSelectInputTime>k__BackingField;
        [CompilerGenerated]
        private float <MultiPlayAddInputTime>k__BackingField;
        [CompilerGenerated]
        private int <DisplayMultiPlayInputTimeLimit>k__BackingField;
        [CompilerGenerated]
        private JSON_MyPhotonPlayerParam <CurrentNotifyDisconnectedPlayer>k__BackingField;
        [CompilerGenerated]
        private JSON_MyPhotonPlayerParam <CurrentResumePlayer>k__BackingField;
        [CompilerGenerated]
        private ENotifyDisconnectedPlayerType <CurrentNotifyDisconnectedPlayerType>k__BackingField;
        [CompilerGenerated]
        private static QuestEndEvent <>f__am$cache10A;
        [CompilerGenerated]
        private static Predicate<SupportData> <>f__am$cache10B;
        [CompilerGenerated]
        private static Comparison<FindShield> <>f__am$cache10C;

        static SceneBattle()
        {
            QUEST_TEXTTABLE = "quest";
            RenkeiChargeColor = new Color(0f, 0.5f, 1.5f, 0.5f);
            DefaultExitPoint = "Home";
            MAX_MASK_BATTLE_UI = (int) Enum.GetNames(typeof(eMaskBattleUI)).Length;
            return;
        }

        public SceneBattle()
        {
            this.mBattleScenes = new List<BattleSceneSettings>();
            this.mTacticsUnits = new List<TacticsUnitController>(20);
            this.mHotTargets = new List<TacticsUnitController>();
            this.mCloseBattleUIWindow = new CloseBattleUIWindow();
            if (<>f__am$cache10A != null)
            {
                goto Label_0047;
            }
            <>f__am$cache10A = new QuestEndEvent(SceneBattle.<OnQuestEnd>m__74);
        Label_0047:
            this.OnQuestEnd = <>f__am$cache10A;
            this.mUnitsInBattle = new List<TacticsUnitController>();
            this.mIgnoreShieldEffect = new List<TacticsUnitController>();
            this.mEventRecvSkillUnitLists = new List<EventRecvSkillUnit>();
            this.IsStoppedWeatherEffect = 1;
            this.MULTI_PLAY_INPUT_TIME_LIMIT_SEC = 10f;
            this.MULTI_PLAY_INPUT_EXT_MOVE = 10f;
            this.MULTI_PLAY_INPUT_EXT_SELECT = 10f;
            this.SEND_TURN_SEC = 1f;
            this.CPUBATTLE_PLAYER_NUM = 2;
            this.SYNC_INTERVAL = 0.1f;
            this.RESUME_REQUEST_INTERVAL = 0.1f;
            this.RESUME_SUCCESS_INTERVAL = 0.1f;
            this.mPrevGridX = -1;
            this.mPrevGridY = -1;
            this.mPrevDir = 4;
            this.mRecvBattle = new List<MultiPlayRecvData>();
            this.mRecvCheck = new List<MultiPlayRecvData>();
            this.mRecvGoodJob = new List<MultiPlayRecvData>();
            this.mRecvContinue = new List<MultiPlayRecvData>();
            this.mRecvIgnoreMyDisconnect = new List<MultiPlayRecvData>();
            this.mRecvResume = new List<MultiPlayRecvData>();
            this.mRecvResumeRequest = new List<MultiPlayRecvData>();
            this.mAudienceDisconnect = new List<MultiPlayRecvData>();
            this.mRecvCheckData = new Dictionary<int, MultiPlayRecvData>();
            this.mRecvCheckMyData = new Dictionary<int, MultiPlayRecvData>();
            this.mMultiPlayCheckList = new List<MultiPlayCheck>();
            this.mResumeAlreadyStartPlayer = new List<int>();
            this.mPhotonErrString = string.Empty;
            this.ReqCreateBreakObjUcLists = new List<ReqCreateBreakObjUc>();
            this.mTrickMarkerDics = new Dictionary<string, GameObject>();
            this.mGemDrainEffect_Front = new GemParticle[0x20];
            this.mGemDrainEffect_Side = new GemParticle[0x20];
            this.mGemDrainEffect_Back = new GemParticle[0x20];
            this.mJumpSpotEffects = new List<KeyValuePair<Unit, GameObject>>();
            this.mPopups = new List<KeyValuePair<PupupData, GameObject>>();
            this.mPopupPositionCache = new Dictionary<RectTransform, Vector3>();
            this.mLayoutGauges = new List<RectTransform>(0x10);
            this.mGaugePositionCache = new Dictionary<RectTransform, Vector2>();
            this.mGaugeCollisionRadius = 50f;
            this.mGaugeYAspectRatio = 1f;
            this.mShieldEffects = new Dictionary<SkillParam, GameObject>();
            base..ctor();
            return;
        }

        [CompilerGenerated]
        private static int <FindChangedShield>m__7A(FindShield src, FindShield dst)
        {
            if (src.mShield.Target.hp == dst.mShield.Target.hp)
            {
                goto Label_0091;
            }
            if (src.mShield.Target.hp >= dst.mShield.Target.hp)
            {
                goto Label_0060;
            }
            return -1;
        Label_0060:
            if (src.mShield.Target.hp <= dst.mShield.Target.hp)
            {
                goto Label_0091;
            }
            return 1;
        Label_0091:
            return 0;
        }

        [CompilerGenerated]
        private void <OnColoRankModify>m__76(GameObject go)
        {
            this.mQuestResultSent = 1;
            this.mArenaSubmitMode = 2;
            return;
        }

        [CompilerGenerated]
        private static void <OnQuestEnd>m__74()
        {
        }

        [CompilerGenerated]
        private static bool <SubmitBattleResult>m__79(SupportData f)
        {
            return (f.FUID == GlobalVars.SelectedFriendID);
        }

        [CompilerGenerated]
        private bool <UpdateMultiBattleInfo>m__AA(MultiPlayer p)
        {
            return (p.PlayerID == this.mAudienceRetire.pid);
        }

        private void AddDispTreasureCount(int num)
        {
            this.DispTreasureCount += num;
            return;
        }

        private void AddGoldCount(int num)
        {
            this.GoldCount += num;
            return;
        }

        private unsafe void AddGoodJob(int gx, int gy, int unitID)
        {
            BattleStamp stamp;
            List<MultiPlayInput> list;
            MultiPlayInput input;
            byte[] buffer;
            MyPhoton photon;
            MultiPlayRecvData data;
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            if (this.mGoodJobWait <= 0f)
            {
                goto Label_0022;
            }
            return;
        Label_0022:
            this.mGoodJobWait = 1f;
            if (((gx >= 0) && (gx < this.Battle.CurrentMap.Width)) && ((gy >= 0) && (gy < this.Battle.CurrentMap.Height)))
            {
                goto Label_0068;
            }
            return;
        Label_0068:
            stamp = ((this.mBattleUI_MultiPlay == null) == null) ? this.mBattleUI_MultiPlay.StampWindow : null;
            list = new List<MultiPlayInput>();
            input = new MultiPlayInput();
            input.gx = gx;
            input.gy = gy;
            input.c = ((stamp == null) == null) ? stamp.SelectStampID : -1;
            list.Add(input);
            buffer = this.CreateSendBinary(3, unitID, list);
            PunMonoSingleton<MyPhoton>.Instance.SendRoomMessageBinary(1, buffer, 0, 0);
            data = null;
            if (GameUtility.Binary2Object<MultiPlayRecvData>(&data, buffer) == null)
            {
                goto Label_0104;
            }
            this.mRecvGoodJob.Add(data);
        Label_0104:
            return;
        }

        private void AddTreasureCount(int num)
        {
            this.TreasureCount += num;
            return;
        }

        private unsafe Vector3 AdjustPositionToCurrentScene(Vector3 pos)
        {
            Vector3 vector;
            &pos.z += &this.mTacticsSceneRoot.get_transform().get_position().z;
            return pos;
        }

        private unsafe bool ApplyUnitMovement(bool test)
        {
            Unit unit;
            TacticsUnitController controller;
            IntVector2 vector;
            EUnitDirection direction;
            Grid grid;
            unit = this.mBattle.CurrentUnit;
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_011F;
            }
            if (unit.IsUnitFlag(2) != null)
            {
                goto Label_011F;
            }
            vector = this.CalcCoord(controller.CenterPosition);
            direction = controller.CalcUnitDirectionFromRotation();
            if (unit.x != &vector.x)
            {
                goto Label_0064;
            }
            if (unit.y == &vector.y)
            {
                goto Label_0102;
            }
        Label_0064:
            grid = this.mBattle.CurrentMap[&vector.x, &vector.y];
            if (test == null)
            {
                goto Label_0099;
            }
            return this.mBattle.CheckMove(unit, grid);
        Label_0099:
            if (this.Battle.Move(this.Battle.CurrentUnit, grid, direction, 1, 0) != null)
            {
                goto Label_00C5;
            }
            DebugUtility.LogError("移動に失敗");
            return 0;
        Label_00C5:
            this.SendInputGridXY(this.Battle.CurrentUnit, &vector.x, &vector.y, unit.Direction, 1);
            this.SendInputMoveEnd(this.Battle.CurrentUnit, 0);
            goto Label_011F;
        Label_0102:
            if (unit.Direction == direction)
            {
                goto Label_011F;
            }
            this.Battle.CurrentUnit.Direction = direction;
        Label_011F:
            return 1;
        }

        private void ArenaActionCountEnable(bool enable)
        {
            GameObject obj2;
            obj2 = GameObjectID.FindGameObject(this.mBattleUI.ArenaActionCountID);
            if (obj2 == null)
            {
                goto Label_0023;
            }
            obj2.SetActive(enable);
        Label_0023:
            return;
        }

        private void ArenaActionCountSet(uint count)
        {
            ArenaActionCount count2;
            count2 = GameObjectID.FindGameObject<ArenaActionCount>(this.mBattleUI.ArenaActionCountID);
            if (count2 == null)
            {
                goto Label_0035;
            }
            if (count2.ActionCount == count)
            {
                goto Label_0035;
            }
            count2.ActionCount = count;
            count2.PlayEffect();
        Label_0035:
            return;
        }

        private void BeginLoadMapAsync()
        {
            this.mMapReady = 0;
            base.StartCoroutine(this.LoadMapAsync());
            return;
        }

        private void BeginMultiPlayer()
        {
            object[] objArray1;
            MultiPlayer player;
            MultiPlayerUnit unit;
            MyPhoton photon;
            GameManager manager;
            <BeginMultiPlayer>c__AnonStorey1D2 storeyd;
            storeyd = new <BeginMultiPlayer>c__AnonStorey1D2();
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0018;
            }
            return;
        Label_0018:
            if (this.mBeginMultiPlay == null)
            {
                goto Label_002F;
            }
            this.MultiPlayLog("[PUN]already BeginMultiPlayer");
            return;
        Label_002F:
            this.mBeginMultiPlay = 1;
            this.mSendList.Clear();
            this.mSendTime = 0f;
            this.MultiPlayInputTimeLimit = 0f;
            this.MultiPlayExtMoveInputTime = 0;
            this.MultiPlayExtSelectInputTime = 0;
            this.Battle.EntryBattleMultiPlayTimeUp = 0;
            this.Battle.MultiPlayDisconnectAutoBattle = 0;
            this.mPrevGridX = -1;
            this.mPrevGridY = -1;
            this.mPrevDir = 4;
            storeyd.unit = this.Battle.CurrentUnit;
            this.mCurrentSendInputUnitID = this.Battle.AllUnits.FindIndex(new Predicate<Unit>(storeyd.<>m__7E));
            objArray1 = new object[] { "[PUN]BeginMultiPlayer********** turn:", (int) this.UnitStartCountTotal, " unitID:", (int) this.mCurrentSendInputUnitID, " sqID:", (int) this.mMultiPlaySendID };
            this.MultiPlayLog(string.Concat(objArray1));
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd.<>m__7F));
            if (player == null)
            {
                goto Label_0140;
            }
            player.Begin(this);
        Label_0140:
            unit = this.mMultiPlayerUnit.Find(new Predicate<MultiPlayerUnit>(storeyd.<>m__80));
            if (unit == null)
            {
                goto Label_0166;
            }
            unit.Begin(this);
        Label_0166:
            if (storeyd.unit.OwnerPlayerIndex != this.Battle.MyPlayerIndex)
            {
                goto Label_018E;
            }
            this.MultiPlayInputTimeLimit = this.MULTI_PLAY_INPUT_TIME_LIMIT_SEC;
        Label_018E:
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_01A4;
            }
            this.CloseBattleUI();
        Label_01A4:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if ((photon != null) == null)
            {
                goto Label_01DE;
            }
            if (player == null)
            {
                goto Label_01DE;
            }
            if (photon.IsOldestPlayer() == null)
            {
                goto Label_01DE;
            }
            if (player.Disconnected == null)
            {
                goto Label_01DE;
            }
            this.SendOtherPlayerDisconnect(player.PlayerIndex);
        Label_01DE:
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode == null)
            {
                goto Label_0217;
            }
            if (player == null)
            {
                goto Label_01FC;
            }
            player.Disconnected = 0;
        Label_01FC:
            if (manager.AudienceManager.IsSkipEnd == null)
            {
                goto Label_0217;
            }
            this.mBattleUI_MultiPlay.OnAudienceMode();
        Label_0217:
            return;
        }

        public int CalcArenaRankDelta()
        {
            int num;
            if (GlobalVars.ResultArenaBattleResponse == null)
            {
                goto Label_002D;
            }
            return Mathf.Max(MonoSingleton<GameManager>.Instance.Player.ArenaRankBest - GlobalVars.ResultArenaBattleResponse.new_rank, 0);
        Label_002D:
            return 0;
        }

        private unsafe IntVector2 CalcClickedGrid(Vector2 screenPosition)
        {
            Ray ray;
            RaycastHit hit;
            IntVector2 vector;
            float num;
            int num2;
            int num3;
            float num4;
            Vector3 vector2;
            ray = Camera.get_main().ScreenPointToRay(screenPosition);
            &vector = new IntVector2(-1, -1);
            if (Physics.Raycast(ray, &hit) == null)
            {
                goto Label_00C7;
            }
            num = 3.402823E+38f;
            num2 = 0;
            goto Label_00B5;
        Label_0035:
            num3 = 0;
            goto Label_009D;
        Label_003D:
            vector2 = &hit.get_point() - new Vector3(((float) num3) + 0.5f, this.mHeightMap.get(num3, num2), ((float) num2) + 0.5f);
            num4 = &vector2.get_magnitude();
            if (num4 >= num)
            {
                goto Label_0097;
            }
            &vector.x = num3;
            &vector.y = num2;
            num = num4;
        Label_0097:
            num3 += 1;
        Label_009D:
            if (num3 < this.mHeightMap.w)
            {
                goto Label_003D;
            }
            num2 += 1;
        Label_00B5:
            if (num2 < this.mHeightMap.h)
            {
                goto Label_0035;
            }
        Label_00C7:
            return vector;
        }

        public unsafe IntVector2 CalcCoord(Vector3 position)
        {
            int num;
            int num2;
            Vector3 vector;
            num = Mathf.FloorToInt(&position.x);
            num2 = Mathf.FloorToInt(&position.z - &this.mTacticsSceneRoot.get_transform().get_position().z);
            return new IntVector2(num, num2);
        }

        public Vector3 CalcGridCenter(Grid grid)
        {
            if (grid != null)
            {
                goto Label_000C;
            }
            return Vector3.get_zero();
        Label_000C:
            return new Vector3(((float) grid.x) + 0.5f, this.mHeightMap.get(grid.x, grid.y), ((float) grid.y) + 0.5f);
        }

        public Vector3 CalcGridCenter(int x, int y)
        {
            Grid grid;
            grid = this.mBattle.CurrentMap[x, y];
            return this.CalcGridCenter(grid);
        }

        private void CalcGridHeights()
        {
            int num;
            int num2;
            this.mHeightMap = new GridMap<float>(this.mBattle.CurrentMap.Width, this.mBattle.CurrentMap.Height);
            num = 0;
            goto Label_007A;
        Label_0032:
            num2 = 0;
            goto Label_0060;
        Label_0039:
            this.mHeightMap.set(num2, num, this.CalcHeight(((float) num2) + 0.5f, ((float) num) + 0.5f));
            num2 += 1;
        Label_0060:
            if (num2 < this.mBattle.CurrentMap.Width)
            {
                goto Label_0039;
            }
            num += 1;
        Label_007A:
            if (num < this.mBattle.CurrentMap.Height)
            {
                goto Label_0032;
            }
            return;
        }

        private unsafe float CalcHeight(float x, float y)
        {
            float num;
            float num2;
            float num3;
            float num4;
            float num5;
            float num6;
            float num7;
            float num8;
            float num9;
            RaycastHit hit;
            float num10;
            float num11;
            float num12;
            Vector3 vector;
            Vector3 vector2;
            Vector3 vector3;
            Vector3 vector4;
            num = 100f;
            num2 = Mathf.Floor(x - 0.5f) + 0.5f;
            num3 = Mathf.Floor(y - 0.5f) + 0.5f;
            num4 = Mathf.Ceil(x - 0.5f) + 0.5f;
            num5 = Mathf.Ceil(y - 0.5f) + 0.5f;
            num6 = 0f;
            num7 = 0f;
            num8 = 0f;
            num9 = 0f;
            if (Physics.Raycast(new Vector3(num2, num, num3), -Vector3.get_up(), &hit) == null)
            {
                goto Label_009F;
            }
            num6 = &&hit.get_point().y;
        Label_009F:
            if (Physics.Raycast(new Vector3(num4, num, num3), -Vector3.get_up(), &hit) == null)
            {
                goto Label_00CF;
            }
            num7 = &&hit.get_point().y;
        Label_00CF:
            if (Physics.Raycast(new Vector3(num2, num, num5), -Vector3.get_up(), &hit) == null)
            {
                goto Label_0100;
            }
            num8 = &&hit.get_point().y;
        Label_0100:
            if (Physics.Raycast(new Vector3(num4, num, num5), -Vector3.get_up(), &hit) == null)
            {
                goto Label_0131;
            }
            num9 = &&hit.get_point().y;
        Label_0131:
            num10 = x - num2;
            num11 = y - num3;
            return Mathf.Lerp(Mathf.Lerp(num6, num7, num10), Mathf.Lerp(num8, num9, num10), num11);
        }

        private void CancelMapViewMode()
        {
            int num;
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            if (this.VersusMapView != null)
            {
                goto Label_001D;
            }
            return;
        Label_001D:
            num = 0;
            goto Label_005F;
        Label_0024:
            this.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
            this.mTacticsUnits[num].SetHPChangeYosou(this.mTacticsUnits[num].VisibleHPValue, 0);
            num += 1;
        Label_005F:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0024;
            }
            this.mBattleUI.OnCommandSelect();
            GlobalEvent.Invoke("BATTLE_UNIT_DETAIL_CLOSE", this);
            this.mBattleUI.HideTargetWindows();
            this.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
            this.mBattleUI.OnMapViewEnd();
            this.VersusMapView = 0;
            return;
        }

        public unsafe BattleCore.QuestResult CheckAudienceResult()
        {
            BattleCore.QuestResult result;
            MultiPlayer player;
            List<MultiPlayer>.Enumerator enumerator;
            result = 0;
            if (this.Battle.IsVSForceWin == null)
            {
                goto Label_0077;
            }
            enumerator = this.mMultiPlayer.GetEnumerator();
        Label_001E:
            try
            {
                goto Label_0055;
            Label_0023:
                player = &enumerator.Current;
                if ((player == null) || (player.NotifyDisconnected == null))
                {
                    goto Label_0055;
                }
                result = (player.PlayerIndex != 1) ? 1 : 2;
                goto Label_0061;
            Label_0055:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0023;
                }
            Label_0061:
                goto Label_0072;
            }
            finally
            {
            Label_0066:
                ((List<MultiPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_0072:
            goto Label_0083;
        Label_0077:
            result = this.Battle.GetQuestResult();
        Label_0083:
            return result;
        }

        private bool CheckInputTimeLimit()
        {
            if (this.Battle.IsResume == null)
            {
                goto Label_0012;
            }
            return 1;
        Label_0012:
            if (this.MultiPlayInputTimeLimit != 0f)
            {
                goto Label_0024;
            }
            return 1;
        Label_0024:
            if (this.MultiPlayInputTimeLimit <= 0f)
            {
                goto Label_007B;
            }
            if (this.GainMultiPlayInputTimeLimit() != null)
            {
                goto Label_0041;
            }
            return 1;
        Label_0041:
            this.MultiPlayInputTimeLimit -= Time.get_unscaledDeltaTime();
            if (this.MultiPlayInputTimeLimit <= 0f)
            {
                goto Label_0065;
            }
            return 1;
        Label_0065:
            this.MultiPlayInputTimeLimit = 0f;
            this.MultiPlayLog("[PUN]TimeUp!");
        Label_007B:
            return 0;
        }

        private unsafe bool CheckMultiPlay()
        {
            object[] objArray1;
            bool flag;
            MultiPlayRecvData data;
            MultiPlayRecvData data2;
            List<KeyValuePair<int, MultiPlayRecvData>> list;
            KeyValuePair<int, MultiPlayRecvData> pair;
            List<KeyValuePair<int, MultiPlayRecvData>>.Enumerator enumerator;
            MultiPlayCheck check;
            MultiPlayCheck check2;
            string str;
            int num;
            MyPhoton photon;
            string str2;
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0012;
            }
            return 1;
        Label_0012:
            if (this.mRecvCheckData.Count <= 0)
            {
                goto Label_0034;
            }
            if (this.mRecvCheckMyData.Count > 0)
            {
                goto Label_0036;
            }
        Label_0034:
            return 1;
        Label_0036:
            flag = 1;
            data = null;
            data2 = null;
            enumerator = Enumerable.ToList<KeyValuePair<int, MultiPlayRecvData>>(this.mRecvCheckMyData).GetEnumerator();
        Label_0050:
            try
            {
                goto Label_02A6;
            Label_0055:
                pair = &enumerator.Current;
                check = new MultiPlayCheck();
                data2 = &pair.Value;
                check.playerID = data2.pid;
                check.playerIndex = data2.pidx;
                check.battleTurn = data2.b;
                check.hp = data2.c;
                check.gx = data2.gx;
                check.gy = data2.gy;
                check.dir = data2.d;
                check.rnd = ((data2.s != null) && (((int) data2.s.Length) > 0)) ? data2.s[0] : null;
                if (this.mRecvCheckData.TryGetValue(&pair.Key, &data) == null)
                {
                    goto Label_02A6;
                }
                check2 = new MultiPlayCheck();
                check2.playerID = data.pid;
                check2.playerIndex = data.pidx;
                check2.battleTurn = data.b;
                check2.hp = data.c;
                check2.gx = data.gx;
                check2.gy = data.gy;
                check2.dir = data.d;
            Label_018C:
                check2.rnd = ((data.s != null) && (((int) data.s.Length) > 0)) ? data.s[0] : null;
                flag &= check2.IsEqual(check);
                if (flag != null)
                {
                    goto Label_0268;
                }
                str = string.Empty;
                num = 0;
                goto Label_024A;
            Label_01C0:
                str2 = str + this.Battle.AllUnits[num].UnitName;
                objArray1 = new object[] { str2, "-pos:", (int) this.Battle.AllUnits[num].x, ",", (int) this.Battle.AllUnits[num].y };
                str = string.Concat(objArray1);
                num += 1;
            Label_024A:
                if (num < this.Battle.AllUnits.Count)
                {
                    goto Label_01C0;
                }
                DebugUtility.LogWarning(str);
            Label_0268:
                this.mRecvCheckMyData.Remove(&pair.Key);
                this.mRecvCheckData.Remove(&pair.Key);
                DebugUtility.LogWarning(check.ToString());
                DebugUtility.LogWarning(check2.ToString());
            Label_02A6:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0055;
                }
                goto Label_02C4;
            }
            finally
            {
            Label_02B7:
                ((List<KeyValuePair<int, MultiPlayRecvData>>.Enumerator) enumerator).Dispose();
            }
        Label_02C4:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if (flag == null)
            {
                goto Label_02E0;
            }
            Debug.Log("Check OK!");
            goto Label_02F0;
        Label_02E0:
            this.mDisconnectType = 1;
            photon.Disconnect();
            return 0;
        Label_02F0:
            return 1;
        }

        public unsafe bool CheckResumeSync()
        {
            MyPhoton photon;
            List<MyPhoton.MyPlayer> list;
            bool flag;
            List<MyPhoton.MyPlayer>.Enumerator enumerator;
            MultiPlayer player;
            <CheckResumeSync>c__AnonStorey1E2 storeye;
            list = PunMonoSingleton<MyPhoton>.Instance.GetRoomPlayerList();
            flag = 1;
            storeye = new <CheckResumeSync>c__AnonStorey1E2();
            enumerator = list.GetEnumerator();
        Label_001D:
            try
            {
                goto Label_0078;
            Label_0022:
                storeye.player = &enumerator.Current;
                player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeye.<>m__AC));
                if (storeye.player.start == null)
                {
                    goto Label_0078;
                }
                if (player == null)
                {
                    goto Label_0078;
                }
                if (player.NotifyDisconnected != null)
                {
                    goto Label_0078;
                }
                flag &= player.SyncResumeWait;
            Label_0078:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0022;
                }
                goto Label_0095;
            }
            finally
            {
            Label_0089:
                ((List<MyPhoton.MyPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_0095:
            return flag;
        }

        private bool CheckSkipLogEnd(bool isSkip, int cnt, bool check)
        {
            GameManager manager;
            int num;
            if (isSkip == null)
            {
                goto Label_003A;
            }
            manager = MonoSingleton<GameManager>.Instance;
            if (check != null)
            {
                goto Label_003A;
            }
            num = 0;
            goto Label_0028;
        Label_0019:
            manager.AudienceManager.Restore();
            num += 1;
        Label_0028:
            if (num < cnt)
            {
                goto Label_0019;
            }
            this.mRecvBattle.Clear();
        Label_003A:
            return check;
        }

        private unsafe void CheckStart()
        {
            BattleCore core2;
            BattleCore core1;
            MyPhoton photon;
            MultiPlayer player;
            List<MultiPlayer>.Enumerator enumerator;
            List<MyPhoton.MyPlayer> list;
            MultiPlayer player2;
            List<MultiPlayer>.Enumerator enumerator2;
            bool flag;
            List<int>.Enumerator enumerator3;
            MyPhoton.MyRoom room;
            MultiPlayerUnit unit;
            List<MultiPlayerUnit>.Enumerator enumerator4;
            <CheckStart>c__AnonStorey1DE storeyde;
            if (this.Battle.SyncStart != null)
            {
                goto Label_026C;
            }
            photon = PunMonoSingleton<MyPhoton>.Instance;
            this.Battle.SyncStart = 1;
            enumerator = this.mMultiPlayer.GetEnumerator();
        Label_002E:
            try
            {
                goto Label_005E;
            Label_0033:
                player = &enumerator.Current;
                if (player.NotifyDisconnected != null)
                {
                    goto Label_005E;
                }
                core1 = this.Battle;
                core1.SyncStart &= player.FinishLoad;
            Label_005E:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0033;
                }
                goto Label_007B;
            }
            finally
            {
            Label_006F:
                ((List<MultiPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_007B:
            if (this.mResumeMultiPlay == null)
            {
                goto Label_0230;
            }
            list = photon.GetRoomPlayerList();
            if (list.Count != 1)
            {
                goto Label_0113;
            }
            this.mResumeMultiPlay = 0;
            this.mResumeOnlyPlayer = 1;
            enumerator2 = this.mMultiPlayer.GetEnumerator();
        Label_00B4:
            try
            {
                goto Label_00CA;
            Label_00B9:
                player2 = &enumerator2.Current;
                player2.NotifyDisconnected = 1;
            Label_00CA:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_00B9;
                }
                goto Label_00E8;
            }
            finally
            {
            Label_00DB:
                ((List<MultiPlayer>.Enumerator) enumerator2).Dispose();
            }
        Label_00E8:
            if (this.Battle.IsMultiVersus == null)
            {
                goto Label_0103;
            }
            this.GotoState<State_ComfirmFinishbattle>();
            goto Label_010E;
        Label_0103:
            this.mBattleUI_MultiPlay.OnMyPlayerResume();
        Label_010E:
            goto Label_0230;
        Label_0113:
            flag = 0;
            storeyde = new <CheckStart>c__AnonStorey1DE();
            enumerator3 = this.mResumeAlreadyStartPlayer.GetEnumerator();
        Label_012A:
            try
            {
                goto Label_015B;
            Label_012F:
                storeyde.playerID = &enumerator3.Current;
                flag |= (list.Find(new Predicate<MyPhoton.MyPlayer>(storeyde.<>m__A6)) == null) == 0;
            Label_015B:
                if (&enumerator3.MoveNext() != null)
                {
                    goto Label_012F;
                }
                goto Label_0179;
            }
            finally
            {
            Label_016C:
                ((List<int>.Enumerator) enumerator3).Dispose();
            }
        Label_0179:
            if (this.Battle.IsMultiTower == null)
            {
                goto Label_0218;
            }
            room = photon.GetCurrentRoom();
            if (room == null)
            {
                goto Label_0218;
            }
            if (room.battle != null)
            {
                goto Label_0218;
            }
            flag = 0;
            this.mExecDisconnected = 1;
            photon.Disconnect();
            enumerator4 = this.mMultiPlayerUnit.GetEnumerator();
        Label_01C1:
            try
            {
                goto Label_01FA;
            Label_01C6:
                unit = &enumerator4.Current;
                if (unit == null)
                {
                    goto Label_01FA;
                }
                if (unit.Owner.PlayerIndex == photon.MyPlayerIndex)
                {
                    goto Label_01FA;
                }
                unit.Owner.Disconnected = 1;
            Label_01FA:
                if (&enumerator4.MoveNext() != null)
                {
                    goto Label_01C6;
                }
                goto Label_0218;
            }
            finally
            {
            Label_020B:
                ((List<MultiPlayerUnit>.Enumerator) enumerator4).Dispose();
            }
        Label_0218:
            this.mResumeMultiPlay = flag;
            this.Battle.SyncStart = flag == 0;
        Label_0230:
            core2 = this.Battle;
            core2.SyncStart &= this.mResumeMultiPlay == 0;
            if (this.Battle.SyncStart == null)
            {
                goto Label_026C;
            }
            photon.AddMyPlayerParam("BattleStart", (bool) 1);
        Label_026C:
            return;
        }

        public unsafe bool CheckSync()
        {
            MyPhoton photon;
            List<MyPhoton.MyPlayer> list;
            bool flag;
            List<MyPhoton.MyPlayer>.Enumerator enumerator;
            MultiPlayer player;
            <CheckSync>c__AnonStorey1E1 storeye;
            list = PunMonoSingleton<MyPhoton>.Instance.GetRoomPlayerList();
            flag = 1;
            storeye = new <CheckSync>c__AnonStorey1E1();
            enumerator = list.GetEnumerator();
        Label_001D:
            try
            {
                goto Label_009F;
            Label_0022:
                storeye.player = &enumerator.Current;
                player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeye.<>m__AB));
                if (storeye.player.start == null)
                {
                    goto Label_009F;
                }
                if (player == null)
                {
                    goto Label_009F;
                }
                if (player.NotifyDisconnected != null)
                {
                    goto Label_009F;
                }
                flag &= player.SyncWait;
                Debug.Log(((bool) player.SyncWait) + "/" + ((int) player.PlayerIndex));
            Label_009F:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0022;
                }
                goto Label_00BC;
            }
            finally
            {
            Label_00B0:
                ((List<MyPhoton.MyPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_00BC:
            return flag;
        }

        public void CleanupGoodJob()
        {
            SRPG_TouchInputModule module;
            if (this.mSetupGoodJob != null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            module = this.GetTouchInputModule();
            if ((module == null) == null)
            {
                goto Label_0020;
            }
            return;
        Label_0020:
            module.OnDoubleTap = (SRPG_TouchInputModule.OnDoubleTapDelegate) Delegate.Remove(module.OnDoubleTap, new SRPG_TouchInputModule.OnDoubleTapDelegate(this.OnDoubleTap));
            this.mSetupGoodJob = 0;
            return;
        }

        public void CleanUpMultiPlay()
        {
            this.CleanupGoodJob();
            if (this.Battle.IsMultiTower == null)
            {
                goto Label_0027;
            }
            if (this.Battle.GetQuestResult() != 2)
            {
                goto Label_0031;
            }
        Label_0027:
            PunMonoSingleton<MyPhoton>.Instance.Reset();
        Label_0031:
            DebugUtility.Log("CleanUpMultiPlay done.");
            return;
        }

        private void CloseBattleUI()
        {
            int num;
            if ((this.mBattleUI != null) == null)
            {
                goto Label_01A0;
            }
            this.mBattleUI.OnInputTimeLimit();
            if ((this.mBattleUI.TargetMain != null) == null)
            {
                goto Label_0043;
            }
            this.mBattleUI.TargetMain.ForceClose(1);
        Label_0043:
            if ((this.mBattleUI.TargetSub != null) == null)
            {
                goto Label_006A;
            }
            this.mBattleUI.TargetSub.ForceClose(1);
        Label_006A:
            if ((this.mBattleUI.TargetObjectSub != null) == null)
            {
                goto Label_0091;
            }
            this.mBattleUI.TargetObjectSub.ForceClose(1);
        Label_0091:
            if ((this.mBattleUI.TargetTrickSub != null) == null)
            {
                goto Label_00B8;
            }
            this.mBattleUI.TargetTrickSub.ForceClose(1);
        Label_00B8:
            if ((this.mBattleUI.CommandWindow != null) == null)
            {
                goto Label_00DF;
            }
            this.mBattleUI.CommandWindow.OnCommandSelect = null;
        Label_00DF:
            if ((this.mBattleUI.ItemWindow != null) == null)
            {
                goto Label_0106;
            }
            this.mBattleUI.ItemWindow.OnSelectItem = null;
        Label_0106:
            if ((this.mBattleUI.SkillWindow != null) == null)
            {
                goto Label_012D;
            }
            this.mBattleUI.SkillWindow.OnSelectSkill = null;
        Label_012D:
            if ((this.mSkillTargetWindow != null) == null)
            {
                goto Label_0149;
            }
            this.mSkillTargetWindow.ForceHide();
        Label_0149:
            if (this.mTacticsUnits == null)
            {
                goto Label_01A0;
            }
            num = 0;
            goto Label_018F;
        Label_015B:
            if ((this.mTacticsUnits[num] == null) == null)
            {
                goto Label_0177;
            }
            goto Label_018B;
        Label_0177:
            this.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
        Label_018B:
            num += 1;
        Label_018F:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_015B;
            }
        Label_01A0:
            this.mOnUnitFocus = null;
            this.mOnUnitClick = null;
            this.mOnRequestStateChange = null;
            this.mOnGridClick = null;
            this.mOnScreenClick = null;
            this.HideUnitMarkers(0);
            this.HideGrid();
            if (this.mCloseBattleUIWindow == null)
            {
                goto Label_01E6;
            }
            this.mCloseBattleUIWindow.CloseAll();
        Label_01E6:
            return;
        }

        private bool ConditionalGotoGimmickState()
        {
            LogMapEvent event2;
            EEventType type;
            event2 = (LogMapEvent) this.mBattle.Logs.Peek;
            type = event2.target.EventTrigger.EventType;
            if (type == 3)
            {
                goto Label_003A;
            }
            if (type == 4)
            {
                goto Label_003A;
            }
            goto Label_0042;
        Label_003A:
            this.GotoState<State_PickupGimmick>();
            return 1;
        Label_0042:
            this.RemoveLog();
            return 0;
        }

        private int CountAccessibleGrids(GridMap<int> grids)
        {
            int num;
            int num2;
            int num3;
            num = 0;
            num2 = 0;
            goto Label_0036;
        Label_0009:
            num3 = 0;
            goto Label_0026;
        Label_0010:
            if (grids.get(num3, num2) < 0)
            {
                goto Label_0022;
            }
            num += 1;
        Label_0022:
            num3 += 1;
        Label_0026:
            if (num3 < grids.w)
            {
                goto Label_0010;
            }
            num2 += 1;
        Label_0036:
            if (num2 < grids.h)
            {
                goto Label_0009;
            }
            return num;
        }

        private void CreateAudiencePlayer()
        {
            List<JSON_MyPhotonPlayerParam> list;
            int num;
            JSON_MyPhotonPlayerParam param;
            MultiPlayer player;
            int num2;
            Unit unit;
            MultiPlayer player2;
            MultiPlayerUnit unit2;
            <CreateAudiencePlayer>c__AnonStorey1D0 storeyd;
            if (MonoSingleton<GameManager>.Instance.AudienceMode != null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            this.mMultiPlayer = new List<MultiPlayer>();
            list = this.mAudiencePlayers;
            num = 0;
            goto Label_0054;
        Label_0029:
            param = list[num];
            player = new MultiPlayer(this, param.playerIndex, param.playerID);
            this.mMultiPlayer.Add(player);
            num += 1;
        Label_0054:
            if (num < list.Count)
            {
                goto Label_0029;
            }
            this.mMultiPlayerUnit = new List<MultiPlayerUnit>();
            num2 = 0;
            goto Label_0101;
        Label_0073:
            storeyd = new <CreateAudiencePlayer>c__AnonStorey1D0();
            unit = this.Battle.AllUnits[num2];
            if (unit != null)
            {
                goto Label_009A;
            }
            goto Label_00FB;
        Label_009A:
            storeyd.playerIndex = unit.OwnerPlayerIndex;
            if (storeyd.playerIndex > 0)
            {
                goto Label_00BA;
            }
            goto Label_00FB;
        Label_00BA:
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd.<>m__7C));
            if (player2 != null)
            {
                goto Label_00E0;
            }
            goto Label_00FB;
        Label_00E0:
            unit2 = new MultiPlayerUnit(this, num2, unit, player2);
            this.mMultiPlayerUnit.Add(unit2);
        Label_00FB:
            num2 += 1;
        Label_0101:
            if (num2 < this.Battle.AllUnits.Count)
            {
                goto Label_0073;
            }
            this.mSendList = new List<MultiPlayInput>();
            return;
        }

        private Transform CreateConditionChangeEffect(EUnitCondition condition)
        {
            GameObject obj2;
            CondEffectText text;
            if ((this.mConditionChangeEffectTemplate == null) == null)
            {
                goto Label_0013;
            }
            return null;
        Label_0013:
            obj2 = Object.Instantiate<GameObject>(this.mConditionChangeEffectTemplate);
            text = obj2.GetComponent<CondEffectText>();
            if ((text != null) == null)
            {
                goto Label_0039;
            }
            text.SetText(condition);
        Label_0039:
            return obj2.get_transform();
        }

        private void CreateCpuBattlePlayer()
        {
            GameManager manager;
            int num;
            MultiPlayer player;
            int num2;
            Unit unit;
            MultiPlayer player2;
            MultiPlayerUnit unit2;
            <CreateCpuBattlePlayer>c__AnonStorey1D1 storeyd;
            if (MonoSingleton<GameManager>.Instance.IsVSCpuBattle != null)
            {
                goto Label_0012;
            }
            return;
        Label_0012:
            this.mMultiPlayer = new List<MultiPlayer>();
            num = 0;
            goto Label_0041;
        Label_0024:
            player = new MultiPlayer(this, num + 1, num + 1);
            this.mMultiPlayer.Add(player);
            num += 1;
        Label_0041:
            if (num < this.CPUBATTLE_PLAYER_NUM)
            {
                goto Label_0024;
            }
            this.mMultiPlayerUnit = new List<MultiPlayerUnit>();
            num2 = 0;
            goto Label_00E9;
        Label_005F:
            storeyd = new <CreateCpuBattlePlayer>c__AnonStorey1D1();
            unit = this.Battle.AllUnits[num2];
            if (unit != null)
            {
                goto Label_0085;
            }
            goto Label_00E5;
        Label_0085:
            storeyd.playerIndex = unit.OwnerPlayerIndex;
            if (storeyd.playerIndex > 0)
            {
                goto Label_00A5;
            }
            goto Label_00E5;
        Label_00A5:
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd.<>m__7D));
            if (player2 != null)
            {
                goto Label_00CB;
            }
            goto Label_00E5;
        Label_00CB:
            unit2 = new MultiPlayerUnit(this, num2, unit, player2);
            this.mMultiPlayerUnit.Add(unit2);
        Label_00E5:
            num2 += 1;
        Label_00E9:
            if (num2 < this.Battle.AllUnits.Count)
            {
                goto Label_005F;
            }
            this.mSendList = new List<MultiPlayInput>();
            return;
        }

        private GridMap<int> CreateCurrentAccessMap()
        {
            Unit unit;
            GridMap<int> map;
            int num;
            int num2;
            unit = this.mBattle.CurrentUnit;
            num = unit.x;
            num2 = unit.y;
            unit.x = unit.startX;
            unit.y = unit.startY;
            map = this.mBattle.MoveMap;
            unit.x = num;
            unit.y = num2;
            return map.clone();
        }

        private Transform CreateEffectChangeCT(int val)
        {
            GameObject obj2;
            BuffEffectText text;
            string str;
            if (val != null)
            {
                goto Label_0008;
            }
            return null;
        Label_0008:
            if ((this.mParamChangeEffectTemplate == null) == null)
            {
                goto Label_001B;
            }
            return null;
        Label_001B:
            obj2 = Object.Instantiate<GameObject>(this.mParamChangeEffectTemplate);
            if (obj2 != null)
            {
                goto Label_0034;
            }
            return null;
        Label_0034:
            text = obj2.GetComponent<BuffEffectText>();
            if ((text != null) == null)
            {
                goto Label_00E0;
            }
            if ((text.Text != null) == null)
            {
                goto Label_00E0;
            }
            str = "quest.POP_INC_CT";
            text.Text.BottomColor = GameSettings.Instance.Buff_TextBottomColor;
            text.Text.TopColor = GameSettings.Instance.Buff_TextTopColor;
            if (val >= 0)
            {
                goto Label_00C4;
            }
            val *= -1;
            str = "quest.POP_DEC_CT";
            text.Text.BottomColor = GameSettings.Instance.Debuff_TextBottomColor;
            text.Text.TopColor = GameSettings.Instance.Debuff_TextTopColor;
        Label_00C4:
            text.Text.text = string.Format(LocalizedText.Get(str), (int) val);
        Label_00E0:
            return obj2.get_transform();
        }

        private void CreateMultiPlayer()
        {
            MyPhoton photon;
            List<JSON_MyPhotonPlayerParam> list;
            int num;
            JSON_MyPhotonPlayerParam param;
            MultiPlayer player;
            int num2;
            Unit unit;
            MultiPlayer player2;
            MultiPlayerUnit unit2;
            <CreateMultiPlayer>c__AnonStorey1CF storeycf;
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            this.mMultiPlayer = new List<MultiPlayer>();
            photon = PunMonoSingleton<MyPhoton>.Instance;
            list = photon.GetMyPlayersStarted();
            num = 0;
            goto Label_0073;
        Label_0030:
            param = list[num];
            if (param.playerIndex != photon.MyPlayerIndex)
            {
                goto Label_004E;
            }
            goto Label_006F;
        Label_004E:
            player = new MultiPlayer(this, param.playerIndex, param.playerID);
            this.mMultiPlayer.Add(player);
        Label_006F:
            num += 1;
        Label_0073:
            if (num < list.Count)
            {
                goto Label_0030;
            }
            this.mMultiPlayerUnit = new List<MultiPlayerUnit>();
            num2 = 0;
            goto Label_0137;
        Label_0092:
            storeycf = new <CreateMultiPlayer>c__AnonStorey1CF();
            unit = this.Battle.AllUnits[num2];
            if (unit != null)
            {
                goto Label_00B9;
            }
            goto Label_0131;
        Label_00B9:
            storeycf.playerIndex = unit.OwnerPlayerIndex;
            if (storeycf.playerIndex != photon.MyPlayerIndex)
            {
                goto Label_00DE;
            }
            goto Label_0131;
        Label_00DE:
            if (storeycf.playerIndex > 0)
            {
                goto Label_00F0;
            }
            goto Label_0131;
        Label_00F0:
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeycf.<>m__7B));
            if (player2 != null)
            {
                goto Label_0116;
            }
            goto Label_0131;
        Label_0116:
            unit2 = new MultiPlayerUnit(this, num2, unit, player2);
            this.mMultiPlayerUnit.Add(unit2);
        Label_0131:
            num2 += 1;
        Label_0137:
            if (num2 < this.Battle.AllUnits.Count)
            {
                goto Label_0092;
            }
            this.mSendList = new List<MultiPlayInput>();
            this.mResumeMultiPlay = photon.IsResume();
            this.mResumeAlreadyStartPlayer.Clear();
            return;
        }

        private unsafe string CreateMultiPlayInputList(EMultiPlayRecvDataHeader header, int unitID, List<MultiPlayInput> sendList)
        {
            object[] objArray4;
            object[] objArray3;
            object[] objArray2;
            object[] objArray1;
            MyPhoton photon;
            int num;
            MyPhoton.MyPlayer player;
            int num2;
            MultiPlayInput input;
            List<MultiPlayInput> list;
            List<MultiPlayInput> list2;
            MultiPlayInput input2;
            MultiPlayInput input3;
            List<MultiPlayInput>.Enumerator enumerator;
            List<MultiPlayInput>.Enumerator enumerator2;
            string str;
            int num3;
            int num4;
            int num5;
            int num6;
            int num7;
            int num8;
            int num9;
            int num10;
            int num11;
            int num12;
            int num13;
            int num14;
            <CreateMultiPlayInputList>c__AnonStorey1D6 storeyd;
            <CreateMultiPlayInputList>c__AnonStorey1D5 storeyd2;
            string str2;
            storeyd = new <CreateMultiPlayInputList>c__AnonStorey1D6();
            photon = PunMonoSingleton<MyPhoton>.Instance;
            num = photon.MyPlayerIndex;
            player = photon.GetMyPlayer();
            num2 = (player != null) ? player.playerID : 0;
            if (sendList != null)
            {
                goto Label_003B;
            }
            sendList = new List<MultiPlayInput>();
        Label_003B:
            if (sendList.Count > 0)
            {
                goto Label_005E;
            }
            input = new MultiPlayInput();
            input.c = 0;
            sendList.Add(input);
        Label_005E:
            list = new List<MultiPlayInput>();
            if (header != 1)
            {
                goto Label_01BA;
            }
            list2 = new List<MultiPlayInput>();
            input2 = null;
            enumerator = sendList.GetEnumerator();
        Label_007E:
            try
            {
                goto Label_00BE;
            Label_0083:
                input3 = &enumerator.Current;
                if (input3.c != 2)
                {
                    goto Label_00A2;
                }
                input2 = input3;
                goto Label_00BE;
            Label_00A2:
                if (input2 == null)
                {
                    goto Label_00B5;
                }
                list2.Add(input2);
                input2 = null;
            Label_00B5:
                list2.Add(input3);
            Label_00BE:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0083;
                }
                goto Label_00DC;
            }
            finally
            {
            Label_00CF:
                ((List<MultiPlayInput>.Enumerator) enumerator).Dispose();
            }
        Label_00DC:
            storeyd2 = new <CreateMultiPlayInputList>c__AnonStorey1D5();
            enumerator2 = sendList.GetEnumerator();
        Label_00EB:
            try
            {
                goto Label_0146;
            Label_00F0:
                storeyd2.input = &enumerator2.Current;
                if (storeyd2.input.c != 6)
                {
                    goto Label_0123;
                }
                list.Add(storeyd2.input);
                goto Label_0146;
            Label_0123:
                list.RemoveAll(new Predicate<MultiPlayInput>(storeyd2.<>m__8D));
                list.Add(storeyd2.input);
            Label_0146:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_00F0;
                }
                goto Label_0164;
            }
            finally
            {
            Label_0157:
                ((List<MultiPlayInput>.Enumerator) enumerator2).Dispose();
            }
        Label_0164:
            if (input2 == null)
            {
                goto Label_01B6;
            }
            list2.Add(input2);
            objArray1 = new object[] { "send lastMove x:", (float) input2.x, " z:", (float) input2.z };
            this.MultiPlayLog(string.Concat(objArray1));
            input2 = null;
        Label_01B6:
            sendList = list;
        Label_01BA:
            storeyd.def = new MultiPlayInput();
            this.mMultiPlaySendID += 1;
            objArray2 = new object[] { "{\"h\":", (int) header, ",\"b\":", (int) this.UnitStartCountTotal, ",\"sq\":", (int) this.mMultiPlaySendID };
            str2 = string.Concat(objArray2);
            objArray3 = new object[] { str2, ",\"pidx\":", (int) num, ",\"pid\":", (int) num2, ",\"uid\":", (int) unitID };
            str = string.Concat(objArray3);
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__8E)) == null)
            {
                goto Label_02F1;
            }
            str = str + ",\"c\":[";
            num3 = 0;
            goto Label_02D6;
        Label_0295:
            str = (str + ((num3 > 0) ? "," : string.Empty)) + ((int) sendList[num3].c);
            num3 += 1;
        Label_02D6:
            if (num3 < sendList.Count)
            {
                goto Label_0295;
            }
            str = str + "]";
        Label_02F1:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__8F)) == null)
            {
                goto Label_037B;
            }
            str = str + ",\"u\":[";
            num4 = 0;
            goto Label_0360;
        Label_031F:
            str = (str + ((num4 > 0) ? "," : string.Empty)) + ((int) sendList[num4].u);
            num4 += 1;
        Label_0360:
            if (num4 < sendList.Count)
            {
                goto Label_031F;
            }
            str = str + "]";
        Label_037B:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__90)) == null)
            {
                goto Label_0413;
            }
            str = str + ",\"s\":[";
            num5 = 0;
            goto Label_03F8;
        Label_03A9:
            str = ((str + ((num5 > 0) ? ",\"" : "\"")) + JsonEscape.Escape(sendList[num5].s)) + "\"";
            num5 += 1;
        Label_03F8:
            if (num5 < sendList.Count)
            {
                goto Label_03A9;
            }
            str = str + "]";
        Label_0413:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__91)) == null)
            {
                goto Label_04AB;
            }
            str = str + ",\"i\":[";
            num6 = 0;
            goto Label_0490;
        Label_0441:
            str = ((str + ((num6 > 0) ? ",\"" : "\"")) + JsonEscape.Escape(sendList[num6].i)) + "\"";
            num6 += 1;
        Label_0490:
            if (num6 < sendList.Count)
            {
                goto Label_0441;
            }
            str = str + "]";
        Label_04AB:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__92)) == null)
            {
                goto Label_0535;
            }
            str = str + ",\"gx\":[";
            num7 = 0;
            goto Label_051A;
        Label_04D9:
            str = (str + ((num7 > 0) ? "," : string.Empty)) + ((int) sendList[num7].gx);
            num7 += 1;
        Label_051A:
            if (num7 < sendList.Count)
            {
                goto Label_04D9;
            }
            str = str + "]";
        Label_0535:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__93)) == null)
            {
                goto Label_05BF;
            }
            str = str + ",\"gy\":[";
            num8 = 0;
            goto Label_05A4;
        Label_0563:
            str = (str + ((num8 > 0) ? "," : string.Empty)) + ((int) sendList[num8].gy);
            num8 += 1;
        Label_05A4:
            if (num8 < sendList.Count)
            {
                goto Label_0563;
            }
            str = str + "]";
        Label_05BF:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__94)) == null)
            {
                goto Label_0649;
            }
            str = str + ",\"ul\":[";
            num9 = 0;
            goto Label_062E;
        Label_05ED:
            str = (str + ((num9 > 0) ? "," : string.Empty)) + ((int) sendList[num9].ul);
            num9 += 1;
        Label_062E:
            if (num9 < sendList.Count)
            {
                goto Label_05ED;
            }
            str = str + "]";
        Label_0649:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__95)) == null)
            {
                goto Label_06D3;
            }
            str = str + ",\"d\":[";
            num10 = 0;
            goto Label_06B8;
        Label_0677:
            str = (str + ((num10 > 0) ? "," : string.Empty)) + ((int) sendList[num10].d);
            num10 += 1;
        Label_06B8:
            if (num10 < sendList.Count)
            {
                goto Label_0677;
            }
            str = str + "]";
        Label_06D3:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__96)) == null)
            {
                goto Label_075D;
            }
            str = str + ",\"x\":[";
            num11 = 0;
            goto Label_0742;
        Label_0701:
            str = (str + ((num11 > 0) ? "," : string.Empty)) + ((float) sendList[num11].x);
            num11 += 1;
        Label_0742:
            if (num11 < sendList.Count)
            {
                goto Label_0701;
            }
            str = str + "]";
        Label_075D:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__97)) == null)
            {
                goto Label_07E7;
            }
            str = str + ",\"z\":[";
            num12 = 0;
            goto Label_07CC;
        Label_078B:
            str = (str + ((num12 > 0) ? "," : string.Empty)) + ((float) sendList[num12].z);
            num12 += 1;
        Label_07CC:
            if (num12 < sendList.Count)
            {
                goto Label_078B;
            }
            str = str + "]";
        Label_07E7:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__98)) == null)
            {
                goto Label_0871;
            }
            str = str + ",\"r\":[";
            num13 = 0;
            goto Label_0856;
        Label_0815:
            str = (str + ((num13 > 0) ? "," : string.Empty)) + ((float) sendList[num13].r);
            num13 += 1;
        Label_0856:
            if (num13 < sendList.Count)
            {
                goto Label_0815;
            }
            str = str + "]";
        Label_0871:
            str = str + "}";
            objArray4 = new object[] { "[PUN] send packet sq:", (int) this.mMultiPlaySendID, " pid:", (int) num2, " pidx:", (int) num, " h:", (EMultiPlayRecvDataHeader) header, " b:", (int) this.UnitStartCountTotal };
            this.MultiPlayLog(string.Concat(objArray4));
            if (header != 1)
            {
                goto Label_0913;
            }
            num14 = 0;
            goto Label_0906;
        Label_0900:
            num14 += 1;
        Label_0906:
            if (num14 < sendList.Count)
            {
                goto Label_0900;
            }
        Label_0913:
            Debug.LogWarning("SendJson:" + ((int) str.Length));
            return str;
        }

        private Transform CreateParamChangeEffect(ParamTypes type, bool isDebuff)
        {
            GameObject obj2;
            BuffEffectText text;
            if ((this.mParamChangeEffectTemplate == null) == null)
            {
                goto Label_0013;
            }
            return null;
        Label_0013:
            obj2 = Object.Instantiate<GameObject>(this.mParamChangeEffectTemplate);
            text = obj2.GetComponent<BuffEffectText>();
            if ((text != null) == null)
            {
                goto Label_003A;
            }
            text.SetText(type, isDebuff);
        Label_003A:
            return obj2.get_transform();
        }

        private unsafe byte[] CreateSendBinary(EMultiPlayRecvDataHeader header, int unitID, List<MultiPlayInput> sendList)
        {
            object[] objArray1;
            MyPhoton photon;
            MyPhoton.MyPlayer player;
            int num;
            int num2;
            MultiPlayInput input;
            List<MultiPlayInput> list;
            List<MultiPlayInput> list2;
            MultiPlayInput input2;
            MultiPlayInput input3;
            List<MultiPlayInput>.Enumerator enumerator;
            List<MultiPlayInput>.Enumerator enumerator2;
            MultiPlayRecvData data;
            int num3;
            int num4;
            int num5;
            int num6;
            int num7;
            int num8;
            int num9;
            int num10;
            int num11;
            int num12;
            int num13;
            byte[] buffer;
            <CreateSendBinary>c__AnonStorey1D4 storeyd;
            <CreateSendBinary>c__AnonStorey1D3 storeyd2;
            storeyd = new <CreateSendBinary>c__AnonStorey1D4();
            photon = PunMonoSingleton<MyPhoton>.Instance;
            player = photon.GetMyPlayer();
            num = photon.MyPlayerIndex;
            num2 = (player != null) ? player.playerID : 0;
            if (sendList != null)
            {
                goto Label_003B;
            }
            sendList = new List<MultiPlayInput>();
        Label_003B:
            if (sendList.Count > 0)
            {
                goto Label_005E;
            }
            input = new MultiPlayInput();
            input.c = 0;
            sendList.Add(input);
        Label_005E:
            list = new List<MultiPlayInput>();
            if (header != 1)
            {
                goto Label_01BA;
            }
            list2 = new List<MultiPlayInput>();
            input2 = null;
            enumerator = sendList.GetEnumerator();
        Label_007E:
            try
            {
                goto Label_00BE;
            Label_0083:
                input3 = &enumerator.Current;
                if (input3.c != 2)
                {
                    goto Label_00A2;
                }
                input2 = input3;
                goto Label_00BE;
            Label_00A2:
                if (input2 == null)
                {
                    goto Label_00B5;
                }
                list2.Add(input2);
                input2 = null;
            Label_00B5:
                list2.Add(input3);
            Label_00BE:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0083;
                }
                goto Label_00DC;
            }
            finally
            {
            Label_00CF:
                ((List<MultiPlayInput>.Enumerator) enumerator).Dispose();
            }
        Label_00DC:
            storeyd2 = new <CreateSendBinary>c__AnonStorey1D3();
            enumerator2 = sendList.GetEnumerator();
        Label_00EB:
            try
            {
                goto Label_0146;
            Label_00F0:
                storeyd2.input = &enumerator2.Current;
                if (storeyd2.input.c != 6)
                {
                    goto Label_0123;
                }
                list.Add(storeyd2.input);
                goto Label_0146;
            Label_0123:
                list.RemoveAll(new Predicate<MultiPlayInput>(storeyd2.<>m__81));
                list.Add(storeyd2.input);
            Label_0146:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_00F0;
                }
                goto Label_0164;
            }
            finally
            {
            Label_0157:
                ((List<MultiPlayInput>.Enumerator) enumerator2).Dispose();
            }
        Label_0164:
            if (input2 == null)
            {
                goto Label_01B6;
            }
            list2.Add(input2);
            objArray1 = new object[] { "send lastMove x:", (float) input2.x, " z:", (float) input2.z };
            this.MultiPlayLog(string.Concat(objArray1));
            input2 = null;
        Label_01B6:
            sendList = list;
        Label_01BA:
            data = new MultiPlayRecvData();
            storeyd.def = new MultiPlayInput();
            data.h = header;
            data.b = this.UnitStartCountTotal;
            data.sq = this.mMultiPlaySendID;
            data.pidx = num;
            data.pid = num2;
            data.uid = unitID;
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__82)) == null)
            {
                goto Label_0263;
            }
            data.c = new int[sendList.Count];
            num3 = 0;
            goto Label_0256;
        Label_0239:
            data.c[num3] = sendList[num3].c;
            num3 += 1;
        Label_0256:
            if (num3 < sendList.Count)
            {
                goto Label_0239;
            }
        Label_0263:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__83)) == null)
            {
                goto Label_02BF;
            }
            data.u = new int[sendList.Count];
            num4 = 0;
            goto Label_02B2;
        Label_0295:
            data.u[num4] = sendList[num4].u;
            num4 += 1;
        Label_02B2:
            if (num4 < sendList.Count)
            {
                goto Label_0295;
            }
        Label_02BF:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__84)) == null)
            {
                goto Label_031B;
            }
            data.s = new string[sendList.Count];
            num5 = 0;
            goto Label_030E;
        Label_02F1:
            data.s[num5] = sendList[num5].s;
            num5 += 1;
        Label_030E:
            if (num5 < sendList.Count)
            {
                goto Label_02F1;
            }
        Label_031B:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__85)) == null)
            {
                goto Label_0377;
            }
            data.i = new string[sendList.Count];
            num6 = 0;
            goto Label_036A;
        Label_034D:
            data.i[num6] = sendList[num6].i;
            num6 += 1;
        Label_036A:
            if (num6 < sendList.Count)
            {
                goto Label_034D;
            }
        Label_0377:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__86)) == null)
            {
                goto Label_03D3;
            }
            data.gx = new int[sendList.Count];
            num7 = 0;
            goto Label_03C6;
        Label_03A9:
            data.gx[num7] = sendList[num7].gx;
            num7 += 1;
        Label_03C6:
            if (num7 < sendList.Count)
            {
                goto Label_03A9;
            }
        Label_03D3:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__87)) == null)
            {
                goto Label_042F;
            }
            data.gy = new int[sendList.Count];
            num8 = 0;
            goto Label_0422;
        Label_0405:
            data.gy[num8] = sendList[num8].gy;
            num8 += 1;
        Label_0422:
            if (num8 < sendList.Count)
            {
                goto Label_0405;
            }
        Label_042F:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__88)) == null)
            {
                goto Label_048B;
            }
            data.ul = new int[sendList.Count];
            num9 = 0;
            goto Label_047E;
        Label_0461:
            data.ul[num9] = sendList[num9].ul;
            num9 += 1;
        Label_047E:
            if (num9 < sendList.Count)
            {
                goto Label_0461;
            }
        Label_048B:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__89)) == null)
            {
                goto Label_04E7;
            }
            data.d = new int[sendList.Count];
            num10 = 0;
            goto Label_04DA;
        Label_04BD:
            data.d[num10] = sendList[num10].d;
            num10 += 1;
        Label_04DA:
            if (num10 < sendList.Count)
            {
                goto Label_04BD;
            }
        Label_04E7:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__8A)) == null)
            {
                goto Label_0543;
            }
            data.x = new float[sendList.Count];
            num11 = 0;
            goto Label_0536;
        Label_0519:
            data.x[num11] = sendList[num11].x;
            num11 += 1;
        Label_0536:
            if (num11 < sendList.Count)
            {
                goto Label_0519;
            }
        Label_0543:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__8B)) == null)
            {
                goto Label_059F;
            }
            data.z = new float[sendList.Count];
            num12 = 0;
            goto Label_0592;
        Label_0575:
            data.z[num12] = sendList[num12].z;
            num12 += 1;
        Label_0592:
            if (num12 < sendList.Count)
            {
                goto Label_0575;
            }
        Label_059F:
            if (sendList.Find(new Predicate<MultiPlayInput>(storeyd.<>m__8C)) == null)
            {
                goto Label_05FB;
            }
            data.r = new float[sendList.Count];
            num13 = 0;
            goto Label_05EE;
        Label_05D1:
            data.r[num13] = sendList[num13].r;
            num13 += 1;
        Label_05EE:
            if (num13 < sendList.Count)
            {
                goto Label_05D1;
            }
        Label_05FB:
            return GameUtility.Object2Binary<MultiPlayRecvData>(data);
        }

        private unsafe byte[] CreateSendResumeInfo()
        {
            object[] objArray1;
            MultiPlayResumeParam param;
            string str;
            int num;
            Unit unit;
            BaseStatus status;
            MultiPlayResumeUnitData data;
            int num2;
            int num3;
            int num4;
            Unit.AbilityChange change;
            int num5;
            Unit.AbilityChange.Data data2;
            int num6;
            AbilityData data3;
            Dictionary<SkillData, OInt> dictionary;
            int num7;
            int num8;
            List<BuffAttachment> list;
            List<MultiPlayResumeBuff> list2;
            int num9;
            MultiPlayResumeBuff buff;
            int num10;
            int num11;
            List<CondAttachment> list3;
            int num12;
            int num13;
            Unit.UnitShield shield;
            int num14;
            int num15;
            Unit.UnitMhmDamage damage;
            RandXorshift xorshift;
            RandXorshift xorshift2;
            uint[] numArray;
            uint[] numArray2;
            int num16;
            int num17;
            List<GimmickEvent> list4;
            int num18;
            List<TrickData> list5;
            int num19;
            int num20;
            WeatherData data4;
            byte[] buffer;
            string str2;
            param = new MultiPlayResumeParam();
            param.unit = new MultiPlayResumeUnitData[this.Battle.AllUnits.Count];
            str = string.Empty;
            num = 0;
            goto Label_0E47;
        Label_002E:
            unit = this.Battle.AllUnits[num];
            if (unit != null)
            {
                goto Label_004B;
            }
            goto Label_0E43;
        Label_004B:
            param.unit[num] = new MultiPlayResumeUnitData();
            status = unit.CurrentStatus;
            data = param.unit[num];
            data.name = unit.UnitName;
            data.hp = status.param.hp;
            data.chp = unit.UnitChangedHp;
            data.gem = unit.Gems;
            data.dir = unit.Direction;
            data.x = unit.x;
            data.y = unit.y;
            data.target = this.SearchUnitIndex(unit.Target);
            data.ragetarget = this.SearchUnitIndex(unit.RageTarget);
            data.aiindex = unit.AIActionIndex;
            data.aiturn = unit.AIActionTurnCount;
            data.aipatrol = unit.AIPatrolIndex;
            data.flag = unit.UnitFlag;
            data.casttarget = -1;
            if (unit.CastSkill == null)
            {
                goto Label_027E;
            }
            data.castskill = unit.CastSkill.SkillParam.iname;
            data.casttime = unit.CastTime;
            data.castindex = unit.CastIndex;
            if (unit.CastSkillGridMap == null)
            {
                goto Label_0225;
            }
            data.grid_w = unit.CastSkillGridMap.w;
            data.grid_h = unit.CastSkillGridMap.h;
            if (unit.CastSkillGridMap.data == null)
            {
                goto Label_01DF;
            }
            data.castgrid = new int[(int) unit.CastSkillGridMap.data.Length];
        Label_01DF:
            num2 = 0;
            goto Label_0211;
        Label_01E7:
            data.castgrid[num2] = (unit.CastSkillGridMap.data[num2] == null) ? 0 : 1;
            num2 += 1;
        Label_0211:
            if (num2 < ((int) unit.CastSkillGridMap.data.Length))
            {
                goto Label_01E7;
            }
        Label_0225:
            data.ctx = (unit.GridTarget == null) ? -1 : unit.GridTarget.x;
            data.cty = (unit.GridTarget == null) ? -1 : unit.GridTarget.y;
            data.casttarget = this.SearchUnitIndex(unit.UnitTarget);
        Label_027E:
            data.chargetime = unit.ChargeTime;
            if (unit.IsGimmick == null)
            {
                goto Label_02B9;
            }
            data.isDead = (unit.IsDisableGimmick() == null) ? 0 : 1;
            goto Label_02D2;
        Label_02B9:
            data.isDead = (unit.IsDead == null) ? 0 : 1;
        Label_02D2:
            data.deathcnt = unit.DeathCount;
            data.autojewel = unit.AutoJewel;
            data.waitturn = unit.WaitClock;
            data.moveturn = unit.WaitMoveTurn;
            data.actcnt = unit.ActionCount;
            data.turncnt = unit.TurnCount;
            data.search = (unit.IsUnitFlag(8) == null) ? 0 : 1;
            data.entry = (unit.IsUnitFlag(0x400000) == null) ? 0 : 1;
            data.to_dying = (unit.IsUnitFlag(0x800000) == null) ? 0 : 1;
            data.paralyse = (unit.IsUnitFlag(0x200) == null) ? 0 : 1;
            data.trgcnt = 0;
            if (unit.EventTrigger == null)
            {
                goto Label_03B9;
            }
            data.trgcnt = unit.EventTrigger.Count;
        Label_03B9:
            data.killcnt = unit.KillCount;
            data.boi = unit.CreateBreakObjId;
            data.boc = unit.CreateBreakObjClock;
            data.own = unit.OwnerPlayerIndex;
            if (unit.EntryTriggers == null)
            {
                goto Label_0457;
            }
            data.etr = new int[unit.EntryTriggers.Count];
            num3 = 0;
            goto Label_0445;
        Label_0417:
            data.etr[num3] = (unit.EntryTriggers[num3].on == null) ? 0 : 1;
            num3 += 1;
        Label_0445:
            if (num3 < unit.EntryTriggers.Count)
            {
                goto Label_0417;
            }
        Label_0457:
            if (unit.AbilityChangeLists.Count == null)
            {
                goto Label_0617;
            }
            data.abilchgs = new MultiPlayResumeAbilChg[unit.AbilityChangeLists.Count];
            num4 = 0;
            goto Label_0605;
        Label_0486:
            change = unit.AbilityChangeLists[num4];
            if (change == null)
            {
                goto Label_05FF;
            }
            if (change.mDataLists.Count != null)
            {
                goto Label_04B2;
            }
            goto Label_05FF;
        Label_04B2:
            data.abilchgs[num4] = new MultiPlayResumeAbilChg();
            data.abilchgs[num4].acd = new MultiPlayResumeAbilChg.Data[change.mDataLists.Count];
            num5 = 0;
            goto Label_05EC;
        Label_04E9:
            data2 = change.mDataLists[num5];
            data.abilchgs[num4].acd[num5] = new MultiPlayResumeAbilChg.Data();
            data.abilchgs[num4].acd[num5].fid = data2.mFromAp.iname;
            data.abilchgs[num4].acd[num5].tid = data2.mToAp.iname;
            data.abilchgs[num4].acd[num5].tur = data2.mTurn;
            data.abilchgs[num4].acd[num5].irs = (data2.mIsReset == null) ? 0 : 1;
            data.abilchgs[num4].acd[num5].exp = data2.mExp;
            data.abilchgs[num4].acd[num5].iif = (data2.mIsInfinite == null) ? 0 : 1;
            num5 += 1;
        Label_05EC:
            if (num5 < change.mDataLists.Count)
            {
                goto Label_04E9;
            }
        Label_05FF:
            num4 += 1;
        Label_0605:
            if (num4 < unit.AbilityChangeLists.Count)
            {
                goto Label_0486;
            }
        Label_0617:
            if (unit.AddedAbilitys.Count == null)
            {
                goto Label_06A8;
            }
            data.addedabils = new MultiPlayResumeAddedAbil[unit.AddedAbilitys.Count];
            num6 = 0;
            goto Label_0696;
        Label_0646:
            data3 = unit.AddedAbilitys[num6];
            data.addedabils[num6] = new MultiPlayResumeAddedAbil();
            data.addedabils[num6].aid = data3.AbilityID;
            data.addedabils[num6].exp = data3.Exp;
            num6 += 1;
        Label_0696:
            if (num6 < unit.AddedAbilitys.Count)
            {
                goto Label_0646;
            }
        Label_06A8:
            dictionary = unit.GetSkillUseCount();
            num7 = dictionary.Keys.Count;
            if (num7 <= 0)
            {
                goto Label_0743;
            }
            data.skillname = new string[num7];
            data.skillcnt = new int[num7];
            num8 = 0;
            goto Label_073A;
        Label_06EA:
            data.skillname[num8] = Enumerable.ToArray<SkillData>(dictionary.Keys)[num8].SkillParam.iname;
            data.skillcnt[num8] = *(&(Enumerable.ToArray<OInt>(dictionary.Values)[num8]));
            num8 += 1;
        Label_073A:
            if (num8 < num7)
            {
                goto Label_06EA;
            }
        Label_0743:
            list = unit.BuffAttachments;
            if (list.Count <= 0)
            {
                goto Label_099E;
            }
            list2 = new List<MultiPlayResumeBuff>();
            num9 = 0;
            goto Label_0982;
        Label_0767:
            if (list[num9].CheckTiming == 7)
            {
                goto Label_097C;
            }
            if (list[num9].CheckTiming != 9)
            {
                goto Label_0795;
            }
            goto Label_097C;
        Label_0795:
            buff = new MultiPlayResumeBuff();
            buff.unitindex = this.SearchUnitIndex(list[num9].user);
            buff.checkunit = this.SearchUnitIndex(list[num9].CheckTarget);
            buff.timing = list[num9].CheckTiming;
            buff.condition = list[num9].UseCondition;
            buff.turn = list[num9].turn;
            buff.passive = list[num9].IsPassive;
            buff.type = list[num9].BuffType;
            buff.vtp = (list[num9].IsNegativeValueIsBuff == null) ? 0 : 1;
            buff.calc = list[num9].CalcType;
            buff.skilltarget = list[num9].skilltarget;
            buff.lid = list[num9].LinkageID;
            buff.ubc = list[num9].UpBuffCount;
            buff.atl.Clear();
            if (list[num9].AagTargetLists == null)
            {
                goto Label_0939;
            }
            num10 = 0;
            goto Label_091F;
        Label_08E6:
            num11 = this.SearchUnitIndex(list[num9].AagTargetLists[num10]);
            if (num11 < 0)
            {
                goto Label_0919;
            }
            buff.atl.Add(num11);
        Label_0919:
            num10 += 1;
        Label_091F:
            if (num10 < list[num9].AagTargetLists.Count)
            {
                goto Label_08E6;
            }
        Label_0939:
            buff.iname = null;
            if (list[num9].skill == null)
            {
                goto Label_0973;
            }
            buff.iname = list[num9].skill.SkillParam.iname;
        Label_0973:
            list2.Add(buff);
        Label_097C:
            num9 += 1;
        Label_0982:
            if (num9 < list.Count)
            {
                goto Label_0767;
            }
            data.buff = list2.ToArray();
        Label_099E:
            list3 = unit.CondAttachments;
            if (list3.Count <= 0)
            {
                goto Label_0BBA;
            }
            data.cond = new MultiPlayResumeBuff[list3.Count];
            num12 = 0;
            goto Label_0BAC;
        Label_09CE:
            data.cond[num12] = new MultiPlayResumeBuff();
            data.cond[num12].unitindex = this.SearchUnitIndex(list3[num12].user);
            data.cond[num12].checkunit = this.SearchUnitIndex(list3[num12].CheckTarget);
            data.cond[num12].timing = list3[num12].CheckTiming;
            data.cond[num12].condition = list3[num12].UseCondition;
            data.cond[num12].turn = list3[num12].turn;
            data.cond[num12].passive = list3[num12].IsPassive;
            data.cond[num12].type = list3[num12].CondType;
            data.cond[num12].calc = (int) list3[num12].Condition;
            data.cond[num12].curse = (list3[num12].IsCurse == null) ? 0 : 1;
            data.cond[num12].skilltarget = list3[num12].skilltarget;
            data.cond[num12].bc_id = list3[num12].CondId;
            data.cond[num12].lid = list3[num12].LinkageID;
            data.cond[num12].iname = null;
            if (list3[num12].skill == null)
            {
                goto Label_0BA6;
            }
            data.cond[num12].iname = list3[num12].skill.SkillParam.iname;
        Label_0BA6:
            num12 += 1;
        Label_0BAC:
            if (num12 < list3.Count)
            {
                goto Label_09CE;
            }
        Label_0BBA:
            if ((unit.Shields == null) || (unit.Shields.Count == null))
            {
                goto Label_0CE7;
            }
            data.shields = new MultiPlayResumeShield[unit.Shields.Count];
            num13 = 0;
            goto Label_0CD5;
        Label_0BF4:
            shield = unit.Shields[num13];
            data.shields[num13] = new MultiPlayResumeShield();
            data.shields[num13].inm = shield.skill_param.iname;
            data.shields[num13].nhp = shield.hp;
            data.shields[num13].mhp = shield.hpMax;
            data.shields[num13].ntu = shield.turn;
            data.shields[num13].mtu = shield.turnMax;
            data.shields[num13].drt = shield.damage_rate;
            data.shields[num13].dvl = shield.damage_value;
            num13 += 1;
        Label_0CD5:
            if (num13 < unit.Shields.Count)
            {
                goto Label_0BF4;
            }
        Label_0CE7:
            if ((unit.JudgeHpLists == null) || (unit.JudgeHpLists.Count == null))
            {
                goto Label_0D55;
            }
            data.hpis = new string[unit.JudgeHpLists.Count];
            num14 = 0;
            goto Label_0D43;
        Label_0D21:
            data.hpis[num14] = unit.JudgeHpLists[num14].SkillID;
            num14 += 1;
        Label_0D43:
            if (num14 < unit.JudgeHpLists.Count)
            {
                goto Label_0D21;
            }
        Label_0D55:
            if ((unit.MhmDamageLists == null) || (unit.MhmDamageLists.Count == null))
            {
                goto Label_0DF6;
            }
            data.mhm_dmgs = new MultiPlayResumeMhmDmg[unit.MhmDamageLists.Count];
            num15 = 0;
            goto Label_0DE4;
        Label_0D8F:
            damage = unit.MhmDamageLists[num15];
            data.mhm_dmgs[num15] = new MultiPlayResumeMhmDmg();
            data.mhm_dmgs[num15].typ = damage.mType;
            data.mhm_dmgs[num15].dmg = damage.mDamage;
            num15 += 1;
        Label_0DE4:
            if (num15 < unit.MhmDamageLists.Count)
            {
                goto Label_0D8F;
            }
        Label_0DF6:
            str2 = str + unit.UnitName;
            objArray1 = new object[] { str2, "- pos:", (int) unit.x, ",", (int) unit.y };
            str = string.Concat(objArray1);
        Label_0E43:
            num += 1;
        Label_0E47:
            if (num < this.Battle.AllUnits.Count)
            {
                goto Label_002E;
            }
            DebugUtility.LogWarning(str);
            param.unitcastindex = Unit.UNIT_CAST_INDEX;
            xorshift = this.Battle.CloneRand();
            xorshift2 = this.Battle.CloneRandDamage();
            numArray = xorshift.GetSeed();
            numArray2 = xorshift2.GetSeed();
            param.rndseed = new uint[4];
            param.dmgrndseed = new uint[4];
            num16 = 0;
            goto Label_0EE1;
        Label_0EBF:
            param.rndseed[num16] = numArray[num16];
            param.dmgrndseed[num16] = numArray2[num16];
            num16 += 1;
        Label_0EE1:
            if (num16 < 4)
            {
                goto Label_0EBF;
            }
            param.seed = this.Battle.Seed;
            param.damageseed = this.Battle.DamageSeed;
            param.unitstartcount = this.UnitStartCountTotal;
            param.treasurecount = this.TreasureCount;
            param.versusturn = this.Battle.VersusTurnCount;
            param.ctm = this.Battle.ClockTime;
            param.ctt = this.Battle.ClockTimeTotal;
            if ((this.mRecvResumeRequest == null) || (this.mRecvResumeRequest.Count <= 0))
            {
                goto Label_0F89;
            }
            param.resumeID = this.mRecvResumeRequest[0].pidx;
        Label_0F89:
            if (this.mRecvResumeRequest.Count <= 1)
            {
                goto Label_0FEF;
            }
            param.otherresume = new int[this.mRecvResumeRequest.Count - 1];
            num17 = 1;
            goto Label_0FDD;
        Label_0FBA:
            param.otherresume[num17 - 1] = this.mRecvResumeRequest[num17].pidx;
            num17 += 1;
        Label_0FDD:
            if (num17 < this.mRecvResumeRequest.Count)
            {
                goto Label_0FBA;
            }
        Label_0FEF:
            list4 = this.Battle.GimmickEventList;
            if (list4.Count <= 0)
            {
                goto Label_1089;
            }
            param.gimmick = new MultiPlayGimmickEventParam[list4.Count];
            num18 = 0;
            goto Label_107B;
        Label_1023:
            param.gimmick[num18] = new MultiPlayGimmickEventParam();
            param.gimmick[num18].count = list4[num18].count;
            param.gimmick[num18].completed = (list4[num18].IsCompleted == null) ? 0 : 1;
            num18 += 1;
        Label_107B:
            if (num18 < list4.Count)
            {
                goto Label_1023;
            }
        Label_1089:
            list5 = TrickData.GetEffectAll();
            if (list5.Count <= 0)
            {
                goto Label_121F;
            }
            param.trick = new MultiPlayTrickParam[list5.Count];
            num19 = 0;
            goto Label_1211;
        Label_10B7:
            param.trick[num19] = new MultiPlayTrickParam();
            param.trick[num19].tid = list5[num19].TrickParam.Iname;
            param.trick[num19].val = list5[num19].Valid;
            param.trick[num19].cun = this.SearchUnitIndex(list5[num19].CreateUnit);
            param.trick[num19].rnk = list5[num19].Rank;
            param.trick[num19].rcp = list5[num19].RankCap;
            param.trick[num19].grx = list5[num19].GridX;
            param.trick[num19].gry = list5[num19].GridY;
            param.trick[num19].rac = list5[num19].RestActionCount;
            param.trick[num19].ccl = list5[num19].CreateClock;
            param.trick[num19].tag = list5[num19].Tag;
            num19 += 1;
        Label_1211:
            if (num19 < list5.Count)
            {
                goto Label_10B7;
            }
        Label_121F:
            if ((this.mEventScript != null) == null)
            {
                goto Label_12A8;
            }
            if (this.mEventScript.mSequences == null)
            {
                goto Label_12A8;
            }
            if (((int) this.mEventScript.mSequences.Length) == null)
            {
                goto Label_12A8;
            }
            param.scr_ev_trg = new bool[(int) this.mEventScript.mSequences.Length];
            num20 = 0;
            goto Label_1294;
        Label_1272:
            param.scr_ev_trg[num20] = this.mEventScript.mSequences[num20].Triggered;
            num20 += 1;
        Label_1294:
            if (num20 < ((int) this.mEventScript.mSequences.Length))
            {
                goto Label_1272;
            }
        Label_12A8:
            param.wti.wid = null;
            data4 = WeatherData.CurrentWeatherData;
            if (data4 == null)
            {
                goto Label_1336;
            }
            param.wti.wid = data4.WeatherParam.Iname;
            param.wti.mun = this.SearchUnitIndex(data4.ModifyUnit);
            param.wti.rnk = data4.Rank;
            param.wti.rcp = data4.RankCap;
            param.wti.ccl = data4.ChangeClock;
        Label_1336:
            return GameUtility.Object2Binary<MultiPlayResumeParam>(param);
        }

        private void DeactivateUnusedUnitMarkers()
        {
            int num;
            int num2;
            num = 0;
            goto Label_005A;
        Label_0007:
            num2 = 0;
            goto Label_0043;
        Label_000E:
            if (this.mUnitMarkers[num][num2].get_layer() != GameUtility.LayerHidden)
            {
                goto Label_003F;
            }
            this.mUnitMarkers[num][num2].SetActive(0);
        Label_003F:
            num2 += 1;
        Label_0043:
            if (num2 < this.mUnitMarkers[num].Count)
            {
                goto Label_000E;
            }
            num += 1;
        Label_005A:
            if (num < ((int) this.mUnitMarkers.Length))
            {
                goto Label_0007;
            }
            return;
        }

        private void DeleteOnGimmickIcon()
        {
            int num;
            TacticsUnitController controller;
            num = 0;
            goto Label_0050;
        Label_0007:
            if (this.mBattle.Units[num].IsGimmick != null)
            {
                goto Label_004C;
            }
            controller = this.FindUnitController(this.mBattle.Units[num]);
            if ((controller != null) == null)
            {
                goto Label_004C;
            }
            controller.DeleteGimmickIconAll();
        Label_004C:
            num += 1;
        Label_0050:
            if (num < this.mBattle.Units.Count)
            {
                goto Label_0007;
            }
            return;
        }

        private void DestroyCamera()
        {
            CameraHook.RemovePreCullEventListener(new CameraHook.PreCullEvent(this.OnCameraPreCull));
            return;
        }

        private void DestroyUI(bool is_part)
        {
            int num;
            int num2;
            BadStatusEffects.UnloadEffects();
            if ((this.mSkillTargetWindow != null) == null)
            {
                goto Label_0028;
            }
            GameUtility.DestroyGameObject(this.mSkillTargetWindow);
            this.mSkillTargetWindow = null;
        Label_0028:
            if ((this.mTouchController != null) == null)
            {
                goto Label_0087;
            }
            this.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Remove(this.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
            this.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Remove(this.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
        Label_0087:
            if (is_part != null)
            {
                goto Label_00B0;
            }
            if ((this.mBattleUI != null) == null)
            {
                goto Label_00B0;
            }
            GameUtility.DestroyGameObject(this.mBattleUI);
            this.mBattleUI = null;
        Label_00B0:
            this.mBattleSceneRoot = null;
            if ((this.mDefaultBattleScene != null) == null)
            {
                goto Label_00DA;
            }
            GameUtility.DestroyGameObject(this.mDefaultBattleScene);
            this.mDefaultBattleScene = null;
        Label_00DA:
            num = 0;
            goto Label_00F6;
        Label_00E1:
            GameUtility.DestroyGameObject(this.mBattleScenes[num]);
            num += 1;
        Label_00F6:
            if (num < this.mBattleScenes.Count)
            {
                goto Label_00E1;
            }
            this.mBattleScenes.Clear();
            if (this.mUnitMarkers == null)
            {
                goto Label_014A;
            }
            num2 = 0;
            goto Label_0135;
        Label_0124:
            GameUtility.DestroyGameObjects(this.mUnitMarkers[num2]);
            num2 += 1;
        Label_0135:
            if (num2 < ((int) this.mUnitMarkers.Length))
            {
                goto Label_0124;
            }
            this.mUnitMarkers = null;
        Label_014A:
            return;
        }

        public void DisableUserInterface()
        {
            this.ToggleUserInterface(0);
            return;
        }

        private unsafe bool DisconnetEvent()
        {
            MyPhoton photon;
            GameManager manager;
            MultiPlayer player;
            List<MultiPlayer>.Enumerator enumerator;
            int num;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            manager = MonoSingleton<GameManager>.Instance;
            if (this.mExecDisconnected == null)
            {
                goto Label_0027;
            }
            if (this.Battle.IsMultiTower != null)
            {
                goto Label_0032;
            }
        Label_0027:
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_0034;
            }
        Label_0032:
            return 0;
        Label_0034:
            if (photon.CurrentState == 4)
            {
                goto Label_01BA;
            }
            if ((this.mBattleUI_MultiPlay != null) == null)
            {
                goto Label_01BA;
            }
            if (this.mExecDisconnected != null)
            {
                goto Label_01B8;
            }
            if (this.mIsWaitingForBattleSignal != null)
            {
                goto Label_01B8;
            }
            if (BlockInterrupt.IsBlocked(2) != null)
            {
                goto Label_01B8;
            }
            this.mExecDisconnected = 1;
            this.mBattleUI_MultiPlay.OnMyDisconnected();
            if (this.mDisconnectType != 1)
            {
                goto Label_00AB;
            }
            this.MultiPlayLog("OnBan");
            this.mBattleUI.OnBan();
            goto Label_01B2;
        Label_00AB:
            if (this.mDisconnectType != null)
            {
                goto Label_019C;
            }
            if (photon.LastError != 4)
            {
                goto Label_013D;
            }
            this.mPhotonErrString = "2:TimeOut:" + ((int) this.mMultiPlaySendID);
            enumerator = this.mMultiPlayer.GetEnumerator();
        Label_00E9:
            try
            {
                goto Label_011B;
            Label_00EE:
                player = &enumerator.Current;
                this.mPhotonErrString = this.mPhotonErrString + "-" + &player.RecvInputNum.ToString();
            Label_011B:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_00EE;
                }
                goto Label_0138;
            }
            finally
            {
            Label_012C:
                ((List<MultiPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_0138:
            goto Label_0181;
        Label_013D:
            if (photon.LastError != 3)
            {
                goto Label_0159;
            }
            this.mPhotonErrString = "1:TimeOut";
            goto Label_0181;
        Label_0159:
            if (photon.LastError != 10)
            {
                goto Label_0176;
            }
            this.mPhotonErrString = "3:SendFailed";
            goto Label_0181;
        Label_0176:
            this.mPhotonErrString = "0";
        Label_0181:
            this.MultiPlayLog("OnDisconnected");
            this.mBattleUI.OnDisconnected();
            goto Label_01B2;
        Label_019C:
            this.MultiPlayLog("OnSequenceError");
            this.mBattleUI.OnSequenceError();
        Label_01B2:
            this.GotoState<State_Disconnected>();
        Label_01B8:
            return 1;
        Label_01BA:
            return 0;
        }

        [DebuggerHidden]
        private IEnumerator DownloadNextQuestAsync()
        {
            <DownloadNextQuestAsync>c__Iterator2D iteratord;
            iteratord = new <DownloadNextQuestAsync>c__Iterator2D();
            iteratord.<>f__this = this;
            return iteratord;
        }

        [DebuggerHidden]
        private IEnumerator DownloadQuestAsync(QuestParam quest)
        {
            <DownloadQuestAsync>c__Iterator2E iteratore;
            iteratore = new <DownloadQuestAsync>c__Iterator2E();
            iteratore.quest = quest;
            iteratore.<$>quest = quest;
            iteratore.<>f__this = this;
            return iteratore;
        }

        public bool EnableControlBattleUI(eMaskBattleUI emask, bool is_enable)
        {
            return this.EnableControlBattleUI(emask, is_enable);
        }

        public bool EnableControlBattleUI(uint mask, bool is_enable)
        {
            uint num;
            List<TutorialButtonImage> list;
            int num2;
            bool flag;
            bool flag2;
            List<TutorialButtonImage> list2;
            int num3;
            TutorialButtonImage image;
            <EnableControlBattleUI>c__AnonStorey1EB storeyeb;
            if (this.mCurrentQuest == null)
            {
                goto Label_001C;
            }
            if (this.mCurrentQuest.type == 3)
            {
                goto Label_001E;
            }
        Label_001C:
            return 0;
        Label_001E:
            if (mask != null)
            {
                goto Label_0026;
            }
            return 0;
        Label_0026:
            num = this.mControlDisableMask;
            if (is_enable == null)
            {
                goto Label_0047;
            }
            this.mControlDisableMask &= ~mask;
            goto Label_0055;
        Label_0047:
            this.mControlDisableMask |= mask;
        Label_0055:
            list = new List<TutorialButtonImage>(this.TutorialButtonImages);
            num2 = 0;
            goto Label_0108;
        Label_0068:
            storeyeb = new <EnableControlBattleUI>c__AnonStorey1EB();
            storeyeb.emask = 1 << (num2 & 0x1f);
            flag = ((this.mControlDisableMask & storeyeb.emask) == 0) == 0;
            flag2 = ((num & storeyeb.emask) == 0) == 0;
            if (flag != flag2)
            {
                goto Label_00AF;
            }
            goto Label_0104;
        Label_00AF:
            list2 = list.FindAll(new Predicate<TutorialButtonImage>(storeyeb.<>m__B5));
            num3 = 0;
            goto Label_00F6;
        Label_00CC:
            image = list2[num3];
            if (image == null)
            {
                goto Label_00F0;
            }
            image.get_gameObject().SetActive(flag);
        Label_00F0:
            num3 += 1;
        Label_00F6:
            if (num3 < list2.Count)
            {
                goto Label_00CC;
            }
        Label_0104:
            num2 += 1;
        Label_0108:
            if (num2 < MAX_MASK_BATTLE_UI)
            {
                goto Label_0068;
            }
            return ((num == this.mControlDisableMask) == 0);
        }

        public void EnableUserInterface()
        {
            this.ToggleUserInterface(1);
            return;
        }

        private void EnableWeatherEffect(bool is_enable)
        {
            GameObject obj2;
            obj2 = this.GetWeatherEffectAttach();
            if (obj2 == null)
            {
                goto Label_0019;
            }
            obj2.SetActive(is_enable);
        Label_0019:
            return;
        }

        private void EndMultiPlayer()
        {
            int num;
            int num2;
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            if (this.mBeginMultiPlay != null)
            {
                goto Label_0028;
            }
            this.MultiPlayLog("[PUN]not begin EndMultiPlayer");
            return;
        Label_0028:
            this.mBeginMultiPlay = 0;
            this.MultiPlayLog("[PUN]EndMultiPlayer*******");
            num = 0;
            goto Label_0057;
        Label_0041:
            this.mMultiPlayerUnit[num].End(this);
            num += 1;
        Label_0057:
            if (num < this.mMultiPlayerUnit.Count)
            {
                goto Label_0041;
            }
            num2 = 0;
            goto Label_0085;
        Label_006F:
            this.mMultiPlayer[num2].End(this);
            num2 += 1;
        Label_0085:
            if (num2 < this.mMultiPlayer.Count)
            {
                goto Label_006F;
            }
            this.MultiPlayInputTimeLimit = 0f;
            return;
        }

        private void ExitScene()
        {
            if (this.mSceneExiting == null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            this.mSceneExiting = 1;
            MonoSingleton<GameManager>.Instance.Player.UpdateUnitTrophyStates(0);
            if (this.mCurrentQuest.type != 3)
            {
                goto Label_0055;
            }
            MyMetaps.TrackTutorialPoint(this.mCurrentQuest.iname);
            FlowNode_TriggerLocalEvent.TriggerLocalEvent(this, "TUTORIAL_EXIT");
            goto Label_0060;
        Label_0055:
            FlowNode_TriggerLocalEvent.TriggerLocalEvent(this, "EXIT");
        Label_0060:
            return;
        }

        public void ExtentionMultiInputTime(bool bMove)
        {
            if (this.MultiPlayInputTimeLimit <= 0f)
            {
                goto Label_0094;
            }
            if (bMove == null)
            {
                goto Label_0052;
            }
            if (this.MultiPlayExtMoveInputTime != null)
            {
                goto Label_0052;
            }
            this.MultiPlayInputTimeLimit += this.MULTI_PLAY_INPUT_EXT_MOVE;
            this.MultiPlayAddInputTime = this.MULTI_PLAY_INPUT_EXT_MOVE;
            this.MultiPlayExtMoveInputTime = 1;
            this.mBattleUI_MultiPlay.OnExtInput();
        Label_0052:
            if (bMove != null)
            {
                goto Label_0094;
            }
            if (this.MultiPlayExtSelectInputTime != null)
            {
                goto Label_0094;
            }
            this.MultiPlayInputTimeLimit += this.MULTI_PLAY_INPUT_EXT_SELECT;
            this.MultiPlayAddInputTime = this.MULTI_PLAY_INPUT_EXT_SELECT;
            this.MultiPlayExtSelectInputTime = 1;
            this.mBattleUI_MultiPlay.OnExtInput();
        Label_0094:
            return;
        }

        private bool FindChangedShield(out TacticsUnitController tuc, out TacticsUnitController.ShieldState shield)
        {
            List<FindShield> list;
            int num;
            int num2;
            FindShield shield2;
            list = new List<FindShield>();
            num = 0;
            goto Label_0097;
        Label_000D:
            num2 = 0;
            goto Label_0067;
        Label_0014:
            if (this.mTacticsUnits[num].Shields[num2].Dirty == null)
            {
                goto Label_0063;
            }
            list.Add(new FindShield(this.mTacticsUnits[num], this.mTacticsUnits[num].Shields[num2]));
        Label_0063:
            num2 += 1;
        Label_0067:
            if (num2 < this.mTacticsUnits[num].Shields.Count)
            {
                goto Label_0014;
            }
            if (list.Count == null)
            {
                goto Label_0093;
            }
            goto Label_00A8;
        Label_0093:
            num += 1;
        Label_0097:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_000D;
            }
        Label_00A8:
            *(tuc) = null;
            *(shield) = null;
            if (list.Count != null)
            {
                goto Label_00BB;
            }
            return 0;
        Label_00BB:
            if (list.Count <= 1)
            {
                goto Label_00EA;
            }
            if (<>f__am$cache10C != null)
            {
                goto Label_00E0;
            }
            <>f__am$cache10C = new Comparison<FindShield>(SceneBattle.<FindChangedShield>m__7A);
        Label_00E0:
            MySort<FindShield>.Sort(list, <>f__am$cache10C);
        Label_00EA:
            shield2 = list[0];
            *(tuc) = shield2.mTuc;
            *(shield) = shield2.mShield;
            return 1;
        }

        private TacticsUnitController FindClosestUnitController(Vector3 position, float maxDistance)
        {
            TacticsUnitController controller;
            float num;
            int num2;
            TacticsUnitController controller2;
            bool flag;
            float num3;
            controller = null;
            num = maxDistance;
            num2 = 0;
            goto Label_009C;
        Label_000B:
            controller2 = this.mTacticsUnits[num2];
            if ((controller2 == null) == null)
            {
                goto Label_0029;
            }
            goto Label_0098;
        Label_0029:
            if ((((controller != null) == null) ? 0 : (this.CalcCoord(controller.CenterPosition) == this.CalcCoord(controller2.CenterPosition))) == null)
            {
                goto Label_0078;
            }
            if (controller2.Unit.IsGimmick != null)
            {
                goto Label_0078;
            }
            controller = controller2;
            goto Label_0098;
        Label_0078:
            num3 = GameUtility.CalcDistance2D(controller2.get_transform().get_position(), position);
            if (num3 >= num)
            {
                goto Label_0098;
            }
            controller = controller2;
            num = num3;
        Label_0098:
            num2 += 1;
        Label_009C:
            if (num2 < this.mTacticsUnits.Count)
            {
                goto Label_000B;
            }
            return controller;
        }

        private unsafe Vector3[] FindPath(int startX, int startY, int goalX, int goalY, int disableHeight, GridMap<int> walkableField)
        {
            Grid[] gridArray;
            Vector3[] vectorArray;
            int num;
            gridArray = this.mBattle.CurrentMap.FindPath(startX, startY, goalX, goalY, disableHeight, walkableField);
            if (gridArray != null)
            {
                goto Label_0022;
            }
            return null;
        Label_0022:
            vectorArray = new Vector3[(int) gridArray.Length];
            num = 0;
            goto Label_004B;
        Label_0032:
            *(&(vectorArray[num])) = this.CalcGridCenter(gridArray[num]);
            num += 1;
        Label_004B:
            if (num < ((int) vectorArray.Length))
            {
                goto Label_0032;
            }
            return vectorArray;
        }

        private unsafe Unit FindTarget(Unit current, SkillData skill, GridMap<bool> map, EUnitSide targetSide)
        {
            TacticsUnitController controller;
            IntVector2 vector;
            Vector3 vector2;
            Vector2 vector3;
            float num;
            Unit unit;
            int num2;
            Unit unit2;
            int num3;
            int num4;
            Vector2 vector4;
            float num5;
            float num6;
            float num7;
            BattleCore.CommandResult result;
            controller = this.FindUnitController(current);
            vector = this.CalcCoord(controller.CenterPosition);
            vector2 = controller.get_transform().get_forward();
            &vector3..ctor(&vector2.x, &vector2.z);
            num = -3.402823E+38f;
            unit = null;
            num2 = this.mBattle.Units.Count - 1;
            goto Label_01C2;
        Label_0059:
            unit2 = this.mBattle.Units[num2];
            if (unit2.IsGimmick == null)
            {
                goto Label_008A;
            }
            if (unit2.IsBreakObj != null)
            {
                goto Label_008A;
            }
            goto Label_01BC;
        Label_008A:
            if (unit2.IsDead != null)
            {
                goto Label_01BC;
            }
            if (unit2.IsEntry == null)
            {
                goto Label_01BC;
            }
            if (unit2.IsSub == null)
            {
                goto Label_00B3;
            }
            goto Label_01BC;
        Label_00B3:
            if (unit2.Side == targetSide)
            {
                goto Label_00D5;
            }
            if (this.Battle.IsTargetBreakUnit(current, unit2, skill) == null)
            {
                goto Label_01BC;
            }
        Label_00D5:
            if (map.isValid(unit2.x, unit2.y) == null)
            {
                goto Label_01BC;
            }
            if (map.get(unit2.x, unit2.y) == null)
            {
                goto Label_01BC;
            }
            num3 = unit2.x;
            num4 = unit2.y;
            &vector4..ctor((float) (num3 - current.x), (float) (num4 - current.y));
            num5 = &vector4.get_magnitude();
            &vector4.Normalize();
            num7 = (Vector2.Dot(vector3, vector4) - 1f) - num5;
            if (num >= num7)
            {
                goto Label_01BC;
            }
            result = this.mBattle.GetCommandResult(current, &vector.x, &vector.y, unit2.x, unit2.y, skill);
            if (result == null)
            {
                goto Label_01BC;
            }
            if (result.targets == null)
            {
                goto Label_01BC;
            }
            if (result.targets.Count <= 0)
            {
                goto Label_01BC;
            }
            unit = unit2;
            num = num7;
        Label_01BC:
            num2 -= 1;
        Label_01C2:
            if (num2 >= 0)
            {
                goto Label_0059;
            }
            if (unit == null)
            {
                goto Label_01D4;
            }
            return unit;
        Label_01D4:
            return null;
        }

        public TacticsUnitController FindUnitController(Unit unit)
        {
            int num;
            num = 0;
            goto Label_002F;
        Label_0007:
            if (this.mTacticsUnits[num].Unit != unit)
            {
                goto Label_002B;
            }
            return this.mTacticsUnits[num];
        Label_002B:
            num += 1;
        Label_002F:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0007;
            }
            return null;
        }

        private void FinishGimmickState()
        {
            if (this.mBattle.Logs.Num <= 0)
            {
                goto Label_001D;
            }
            this.GotoState<State_WaitForLog>();
            return;
        Label_001D:
            this.GotoMapCommand();
            return;
        }

        private unsafe void FocusUnit(Unit unit)
        {
            TacticsUnitController controller;
            GameSettings settings;
            ObjectAnimator animator;
            if (unit != null)
            {
                goto Label_0007;
            }
            return;
        Label_0007:
            controller = this.FindUnitController(unit);
            if ((controller == null) == null)
            {
                goto Label_001C;
            }
            return;
        Label_001C:
            settings = GameSettings.Instance;
            ObjectAnimator.Get(Camera.get_main()).AnimateTo(controller.get_transform().get_position() + &settings.Quest.UnitCamera.get_transform().get_position(), &settings.Quest.UnitCamera.get_transform().get_rotation(), 0.3f, 2);
            return;
        }

        public void ForceEndQuest()
        {
            MyPhoton photon;
            this.mIsForceEndQuest = 1;
            this.mExecDisconnected = 1;
            if (this.Battle.IsMultiTower == null)
            {
                goto Label_0036;
            }
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if ((photon != null) == null)
            {
                goto Label_0036;
            }
            photon.Disconnect();
        Label_0036:
            if (this.IsInState<State_ExitQuest>() == null)
            {
                goto Label_0042;
            }
            return;
        Label_0042:
            this.GotoState<State_ExitQuest>();
            return;
        }

        public void ForceEndQuestInArena()
        {
            if (this.Battle.IsArenaSkip == null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            this.Pause(0);
            GlobalEvent.Invoke("CLOSE_QUESTMENU", this);
            if (this.Battle.GetQuestResult() == null)
            {
                goto Label_0034;
            }
            return;
        Label_0034:
            this.Battle.IsArenaSkip = 1;
            SRPG_TouchInputModule.LockInput();
            this.GotoState_WaitSignal<State_ArenaSkipWait>();
            return;
        }

        private bool GainMultiPlayInputTimeLimit()
        {
            Unit unit;
            TacticsUnitController controller;
            string str;
            if (this.IsInState<State_MapMoveSelect_Stick>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_SelectItemV2>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_SelectSkillV2>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_SelectGridEventV2>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_SelectTargetV2>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_InputDirection>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_MapWait>() != null)
            {
                goto Label_005A;
            }
            if (this.IsInState<State_MapCommandV2>() != null)
            {
                goto Label_005A;
            }
            return 0;
        Label_005A:
            unit = this.Battle.CurrentUnit;
            if (unit.CastSkill == null)
            {
                goto Label_0084;
            }
            if (unit.CastSkill.CastType != 2)
            {
                goto Label_0084;
            }
            return 0;
        Label_0084:
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_00A5;
            }
            if (controller.IsJumpCant() == null)
            {
                goto Label_00A5;
            }
            return 0;
        Label_00A5:
            str = FlowNode_Variable.Get("DisableTimeLimit");
            if (string.IsNullOrEmpty(str) != null)
            {
                goto Label_00C8;
            }
            if (long.Parse(str) == null)
            {
                goto Label_00C8;
            }
            return 0;
        Label_00C8:
            if (unit.IsControl != null)
            {
                goto Label_00D5;
            }
            return 0;
        Label_00D5:
            return 1;
        }

        public TacticsUnitController[] GetActiveUnits()
        {
            return this.mUnitsInBattle.ToArray();
        }

        public float GetCameraAngle()
        {
            return this.m_CameraAngle;
        }

        public float GetCameraDistance()
        {
            return this.m_TargetCameraDistance;
        }

        private unsafe PosRot GetCameraOffset_Unit()
        {
            Transform transform;
            PosRot rot;
            transform = &GameSettings.Instance.Quest.UnitCamera.get_transform();
            rot = new PosRot();
            &rot.Position = transform.get_localPosition();
            &rot.Rotation = transform.get_localRotation();
            return rot;
        }

        public unsafe void GetCameraTargetView(out Vector3 center, out float distance, Vector3[] targets)
        {
            Camera camera;
            float num;
            Vector3 vector;
            int num2;
            bool flag;
            int num3;
            Vector3 vector2;
            camera = Camera.get_main();
            num = this.m_TargetCamera.CameraDistance;
            vector = this.m_TargetCamera.TargetPosition;
            *((float*) distance) = num;
            if (((int) targets.Length) != 1)
            {
                goto Label_003D;
            }
            *(center) = *(&(targets[0]));
            return;
        Label_003D:
            center..ctor(0f, 3.402823E+38f, 0f);
            num2 = 0;
            goto Label_00AC;
        Label_0059:
            center.x += &(targets[num2]).x;
            center.z += &(targets[num2]).z;
            center.y = Mathf.Min(&(targets[num2]).y, center.y);
            num2 += 1;
        Label_00AC:
            if (num2 < ((int) targets.Length))
            {
                goto Label_0059;
            }
            center.x /= (float) ((int) targets.Length);
            center.y -= 0.5f;
            center.z /= (float) ((int) targets.Length);
            flag = 0;
        Label_00EC:
            flag = 0;
            this.m_TargetCamera.CameraDistance = *((float*) distance);
            this.m_TargetCamera.SetPositionYaw(*(center), this.m_CameraAngle);
            num3 = 0;
            goto Label_018C;
        Label_011B:
            vector2 = camera.WorldToViewportPoint(*(&(targets[num3])));
            if (&vector2.x < 0f)
            {
                goto Label_0174;
            }
            if (&vector2.x > 1f)
            {
                goto Label_0174;
            }
            if (&vector2.y < 0f)
            {
                goto Label_0174;
            }
            if (&vector2.y <= 0.9f)
            {
                goto Label_0186;
            }
        Label_0174:
            *((float*) distance) += 1f;
            flag = 1;
            goto Label_0196;
        Label_0186:
            num3 += 1;
        Label_018C:
            if (num3 < ((int) targets.Length))
            {
                goto Label_011B;
            }
        Label_0196:
            if (flag == null)
            {
                goto Label_01AE;
            }
            if (*(((float*) distance)) < GameSettings.Instance.GameCamera_MaxDistance)
            {
                goto Label_00EC;
            }
        Label_01AE:
            *(center) -= Vector3.get_up() * GameSettings.Instance.GameCamera_UnitHeightOffset;
            this.m_TargetCamera.CameraDistance = num;
            this.m_TargetCamera.TargetPosition = vector;
            return;
        }

        public unsafe int GetDisplayHeight(Unit unit)
        {
            TacticsUnitController controller;
            IntVector2 vector;
            Grid grid;
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_004D;
            }
            vector = this.CalcCoord(controller.CenterPosition);
            grid = this.mBattle.CurrentMap[&vector.x, &vector.y];
            if (grid == null)
            {
                goto Label_004D;
            }
            return grid.height;
        Label_004D:
            return 0;
        }

        private UnitGauge GetGaugeTemplateFor(Unit unit)
        {
            if ((unit.Side != 1) && (unit.IsBreakObj == null))
            {
                goto Label_003A;
            }
            return (((this.EnemyGaugeOverlayTemplate != null) == null) ? this.GaugeOverlayTemplate : this.EnemyGaugeOverlayTemplate);
        Label_003A:
            return this.GaugeOverlayTemplate;
        }

        public unsafe GameObject GetJumpSpotEffect(Unit unit)
        {
            int num;
            KeyValuePair<Unit, GameObject> pair;
            KeyValuePair<Unit, GameObject> pair2;
            num = 0;
            goto Label_003A;
        Label_0007:
            pair = this.mJumpSpotEffects[num];
            if (&pair.Key != unit)
            {
                goto Label_0036;
            }
            pair2 = this.mJumpSpotEffects[num];
            return &pair2.Value;
        Label_0036:
            num += 1;
        Label_003A:
            if (num < this.mJumpSpotEffects.Count)
            {
                goto Label_0007;
            }
            return null;
        }

        private int GetMultiPlayInputTimeLimit()
        {
            int num;
            num = (int) this.MultiPlayInputTimeLimit;
            if (this.MultiPlayInputTimeLimit <= ((float) num))
            {
                goto Label_0019;
            }
            num += 1;
        Label_0019:
            return num;
        }

        public int GetNextMyTurn()
        {
            int num;
            int num2;
            Unit unit;
            num = 0;
            num2 = 0;
            goto Label_0079;
        Label_0009:
            unit = this.Battle.Order[(0 + num2) % this.Battle.Order.Count].Unit;
            if (unit.IsDead != null)
            {
                goto Label_0075;
            }
            if (unit.IsEntry == null)
            {
                goto Label_0075;
            }
            if (unit.IsSub == null)
            {
                goto Label_0059;
            }
            goto Label_0075;
        Label_0059:
            if (unit.OwnerPlayerIndex != this.Battle.MyPlayerIndex)
            {
                goto Label_0071;
            }
            return num;
        Label_0071:
            num += 1;
        Label_0075:
            num2 += 1;
        Label_0079:
            if (num2 < this.Battle.Order.Count)
            {
                goto Label_0009;
            }
            return -1;
        }

        private EUnitDirection GetSkillDirectionByTargetArea(Unit unit, int curX, int curY, GridMap<bool> targetArea)
        {
            int num;
            int num2;
            int num3;
            int num4;
            num = 0;
            num2 = 0;
            num3 = 0;
            goto Label_0041;
        Label_000B:
            num4 = 0;
            goto Label_0030;
        Label_0012:
            if (targetArea.get(num4, num3) == null)
            {
                goto Label_002C;
            }
            num += num4 - curX;
            num2 += num3 - curY;
        Label_002C:
            num4 += 1;
        Label_0030:
            if (num4 < targetArea.w)
            {
                goto Label_0012;
            }
            num3 += 1;
        Label_0041:
            if (num3 < targetArea.h)
            {
                goto Label_000B;
            }
            return BattleCore.UnitDirectionFromVector(unit, num, num2);
        }

        private SRPG_TouchInputModule GetTouchInputModule()
        {
            GameObject obj2;
            obj2 = GameObject.Find("EVENTSYSTEM");
            return (((obj2 == null) == null) ? obj2.GetComponent<SRPG_TouchInputModule>() : null);
        }

        private GameObject GetWeatherEffectAttach()
        {
            return this.mGoWeatherAttach;
        }

        private void GotoInputMovement()
        {
            this.mBattleUI.OnInputMoveStart();
            this.GotoState_WaitSignal<State_MapMoveSelect_Stick>();
            return;
        }

        private void GotoItemSelect()
        {
            this.mBattleUI.OnItemSelectStart();
            if ((this.mBattleUI.ItemWindow != null) == null)
            {
                goto Label_0031;
            }
            this.mBattleUI.ItemWindow.Refresh();
        Label_0031:
            this.GotoState_WaitSignal<State_SelectItemV2>();
            return;
        }

        private void GotoMapCommand()
        {
            Unit unit;
            TacticsUnitController controller;
            int num;
            bool flag;
            bool flag2;
            unit = this.mBattle.CurrentUnit;
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_003F;
            }
            if (controller.IsJumpCant() == null)
            {
                goto Label_003F;
            }
            this.mBattle.CommandWait(0);
            this.GotoState_WaitSignal<State_WaitForLog>();
            return;
        Label_003F:
            this.Battle.NotifyMapCommand();
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_00BA;
            }
            if (this.Battle.IsUnitAuto(unit) != null)
            {
                goto Label_00BA;
            }
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_00BA;
            }
            if (this.Battle.MultiPlayDisconnectAutoBattle == null)
            {
                goto Label_00A6;
            }
            if (this.Battle.IsVSForceWin != null)
            {
                goto Label_00A6;
            }
            this.GotoState_WaitSignal<State_MapCommandAI>();
            goto Label_00B9;
        Label_00A6:
            this.mBattle.CommandWait(0);
            this.GotoState_WaitSignal<State_WaitForLog>();
        Label_00B9:
            return;
        Label_00BA:
            num = 0;
            goto Label_00E8;
        Label_00C1:
            this.mTacticsUnits[num].AutoUpdateRotation = 1;
            this.mTacticsUnits[num].ResetHPGauge();
            num += 1;
        Label_00E8:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_00C1;
            }
            if (unit.IsControl == null)
            {
                goto Label_013B;
            }
            if (this.mAutoActivateGimmick == null)
            {
                goto Label_013B;
            }
            if (unit.IsUnitFlag(4) != null)
            {
                goto Label_013B;
            }
            if (this.mBattle.CheckGridEventTrigger(unit, 3) == null)
            {
                goto Label_013B;
            }
            this.mAutoActivateGimmick = 0;
            this.GotoState_WaitSignal<State_SelectGridEventV2>();
            return;
        Label_013B:
            if (this.Battle.IsUnitAuto(unit) != null)
            {
                goto Label_0244;
            }
            flag = unit.IsEnableMoveCondition(0);
            flag2 = unit.IsEnableActionCondition();
            if (flag != null)
            {
                goto Label_0169;
            }
            if (flag2 == null)
            {
                goto Label_01C7;
            }
        Label_0169:
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_01AB;
            }
            if (unit.OwnerPlayerIndex == this.Battle.MyPlayerIndex)
            {
                goto Label_01AB;
            }
            this.RefreshOnlyMapCommand();
            this.mBattleUI.OnCommandSelectStart();
            this.GotoState_WaitSignal<State_MapCommandVersus>();
            goto Label_01C2;
        Label_01AB:
            this.RefreshMapCommands();
            this.mBattleUI.OnCommandSelectStart();
            this.GotoState_WaitSignal<State_MapCommandV2>();
        Label_01C2:
            goto Label_023F;
        Label_01C7:
            if (unit.IsEnableSelectDirectionCondition() != null)
            {
                goto Label_01E6;
            }
            this.mBattle.CommandWait(0);
            this.GotoState_WaitSignal<State_WaitForLog>();
            return;
        Label_01E6:
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_0217;
            }
            if (unit.OwnerPlayerIndex == this.Battle.MyPlayerIndex)
            {
                goto Label_0217;
            }
            this.GotoState_WaitSignal<State_MapCommandMultiPlay>();
            goto Label_023F;
        Label_0217:
            this.mBattleUI.OnInputDirectionStart();
            this.mBattleUI.CommandWindow.CancelButton.SetActive(0);
            this.GotoState_WaitSignal<State_InputDirection>();
            return;
        Label_023F:
            goto Label_024A;
        Label_0244:
            this.GotoState_WaitSignal<State_MapCommandAI>();
        Label_024A:
            return;
        }

        private void GotoMapEnd()
        {
            if ((this.mBattleUI != null) == null)
            {
                goto Label_0027;
            }
            this.mBattleUI.OnQuestEnd();
            this.mBattleUI.OnMapEnd();
        Label_0027:
            this.mBattleUI.OnMapEnd();
            if ((this.mBattleUI_MultiPlay != null) == null)
            {
                goto Label_004E;
            }
            this.mBattleUI_MultiPlay.OnMapEnd();
        Label_004E:
            this.EndMultiPlayer();
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_006E;
            }
            this.GotoState_WaitSignal<State_AudienceEnd>();
            goto Label_0074;
        Label_006E:
            this.GotoState_WaitSignal<State_MapEndV2>();
        Label_0074:
            return;
        }

        private void GotoMapStart()
        {
            bool flag;
            bool flag2;
            int num;
            int num2;
            BattleMap map;
            this.ArenaActionCountEnable((this.IsPlayingArenaQuest != null) ? 1 : this.Battle.IsMultiVersus);
            this.RankingQuestActionCountEnable(this.Battle.IsRankingQuest);
            if (this.IsPlayingArenaQuest == null)
            {
                goto Label_0042;
            }
            this.GotoState<State_ArenaCalc>();
            return;
        Label_0042:
            if (this.Battle.IsMultiVersus == null)
            {
                goto Label_0063;
            }
            this.ArenaActionCountSet(this.Battle.RemainVersusTurnCount);
        Label_0063:
            if (this.Battle.IsRankingQuest == null)
            {
                goto Label_0084;
            }
            this.RankingQuestActionCountSet(this.Battle.ActionCount);
        Label_0084:
            this.Battle.MapStart();
            if (this.Battle.CheckEnableSuspendStart() == null)
            {
                goto Label_00BA;
            }
            if (this.Battle.LoadSuspendData() == null)
            {
                goto Label_00BA;
            }
            this.Battle.RelinkTrickGimmickEvents();
        Label_00BA:
            flag = 0;
            flag2 = 0;
            num = 0;
            num2 = 0;
            map = this.Battle.CurrentMap;
            if (map == null)
            {
                goto Label_0134;
            }
            flag = this.Battle.CheckEnableRemainingActionCount(map.WinMonitorCondition);
            num = this.Battle.GetRemainingActionCount(map.WinMonitorCondition);
            flag2 = this.Battle.CheckEnableRemainingActionCount(map.LoseMonitorCondition);
            num2 = this.Battle.GetRemainingActionCount(map.LoseMonitorCondition);
            if (num != -1)
            {
                goto Label_012B;
            }
            flag = 0;
        Label_012B:
            if (num2 != -1)
            {
                goto Label_0134;
            }
            flag2 = 0;
        Label_0134:
            this.RemainingActionCountEnable(flag, flag2);
            this.RemainingActionCountSet(num, num2);
            this.GotoState<State_LoadMapV2>();
            return;
        }

        private void GotoMapViewMode()
        {
            this.mBattleUI.OnMapViewStart();
            this.GotoSelectTarget(null, new SelectTargetCallback(this.GotoMapCommand), null, null, 1);
            return;
        }

        public void GotoNextState()
        {
            if (this.mOnRequestStateChange == null)
            {
                goto Label_0017;
            }
            this.mOnRequestStateChange(0);
        Label_0017:
            return;
        }

        private unsafe void GotoPrepareSkill()
        {
            LogSkill skill;
            TacticsUnitController controller;
            IntVector2 vector;
            Vector3 vector2;
            TacticsUnitController controller2;
            EElement element;
            LogSkill.Target target;
            List<LogSkill.Target>.Enumerator enumerator;
            TacticsUnitController controller3;
            BattleCameraFukan fukan;
            TacticsUnitController controller4;
            List<TacticsUnitController> list;
            LogSkill.Target target2;
            List<LogSkill.Target>.Enumerator enumerator2;
            TacticsUnitController controller5;
            TacticsUnitController controller6;
            List<TacticsUnitController> list2;
            LogSkill.Target target3;
            List<LogSkill.Target>.Enumerator enumerator3;
            TacticsUnitController controller7;
            skill = this.mBattle.Logs.Peek as LogSkill;
            if (skill.skill == null)
            {
                goto Label_008D;
            }
            if (skill.skill.IsCastSkill() == null)
            {
                goto Label_008D;
            }
            if (skill.skill.CastType != 2)
            {
                goto Label_008D;
            }
            controller = this.FindUnitController(skill.self);
            if ((controller != null) == null)
            {
                goto Label_008D;
            }
            vector = skill.pos;
            vector2 = this.CalcGridCenter(&skill.pos.x, &skill.pos.y);
            controller.JumpMapFallPos = vector;
            controller.JumpFallPos = vector2;
        Label_008D:
            if (skill == null)
            {
                goto Label_00BA;
            }
            if (skill.self == null)
            {
                goto Label_00BA;
            }
            if (skill.self.Side != null)
            {
                goto Label_00BA;
            }
            this.mLastPlayerSideUseSkillUnit = skill.self;
        Label_00BA:
            this.mEventRecvSkillUnitLists.Clear();
            if (skill == null)
            {
                goto Label_01CB;
            }
            if (skill.skill == null)
            {
                goto Label_01CB;
            }
            if (skill.targets == null)
            {
                goto Label_01CB;
            }
            controller2 = this.FindUnitController(skill.self);
            if (controller2 == null)
            {
                goto Label_01CB;
            }
            element = skill.skill.ElementType;
            if (element != null)
            {
                goto Label_011D;
            }
            element = controller2.Unit.Element;
        Label_011D:
            enumerator = skill.targets.GetEnumerator();
        Label_012A:
            try
            {
                goto Label_01AD;
            Label_012F:
                target = &enumerator.Current;
                controller3 = this.FindUnitController(target.target);
                if (controller3 != null)
                {
                    goto Label_0158;
                }
                goto Label_01AD;
            Label_0158:
                if (skill.skill.IsDamagedSkill() == null)
                {
                    goto Label_0188;
                }
                if (target.IsAvoid() != null)
                {
                    goto Label_0188;
                }
                this.mEventRecvSkillUnitLists.Add(new EventRecvSkillUnit(controller3, element));
            Label_0188:
                if (target.IsFailCondition() == null)
                {
                    goto Label_01AD;
                }
                this.mEventRecvSkillUnitLists.Add(new EventRecvSkillUnit(controller3, target.failCondition));
            Label_01AD:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_012F;
                }
                goto Label_01CB;
            }
            finally
            {
            Label_01BE:
                ((List<LogSkill.Target>.Enumerator) enumerator).Dispose();
            }
        Label_01CB:
            if (this.mBattle.IsUnitAuto(this.mBattle.CurrentUnit) != null)
            {
                goto Label_01F6;
            }
            if (this.mBattle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_01FC;
            }
        Label_01F6:
            this.HideGrid();
        Label_01FC:
            this.CancelMapViewMode();
            fukan = GameObjectID.FindGameObject<BattleCameraFukan>(this.mBattleUI.FukanCameraID);
            if ((fukan != null) == null)
            {
                goto Label_0231;
            }
            fukan.SetCameraMode(0);
            fukan.SetDisp(0);
        Label_0231:
            if (this.mBattle.IsSkillDirection != null)
            {
                goto Label_0344;
            }
            if (skill == null)
            {
                goto Label_0339;
            }
            if ((this.mEventScript != null) == null)
            {
                goto Label_0339;
            }
            controller4 = this.FindUnitController(skill.self);
            if ((controller4 != null) == null)
            {
                goto Label_0339;
            }
            if (skill.targets == null)
            {
                goto Label_0339;
            }
            if (skill.targets.Count == null)
            {
                goto Label_0339;
            }
            list = new List<TacticsUnitController>();
            enumerator2 = skill.targets.GetEnumerator();
        Label_02A2:
            try
            {
                goto Label_02D5;
            Label_02A7:
                target2 = &enumerator2.Current;
                controller5 = this.FindUnitController(target2.target);
                if ((controller5 != null) == null)
                {
                    goto Label_02D5;
                }
                list.Add(controller5);
            Label_02D5:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_02A7;
                }
                goto Label_02F3;
            }
            finally
            {
            Label_02E6:
                ((List<LogSkill.Target>.Enumerator) enumerator2).Dispose();
            }
        Label_02F3:
            if (list.Count == null)
            {
                goto Label_0339;
            }
            this.mEventSequence = this.mEventScript.OnUseSkill(0, controller4, skill.skill, list, this.mIsFirstPlay);
            if ((this.mEventSequence != null) == null)
            {
                goto Label_0339;
            }
            this.GotoState<State_WaitEvent<State_WaitGC<State_DirectionOffSkill>>>();
            return;
        Label_0339:
            this.GotoState<State_WaitGC<State_DirectionOffSkill>>();
            goto Label_0442;
        Label_0344:
            if (skill == null)
            {
                goto Label_043C;
            }
            if ((this.mEventScript != null) == null)
            {
                goto Label_043C;
            }
            controller6 = this.FindUnitController(skill.self);
            if ((controller6 != null) == null)
            {
                goto Label_043C;
            }
            if (skill.targets == null)
            {
                goto Label_043C;
            }
            if (skill.targets.Count == null)
            {
                goto Label_043C;
            }
            list2 = new List<TacticsUnitController>();
            enumerator3 = skill.targets.GetEnumerator();
        Label_03A5:
            try
            {
                goto Label_03D8;
            Label_03AA:
                target3 = &enumerator3.Current;
                controller7 = this.FindUnitController(target3.target);
                if ((controller7 != null) == null)
                {
                    goto Label_03D8;
                }
                list2.Add(controller7);
            Label_03D8:
                if (&enumerator3.MoveNext() != null)
                {
                    goto Label_03AA;
                }
                goto Label_03F6;
            }
            finally
            {
            Label_03E9:
                ((List<LogSkill.Target>.Enumerator) enumerator3).Dispose();
            }
        Label_03F6:
            if (list2.Count == null)
            {
                goto Label_043C;
            }
            this.mEventSequence = this.mEventScript.OnUseSkill(0, controller6, skill.skill, list2, this.mIsFirstPlay);
            if ((this.mEventSequence != null) == null)
            {
                goto Label_043C;
            }
            this.GotoState<State_WaitEvent<State_WaitGC<State_PrepareSkill>>>();
            return;
        Label_043C:
            this.GotoState<State_WaitGC<State_PrepareSkill>>();
        Label_0442:
            return;
        }

        public void GotoPreviousState()
        {
            if (this.mOnRequestStateChange == null)
            {
                goto Label_0017;
            }
            this.mOnRequestStateChange(1);
        Label_0017:
            return;
        }

        private void GotoQuestStart()
        {
            this.mRevertQuestNewIfRetire = 0;
            this.GotoState_WaitSignal<State_QuestStartV2>();
            return;
        }

        private unsafe void GotoSelectAttackTarget()
        {
            Unit unit;
            TacticsUnitController controller;
            IntVector2 vector;
            SkillData data;
            int num;
            int num2;
            List<Unit> list;
            Vector3 vector2;
            Vector2 vector3;
            float num3;
            Unit unit2;
            int num4;
            int num5;
            int num6;
            Vector2 vector4;
            float num7;
            float num8;
            float num9;
            unit = this.mBattle.CurrentUnit;
            controller = this.FindUnitController(unit);
            vector = this.CalcCoord(controller.CenterPosition);
            data = this.mBattle.CurrentUnit.GetAttackSkill();
            num = unit.x;
            num2 = unit.y;
            unit.x = &vector.x;
            unit.y = &vector.y;
            list = this.mBattle.CreateAttackTargetsAI(unit, data, 0);
            vector2 = controller.get_transform().get_forward();
            &vector3..ctor(&vector2.x, &vector2.z);
            num3 = -3.402823E+38f;
            unit2 = null;
            num4 = 0;
            goto Label_0135;
        Label_00A0:
            if (unit != list[num4])
            {
                goto Label_00B4;
            }
            goto Label_012F;
        Label_00B4:
            num5 = list[num4].x;
            num6 = list[num4].y;
            &vector4..ctor((float) (num5 - unit.x), (float) (num6 - unit.y));
            num7 = &vector4.get_magnitude();
            &vector4.Normalize();
            num9 = (Vector2.Dot(vector3, vector4) - 1f) - num7;
            if (num3 >= num9)
            {
                goto Label_012F;
            }
            unit2 = list[num4];
            num3 = num9;
        Label_012F:
            num4 += 1;
        Label_0135:
            if (num4 < list.Count)
            {
                goto Label_00A0;
            }
            unit.x = num;
            unit.y = num2;
            this.GotoSelectTarget(data, new SelectTargetCallback(this.GotoMapCommand), new SelectTargetPositionWithSkill(this.OnSelectAttackTarget), unit2, 1);
            return;
        }

        private unsafe void GotoSelectTarget(ItemData item, SelectTargetCallback cancel, SelectTargetPositionWithItem accept, Unit defaultTarget, bool allowTargetChange)
        {
            &this.mTargetSelectorParam.Item = item;
            &this.mTargetSelectorParam.Skill = (item == null) ? null : item.Skill;
            &this.mTargetSelectorParam.OnAccept = accept;
            &this.mTargetSelectorParam.OnCancel = cancel;
            &this.mTargetSelectorParam.DefaultTarget = defaultTarget;
            &this.mTargetSelectorParam.AllowTargetChange = allowTargetChange;
            &this.mTargetSelectorParam.IsThrowTargetSelect = 0;
            &this.mTargetSelectorParam.DefaultThrowTarget = null;
            &this.mTargetSelectorParam.ThrowTarget = null;
            this.GotoState_WaitSignal<State_PreSelectTargetV2>();
            return;
        }

        private unsafe void GotoSelectTarget(SkillData skill, SelectTargetCallback cancel, SelectTargetPositionWithSkill accept, Unit defaultTarget, bool allowTargetChange)
        {
            &this.mTargetSelectorParam.Skill = skill;
            &this.mTargetSelectorParam.Item = null;
            &this.mTargetSelectorParam.OnAccept = accept;
            &this.mTargetSelectorParam.OnCancel = cancel;
            &this.mTargetSelectorParam.DefaultTarget = defaultTarget;
            &this.mTargetSelectorParam.AllowTargetChange = allowTargetChange;
            &this.mTargetSelectorParam.IsThrowTargetSelect = 0;
            &this.mTargetSelectorParam.DefaultThrowTarget = null;
            &this.mTargetSelectorParam.ThrowTarget = null;
            if (skill == null)
            {
                goto Label_00A3;
            }
            if (skill.EffectType != 0x16)
            {
                goto Label_0098;
            }
            &this.mTargetSelectorParam.IsThrowTargetSelect = 1;
            this.GotoState_WaitSignal<State_PreThrowTargetSelect>();
            goto Label_009E;
        Label_0098:
            this.GotoState_WaitSignal<State_PreSelectTargetV2>();
        Label_009E:
            goto Label_00A9;
        Label_00A3:
            this.GotoState_WaitSignal<State_PreMapviewV2>();
        Label_00A9:
            return;
        }

        private void GotoSkillSelect()
        {
            UnitAbilitySkillList list;
            list = this.mBattleUI.SkillWindow;
            if ((list != null) == null)
            {
                goto Label_003A;
            }
            DataSource.Bind<AbilityData>(list.get_gameObject(), this.UIParam_CurrentAbility);
            list.Refresh(this.mBattle.CurrentUnit);
        Label_003A:
            this.mBattleUI.OnSkillSelectStart();
            this.mIsBackSelectSkill = 1;
            this.GotoState_WaitSignal<State_SelectSkillV2>();
            this.mIsBackSelectSkill = 0;
            return;
        }

        public void GotoState<StateType>() where StateType: State<SceneBattle>, new()
        {
            this.mState.GotoState<StateType>();
            return;
        }

        private void GotoState_WaitSignal<T>() where T: State<SceneBattle>, new()
        {
            this.GotoState<State_WaitSignal<T>>();
            return;
        }

        private unsafe void GotoUnitChgSelect(bool is_back)
        {
            TacticsUnitController controller;
            IntVector2 vector;
            GridMap<Color32> map;
            GridMap<Color32> map2;
            this.mBattleUI.OnUnitChgSelectStart();
            if ((this.mBattleUI.UnitChgWindow != null) == null)
            {
                goto Label_0031;
            }
            this.mBattleUI.UnitChgWindow.Refresh();
        Label_0031:
            if (is_back != null)
            {
                goto Label_0120;
            }
            this.HideGrid();
            controller = this.FindUnitController(this.Battle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_0120;
            }
            vector = this.CalcCoord(controller.CenterPosition);
            map = new GridMap<Color32>(this.Battle.CurrentMap.Width, this.Battle.CurrentMap.Height);
            map.set(&vector.x, &vector.y, &GameSettings.Instance.Colors.AttackArea);
            map2 = new GridMap<Color32>(this.Battle.CurrentMap.Width, this.Battle.CurrentMap.Height);
            map2.set(&vector.x, &vector.y, &GameSettings.Instance.Colors.AttackArea2);
            this.mTacticsSceneRoot.ShowGridLayer(1, map, 1);
            this.mTacticsSceneRoot.ShowGridLayer(2, map2, 0);
        Label_0120:
            this.GotoState_WaitSignal<State_SelectUnitChgV2>();
            return;
        }

        private void HideAllHPGauges()
        {
            int num;
            num = 0;
            goto Label_001D;
        Label_0007:
            this.mTacticsUnits[num].ShowHPGauge(0);
            num += 1;
        Label_001D:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0007;
            }
            return;
        }

        private void HideAllUnitOwnerIndex()
        {
            int num;
            num = 0;
            goto Label_001D;
        Label_0007:
            this.mTacticsUnits[num].ShowOwnerIndexUI(0);
            num += 1;
        Label_001D:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0007;
            }
            return;
        }

        private void HideCastSkill(bool is_only_target_unit)
        {
            this.mIsShowCastSkill = 0;
            if (GameUtility.Config_ChargeDisp.Value != null)
            {
                goto Label_0017;
            }
            return;
        Label_0017:
            this.InternalHideCastSkill(is_only_target_unit);
            return;
        }

        private void HideGrid()
        {
            if ((this.mTacticsSceneRoot != null) == null)
            {
                goto Label_0023;
            }
            this.mTacticsSceneRoot.HideGridLayers();
            this.HideCastSkill(1);
        Label_0023:
            return;
        }

        private void HideUnitCursor(Unit unit)
        {
            TacticsUnitController controller;
            if (unit != null)
            {
                goto Label_0007;
            }
            return;
        Label_0007:
            controller = this.FindUnitController(unit);
            if ((controller == null) == null)
            {
                goto Label_001C;
            }
            return;
        Label_001C:
            controller.HideCursor(0);
            return;
        }

        private void HideUnitCursors(bool immediate)
        {
            int num;
            num = this.mTacticsUnits.Count - 1;
            goto Label_0029;
        Label_0013:
            this.mTacticsUnits[num].HideCursor(immediate);
            num -= 1;
        Label_0029:
            if (num >= 0)
            {
                goto Label_0013;
            }
            return;
        }

        private void HideUnitMarkers(UnitMarkerTypes markerType)
        {
            int num;
            int num2;
            num = markerType;
            num2 = this.mUnitMarkers[num].Count - 1;
            goto Label_004E;
        Label_0017:
            this.mUnitMarkers[num][num2].get_transform().SetParent(null, 0);
            GameUtility.SetLayer(this.mUnitMarkers[num][num2], GameUtility.LayerHidden, 1);
            num2 -= 1;
        Label_004E:
            if (num2 >= 0)
            {
                goto Label_0017;
            }
            return;
        }

        private void HideUnitMarkers(Unit unit)
        {
            TacticsUnitController controller;
            Transform transform;
            int num;
            int num2;
            controller = this.FindUnitController(unit);
            if ((controller == null) == null)
            {
                goto Label_0015;
            }
            return;
        Label_0015:
            transform = controller.get_transform();
            num = ((int) this.mUnitMarkers.Length) - 1;
            goto Label_00A6;
        Label_002C:
            num2 = this.mUnitMarkers[num].Count - 1;
            goto Label_009B;
        Label_0041:
            if ((this.mUnitMarkers[num][num2].get_transform().get_parent() == transform) == null)
            {
                goto Label_0097;
            }
            GameUtility.SetLayer(this.mUnitMarkers[num][num2], GameUtility.LayerHidden, 1);
            this.mUnitMarkers[num][num2].get_transform().SetParent(null, 0);
        Label_0097:
            num2 -= 1;
        Label_009B:
            if (num2 >= 0)
            {
                goto Label_0041;
            }
            num -= 1;
        Label_00A6:
            if (num >= 0)
            {
                goto Label_002C;
            }
            return;
        }

        private void HideUnitMarkers(bool deactivate)
        {
            int num;
            num = ((int) this.mUnitMarkers.Length) - 1;
            goto Label_001B;
        Label_0010:
            this.HideUnitMarkers(num);
            num -= 1;
        Label_001B:
            if (num >= 0)
            {
                goto Label_0010;
            }
            if (deactivate == null)
            {
                goto Label_002E;
            }
            this.DeactivateUnusedUnitMarkers();
        Label_002E:
            return;
        }

        private unsafe void HighlightTargetGrid(Unit current, int range, int difffloor)
        {
            BattleMap map;
            Grid grid;
            GridMap<bool> map2;
            int num;
            int num2;
            int num3;
            Grid grid2;
            int num4;
            if (range > 0)
            {
                goto Label_0008;
            }
            return;
        Label_0008:
            map = this.mBattle.CurrentMap;
            grid = map[current.x, current.y];
            map2 = new GridMap<bool>(map.Width, map.Height);
            num = 0;
            goto Label_00FD;
        Label_0040:
            num2 = 0;
            goto Label_00EC;
        Label_0048:
            if (num2 == current.x)
            {
                goto Label_0066;
            }
            if (num == current.y)
            {
                goto Label_0066;
            }
            goto Label_00E6;
        Label_0066:
            num3 = Mathf.Max(Mathf.Abs(num2 - current.x), Mathf.Abs(num - current.y));
            if (num3 <= 0)
            {
                goto Label_00E6;
            }
            if (num3 <= range)
            {
                goto Label_009D;
            }
            goto Label_00E6;
        Label_009D:
            if (difffloor == null)
            {
                goto Label_00DC;
            }
            grid2 = map[num2, num];
            if (grid2 != null)
            {
                goto Label_00BA;
            }
            goto Label_00E6;
        Label_00BA:
            if (Mathf.Abs(grid.height - grid2.height) <= difffloor)
            {
                goto Label_00DC;
            }
            goto Label_00E6;
        Label_00DC:
            map2.set(num2, num, 1);
        Label_00E6:
            num2 += 1;
        Label_00EC:
            if (num2 < map2.w)
            {
                goto Label_0048;
            }
            num += 1;
        Label_00FD:
            if (num < map2.h)
            {
                goto Label_0040;
            }
            this.mTacticsSceneRoot.ShowGridLayer(0, map2, &GameSettings.Instance.Colors.AttackArea, 0);
            return;
        }

        private void InitCamera()
        {
            GameSettings settings;
            settings = GameSettings.Instance;
            CameraHook.AddPreCullEventListener(new CameraHook.PreCullEvent(this.OnCameraPreCull));
            RenderPipeline.Setup(Camera.get_main());
            this.m_TargetCamera = GameUtility.RequireComponent<TargetCamera>(Camera.get_main().get_gameObject());
            this.m_TargetCamera.Pitch = settings.GameCamera_AngleX;
            this.m_DefaultCameraYawMin = settings.GameCamera_YawMin;
            this.m_DefaultCameraYawMax = settings.GameCamera_YawMax;
            this.m_CameraYawMin = this.m_DefaultCameraYawMin;
            this.m_CameraYawMax = this.m_DefaultCameraYawMax;
            this.m_CameraAngle = this.m_DefaultCameraYawMin;
            this.m_TargetCameraDistance = settings.GameCamera_DefaultDistance;
            this.m_TargetCameraDistanceInterp = 1;
            this.m_NewCamera = 0;
            this.SetFullRotationCamera(1);
            return;
        }

        private void InitTouchArea()
        {
            Type[] typeArray1;
            GameObject obj2;
            Canvas canvas;
            typeArray1 = new Type[] { typeof(Canvas), typeof(GraphicRaycaster), typeof(CanvasStack), typeof(NullGraphic), typeof(TouchController), typeof(SRPG_CanvasScaler) };
            obj2 = new GameObject("TouchArea", typeArray1);
            this.mTouchController = obj2.GetComponent<TouchController>();
            this.mTouchController.OnClick = new TouchController.ClickEvent(this.OnClickBackground);
            this.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Combine(this.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
            this.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Combine(this.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
            obj2.GetComponent<Canvas>().set_renderMode(0);
            obj2.GetComponent<CanvasStack>().Priority = 0;
            this.mGoWeatherAttach = new GameObject("WeatherAttach");
            if (this.mGoWeatherAttach == null)
            {
                goto Label_0121;
            }
            this.mGoWeatherAttach.get_transform().SetParent(obj2.get_transform(), 0);
        Label_0121:
            return;
        }

        private T InstantiateSafe<T>(Object obj) where T: Object
        {
            return (T) Object.Instantiate(obj);
        }

        private void InternalHideCastSkill(bool is_only_target_unit)
        {
            int num;
            if (is_only_target_unit != null)
            {
                goto Label_001E;
            }
            this.mTacticsSceneRoot.HideGridLayer(3);
            this.mTacticsSceneRoot.HideGridLayer(4);
        Label_001E:
            num = 0;
            goto Label_003A;
        Label_0025:
            this.mTacticsUnits[num].DisableChargeTargetUnit();
            num += 1;
        Label_003A:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0025;
            }
            return;
        }

        private void InternalPopup2D(GameObject go, Vector3 position, int priority, float yOffset)
        {
            PupupData data;
            RectTransform transform;
            if ((go == null) == null)
            {
                goto Label_000D;
            }
            return;
        Label_000D:
            data = new PupupData(position, priority, yOffset);
            this.mPopups.Add(new KeyValuePair<PupupData, GameObject>(data, go));
            go.get_transform().SetParent(this.OverlayCanvas.get_transform(), 0);
            this.mPopupPositionCache.Clear();
            transform = go.get_transform() as RectTransform;
            if ((transform != null) == null)
            {
                goto Label_007C;
            }
            transform.set_anchoredPosition(new Vector2((float) -Screen.get_width(), (float) -Screen.get_height()));
        Label_007C:
            return;
        }

        private unsafe void InternalShowCastSkill()
        {
            List<Unit> list;
            BattleCore.OrderData data;
            List<BattleCore.OrderData>.Enumerator enumerator;
            List<ChargeTarget> list2;
            Color32 color;
            Color32 color2;
            GridMap<Color32> map;
            GridMap<Color32> map2;
            List<Unit>.Enumerator enumerator2;
            bool flag;
            int num;
            int num2;
            TacticsUnitController controller;
            IntVector2 vector;
            GridMap<bool> map3;
            int num3;
            int num4;
            ChargeTarget target;
            ChargeTarget target2;
            List<ChargeTarget>.Enumerator enumerator3;
            TacticsUnitController controller2;
            <InternalShowCastSkill>c__AnonStorey1CC storeycc;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            list = new List<Unit>();
            enumerator = this.mBattle.Order.GetEnumerator();
        Label_0027:
            try
            {
                goto Label_007B;
            Label_002C:
                data = &enumerator.Current;
                if (data.Unit.Side == null)
                {
                    goto Label_0049;
                }
                goto Label_007B;
            Label_0049:
                if (data.IsCastSkill == null)
                {
                    goto Label_007B;
                }
                if (data.Unit == null)
                {
                    goto Label_007B;
                }
                if (data.Unit.CastSkill == null)
                {
                    goto Label_007B;
                }
                list.Add(data.Unit);
            Label_007B:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_002C;
                }
                goto Label_0098;
            }
            finally
            {
            Label_008C:
                ((List<BattleCore.OrderData>.Enumerator) enumerator).Dispose();
            }
        Label_0098:
            if (this.mBattle.CurrentUnit == null)
            {
                goto Label_00F9;
            }
            if (this.mBattle.CurrentUnit.CastSkill == null)
            {
                goto Label_00F9;
            }
            if (list.Contains(this.mBattle.CurrentUnit) != null)
            {
                goto Label_00F9;
            }
            if (this.mBattle.CurrentUnit.Side != null)
            {
                goto Label_00F9;
            }
            list.Add(this.mBattle.CurrentUnit);
        Label_00F9:
            if (list.Count <= 0)
            {
                goto Label_051E;
            }
            list2 = new List<ChargeTarget>();
            color = &GameSettings.Instance.Colors.ChargeAreaGrn;
            color2 = &GameSettings.Instance.Colors.ChargeAreaRed;
            map = new GridMap<Color32>(this.mBattle.CurrentMap.Width, this.mBattle.CurrentMap.Height);
            map2 = new GridMap<Color32>(this.mBattle.CurrentMap.Width, this.mBattle.CurrentMap.Height);
            storeycc = new <InternalShowCastSkill>c__AnonStorey1CC();
            enumerator2 = list.GetEnumerator();
        Label_0194:
            try
            {
                goto Label_0452;
            Label_0199:
                storeycc.unit = &enumerator2.Current;
                flag = 0;
                if (storeycc.unit.CastSkill.IsAdvantage() == null)
                {
                    goto Label_01C3;
                }
                flag = 1;
            Label_01C3:
                num = 0;
                num2 = 0;
                if (storeycc.unit.UnitTarget == null)
                {
                    goto Label_0256;
                }
                num = storeycc.unit.UnitTarget.x;
                num2 = storeycc.unit.UnitTarget.y;
                if (storeycc.unit.UnitTarget != this.mBattle.CurrentUnit)
                {
                    goto Label_028D;
                }
                controller = this.FindUnitController(storeycc.unit.UnitTarget);
                vector = this.CalcCoord(controller.CenterPosition);
                num = &vector.x;
                num2 = &vector.y;
                goto Label_028D;
            Label_0256:
                if (storeycc.unit.GridTarget == null)
                {
                    goto Label_028D;
                }
                num = storeycc.unit.GridTarget.x;
                num2 = storeycc.unit.GridTarget.y;
            Label_028D:
                map3 = this.mBattle.CreateScopeGridMap(storeycc.unit, storeycc.unit.x, storeycc.unit.y, num, num2, storeycc.unit.CastSkill);
                if ((SkillParam.IsTypeLaser(storeycc.unit.CastSkill.SkillParam.select_scope) == null) || (storeycc.unit.UnitTarget == null))
                {
                    goto Label_0306;
                }
                map3.set(num, num2, 1);
            Label_0306:
                if ((storeycc.unit.CastSkill.TeleportType != 1) && (storeycc.unit.CastSkill.TeleportType != 3))
                {
                    goto Label_0340;
                }
                map3.set(num, num2, 0);
            Label_0340:
                num3 = 0;
                goto Label_0444;
            Label_0348:
                if (num3 < map.w)
                {
                    goto Label_035B;
                }
                goto Label_043E;
            Label_035B:
                num4 = 0;
                goto Label_0430;
            Label_0363:
                if (num4 < map.h)
                {
                    goto Label_0376;
                }
                goto Label_042A;
            Label_0376:
                if (map3.get(num3, num4) == null)
                {
                    goto Label_042A;
                }
                if (((storeycc.unit.UnitTarget == null) || (num3 != num)) || (num4 != num2))
                {
                    goto Label_0404;
                }
                target = list2.Find(new Predicate<ChargeTarget>(storeycc.<>m__75));
                if (target == null)
                {
                    goto Label_03DF;
                }
                target.AddAttr((flag == null) ? 2 : 1);
                goto Label_0404;
            Label_03DF:
                list2.Add(new ChargeTarget(storeycc.unit.UnitTarget, (flag == null) ? 2 : 1));
            Label_0404:
                if (flag == null)
                {
                    goto Label_041D;
                }
                map.set(num3, num4, color);
                goto Label_042A;
            Label_041D:
                map2.set(num3, num4, color2);
            Label_042A:
                num4 += 1;
            Label_0430:
                if (num4 < map3.h)
                {
                    goto Label_0363;
                }
            Label_043E:
                num3 += 1;
            Label_0444:
                if (num3 < map3.w)
                {
                    goto Label_0348;
                }
            Label_0452:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_0199;
                }
                goto Label_0470;
            }
            finally
            {
            Label_0463:
                ((List<Unit>.Enumerator) enumerator2).Dispose();
            }
        Label_0470:
            this.mTacticsSceneRoot.ShowGridLayer(3, map, "BG/GridMaterialGrn");
            this.mTacticsSceneRoot.ShowGridLayer(4, map2, "BG/GridMaterialRed");
            enumerator3 = list2.GetEnumerator();
        Label_049E:
            try
            {
                goto Label_0500;
            Label_04A3:
                target2 = &enumerator3.Current;
                controller2 = this.FindUnitController(target2.mUnit);
                if ((controller2 != null) == null)
                {
                    goto Label_0500;
                }
                if ((target2.mAttr & 1) == null)
                {
                    goto Label_04E4;
                }
                controller2.EnableChargeTargetUnit(this.mChargeGrnTargetUnitEffect, 1);
            Label_04E4:
                if ((target2.mAttr & 2) == null)
                {
                    goto Label_0500;
                }
                controller2.EnableChargeTargetUnit(this.mChargeRedTargetUnitEffect, 0);
            Label_0500:
                if (&enumerator3.MoveNext() != null)
                {
                    goto Label_04A3;
                }
                goto Label_051E;
            }
            finally
            {
            Label_0511:
                ((List<ChargeTarget>.Enumerator) enumerator3).Dispose();
            }
        Label_051E:
            return;
        }

        public void InterpCameraDistance(float distance)
        {
            this.m_TargetCameraDistance = distance;
            this.m_TargetCameraDistanceInterp = 1;
            return;
        }

        private void InterpCameraOffset(Transform transform)
        {
        }

        private void InterpCameraTarget(Component position)
        {
            this.InterpCameraTarget(position.get_transform().get_position());
            return;
        }

        public void InterpCameraTarget(Vector3 position)
        {
            this.m_TargetCameraPosition = position;
            this.m_TargetCameraPositionInterp = 1;
            this.mUpdateCameraPosition = 1;
            return;
        }

        private void InterpCameraTargetToCurrent()
        {
            Unit unit;
            TacticsUnitController controller;
            unit = this.mBattle.CurrentUnit;
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_0027;
            }
            this.InterpCameraTarget(controller);
        Label_0027:
            return;
        }

        public bool IsArenaRankupInfo()
        {
            if (GlobalVars.ResultArenaBattleResponse == null)
            {
                goto Label_001A;
            }
            return GlobalVars.ResultArenaBattleResponse.reward_info.IsReward();
        Label_001A:
            return 0;
        }

        public bool IsClosedSkillNamePlate()
        {
            return this.mSkillNamePlate.IsClosed();
        }

        public bool IsControlBattleUI(eMaskBattleUI emask)
        {
            return ((this.mControlDisableMask & emask) == 0);
        }

        public bool IsInState<StateType>() where StateType: State<SceneBattle>
        {
            return this.mState.IsInState<StateType>();
        }

        public bool IsPause()
        {
            return ((this.mPauseReqCount == 0) == 0);
        }

        private unsafe void LayoutGauges(Camera cam)
        {
            Canvas canvas;
            List<TacticsUnitController> list;
            RectTransform transform;
            List<Vector3> list2;
            int num;
            TacticsUnitController controller;
            RectTransform transform2;
            Vector3 vector;
            Vector3 vector2;
            Vector4[] vectorArray;
            int num2;
            int num3;
            RectTransform transform3;
            Vector2 vector3;
            Rect rect;
            Rect rect2;
            Vector3 vector4;
            Vector3 vector5;
            Vector2 vector6;
            canvas = this.OverlayCanvas;
            if ((canvas == null) == null)
            {
                goto Label_0014;
            }
            return;
        Label_0014:
            list = TacticsUnitController.Instances;
            transform = canvas.get_transform() as RectTransform;
            this.mLayoutGauges.Clear();
            list2 = new List<Vector3>();
            num = 0;
            goto Label_0117;
        Label_003F:
            controller = list[num];
            transform2 = controller.HPGaugeTransform;
            if ((transform2 == null) != null)
            {
                goto Label_0111;
            }
            if (transform2.get_gameObject().get_activeInHierarchy() != null)
            {
                goto Label_0075;
            }
            goto Label_0111;
        Label_0075:
            vector = controller.get_transform().get_position() + Vector3.get_up();
            if ((transform2.get_parent() != transform) == null)
            {
                goto Label_00A8;
            }
            transform2.SetParent(transform, 0);
        Label_00A8:
            vector2 = cam.WorldToScreenPoint(vector);
            &vector2.x = (&vector2.x / ((float) Screen.get_width())) * &transform.get_rect().get_width();
            &vector2.y = (&vector2.y / ((float) Screen.get_height())) * &transform.get_rect().get_height();
            list2.Add(vector2);
            this.mLayoutGauges.Add(transform2);
        Label_0111:
            num += 1;
        Label_0117:
            if (num < list.Count)
            {
                goto Label_003F;
            }
            vectorArray = new Vector4[this.mLayoutGauges.Count];
            num2 = 0;
            goto Label_01A9;
        Label_013E:
            vector4 = list2[num2];
            &(vectorArray[num2]).x = &vector4.x;
            vector5 = list2[num2];
            &(vectorArray[num2]).y = &vector5.y;
            &(vectorArray[num2]).z = this.mGaugeCollisionRadius;
            &(vectorArray[num2]).w = 0f;
            num2 += 1;
        Label_01A9:
            if (num2 < this.mLayoutGauges.Count)
            {
                goto Label_013E;
            }
            GameUtility.ApplyAvoidance(&vectorArray, 3, this.mGaugeYAspectRatio);
            num3 = 0;
            goto Label_0265;
        Label_01D1:
            transform3 = this.mLayoutGauges[num3];
            &vector3..ctor(&(vectorArray[num3]).x, &(vectorArray[num3]).y);
            if (this.mGaugePositionCache.ContainsKey(transform3) == null)
            {
                goto Label_022E;
            }
            if ((this.mGaugePositionCache[transform3] != vector3) == null)
            {
                goto Label_025F;
            }
        Label_022E:
            this.mGaugePositionCache[transform3] = vector3;
            vector6 = Vector2.get_zero();
            transform3.set_anchorMax(vector6);
            transform3.set_anchorMin(vector6);
            transform3.set_anchoredPosition(vector3);
        Label_025F:
            num3 += 1;
        Label_0265:
            if (num3 < this.mLayoutGauges.Count)
            {
                goto Label_01D1;
            }
            return;
        }

        private unsafe void LayoutPopups(Camera cam)
        {
            Canvas canvas;
            RectTransform transform;
            int[] numArray;
            int num;
            GameObject obj2;
            int[] numArray2;
            GameObject[] objArray;
            int num2;
            int num3;
            int num4;
            int num5;
            GameObject obj3;
            int num6;
            int num7;
            GameObject obj4;
            Vector3 vector;
            RectTransform transform2;
            TacticsUnitController controller;
            Vector3 vector2;
            Vector3 vector3;
            Vector2 vector4;
            RectTransform transform3;
            KeyValuePair<PupupData, GameObject> pair;
            KeyValuePair<PupupData, GameObject> pair2;
            KeyValuePair<PupupData, GameObject> pair3;
            KeyValuePair<PupupData, GameObject> pair4;
            KeyValuePair<PupupData, GameObject> pair5;
            KeyValuePair<PupupData, GameObject> pair6;
            Rect rect;
            Rect rect2;
            KeyValuePair<PupupData, GameObject> pair7;
            Rect rect3;
            Vector2 vector5;
            canvas = this.OverlayCanvas;
            if ((canvas == null) == null)
            {
                goto Label_0014;
            }
            return;
        Label_0014:
            transform = canvas.get_transform() as RectTransform;
            numArray = new int[this.mPopups.Count];
            num = 0;
            goto Label_006F;
        Label_0038:
            pair = this.mPopups[num];
            obj2 = &pair.Value;
            if ((obj2 != null) == null)
            {
                goto Label_006B;
            }
            numArray[num] = obj2.get_transform().GetSiblingIndex();
        Label_006B:
            num += 1;
        Label_006F:
            if (num < this.mPopups.Count)
            {
                goto Label_0038;
            }
            Array.Sort<int>(numArray);
            numArray2 = new int[this.mPopups.Count];
            objArray = new GameObject[this.mPopups.Count];
            num2 = 0;
            goto Label_0114;
        Label_00B2:
            pair2 = this.mPopups[num2];
            if ((&pair2.Value != null) == null)
            {
                goto Label_010E;
            }
            pair3 = this.mPopups[num2];
            numArray2[num2] = &pair3.Key.priority;
            pair4 = this.mPopups[num2];
            objArray[num2] = &pair4.Value;
        Label_010E:
            num2 += 1;
        Label_0114:
            if (num2 < this.mPopups.Count)
            {
                goto Label_00B2;
            }
            num3 = 0;
            goto Label_018F;
        Label_012E:
            num4 = num3 + 1;
            goto Label_017E;
        Label_0139:
            if (numArray2[num3] <= numArray2[num4])
            {
                goto Label_0178;
            }
            num5 = numArray2[num3];
            numArray2[num3] = numArray2[num4];
            numArray2[num4] = num5;
            obj3 = objArray[num3];
            objArray[num3] = objArray[num4];
            objArray[num4] = obj3;
        Label_0178:
            num4 += 1;
        Label_017E:
            if (num4 < ((int) numArray2.Length))
            {
                goto Label_0139;
            }
            num3 += 1;
        Label_018F:
            if (num3 < (((int) numArray2.Length) - 1))
            {
                goto Label_012E;
            }
            num6 = 0;
            goto Label_01CD;
        Label_01A4:
            if ((objArray[num6] != null) == null)
            {
                goto Label_01C7;
            }
            objArray[num6].get_transform().SetSiblingIndex(numArray[num6]);
        Label_01C7:
            num6 += 1;
        Label_01CD:
            if (num6 < ((int) objArray.Length))
            {
                goto Label_01A4;
            }
            num7 = 0;
            goto Label_0350;
        Label_01E0:
            pair5 = this.mPopups[num7];
            obj4 = &pair5.Value;
            if ((obj4 == null) == null)
            {
                goto Label_021C;
            }
            this.mPopups.RemoveAt(num7--);
            goto Label_0362;
        Label_021C:
            pair6 = this.mPopups[num7];
            vector = cam.WorldToScreenPoint(&pair6.Key.position);
            &vector.x = (&vector.x / ((float) Screen.get_width())) * &transform.get_rect().get_width();
            &vector.y = (&vector.y / ((float) Screen.get_height())) * &transform.get_rect().get_height();
            pair7 = this.mPopups[num7];
            &vector.y += &pair7.Key.yOffset;
            if (this.isScreenMirroring == null)
            {
                goto Label_02DB;
            }
            &vector.x = &transform.get_rect().get_width() - &vector.x;
        Label_02DB:
            transform2 = obj4.get_transform() as RectTransform;
            if (this.mPopupPositionCache.ContainsKey(transform2) == null)
            {
                goto Label_0314;
            }
            if ((this.mPopupPositionCache[transform2] != vector) == null)
            {
                goto Label_034A;
            }
        Label_0314:
            vector5 = Vector2.get_zero();
            transform2.set_anchorMax(vector5);
            transform2.set_anchorMin(vector5);
            transform2.set_anchoredPosition(vector);
            this.mPopupPositionCache[transform2] = vector;
        Label_034A:
            num7 += 1;
        Label_0350:
            if (num7 < this.mPopups.Count)
            {
                goto Label_01E0;
            }
        Label_0362:
            if ((this.mBlockedGridMarker != null) == null)
            {
                goto Label_047D;
            }
            if (this.mDisplayBlockedGridMarker == null)
            {
                goto Label_0456;
            }
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_0462;
            }
            vector2 = controller.CenterPosition;
            if (this.mGridDisplayBlockedGridMarker == null)
            {
                goto Label_03DC;
            }
            vector2 = this.CalcGridCenter(this.mGridDisplayBlockedGridMarker) + (Vector3.get_up() * (controller.Height * 0.5f));
        Label_03DC:
            vector3 = cam.WorldToScreenPoint(vector2);
            RectTransformUtility.ScreenPointToLocalPointInRectangle(this.mTouchController.GetRectTransform(), vector3, null, &vector4);
            transform3 = this.mBlockedGridMarker.GetComponent<RectTransform>();
            if (this.mPopupPositionCache.ContainsKey(transform3) == null)
            {
                goto Label_0439;
            }
            if ((this.mPopupPositionCache[transform3] != vector3) == null)
            {
                goto Label_0462;
            }
        Label_0439:
            this.mPopupPositionCache[transform3] = vector3;
            transform3.set_anchoredPosition(vector4);
            goto Label_0462;
        Label_0456:
            GameUtility.ToggleGraphic(this.mBlockedGridMarker, 1);
        Label_0462:
            this.mBlockedGridMarker.GetComponent<Animator>().SetBool("visible", this.mDisplayBlockedGridMarker);
        Label_047D:
            return;
        }

        [DebuggerHidden]
        private IEnumerator LoadMapAsync()
        {
            <LoadMapAsync>c__Iterator30 iterator;
            iterator = new <LoadMapAsync>c__Iterator30();
            iterator.<>f__this = this;
            return iterator;
        }

        private void LoadShieldEffects()
        {
            List<Unit> list;
            List<SkillParam> list2;
            int num;
            Unit unit;
            int num2;
            SkillParam param;
            list = this.mBattle.AllUnits;
            list2 = null;
            num = 0;
            goto Label_00A3;
        Label_0015:
            unit = list[num];
            num2 = 0;
            goto Label_008D;
        Label_0025:
            param = unit.Shields[num2].skill_param;
            if (string.IsNullOrEmpty(param.defend_effect) != null)
            {
                goto Label_0087;
            }
            if (this.mShieldEffects.ContainsKey(param) != null)
            {
                goto Label_0087;
            }
            if (list2 != null)
            {
                goto Label_006D;
            }
            list2 = new List<SkillParam>();
            goto Label_007F;
        Label_006D:
            if (list2.Contains(param) == null)
            {
                goto Label_007F;
            }
            goto Label_0087;
        Label_007F:
            list2.Add(param);
        Label_0087:
            num2 += 1;
        Label_008D:
            if (num2 < unit.Shields.Count)
            {
                goto Label_0025;
            }
            num += 1;
        Label_00A3:
            if (num < list.Count)
            {
                goto Label_0015;
            }
            if (list2 == null)
            {
                goto Label_00CA;
            }
            this.mLoadingShieldEffects = 1;
            base.StartCoroutine(this.LoadShieldEffectsAsync(list2));
        Label_00CA:
            return;
        }

        [DebuggerHidden]
        private IEnumerator LoadShieldEffectsAsync(List<SkillParam> skills)
        {
            <LoadShieldEffectsAsync>c__Iterator37 iterator;
            iterator = new <LoadShieldEffectsAsync>c__Iterator37();
            iterator.skills = skills;
            iterator.<$>skills = skills;
            iterator.<>f__this = this;
            return iterator;
        }

        [DebuggerHidden]
        private IEnumerator LoadUIAsync()
        {
            <LoadUIAsync>c__Iterator36 iterator;
            iterator = new <LoadUIAsync>c__Iterator36();
            iterator.<>f__this = this;
            return iterator;
        }

        private void MultiPlayLog(string str)
        {
        }

        private void OFFLINE_APPLY_QUEST_RESULT()
        {
            QuestParam param;
            BattleCore.Record record;
            PlayerData data;
            int num;
            int num2;
            if (this.mCurrentQuest.IsScenario == null)
            {
                goto Label_0031;
            }
            MonoSingleton<GameManager>.Instance.Player.MarkQuestCleared(this.mCurrentQuest.iname);
            goto Label_0151;
        Label_0031:
            record = this.Battle.GetQuestRecord();
            data = MonoSingleton<GameManager>.Instance.Player;
            if (record.result != 1)
            {
                goto Label_0151;
            }
            data.GainGold(record.gold);
            num = 0;
            goto Label_009C;
        Label_006C:
            this.Battle.Player[num].UnitData.GainExp(record.unitexp, data.Lv);
            num += 1;
        Label_009C:
            if (num < this.Battle.Player.Count)
            {
                goto Label_006C;
            }
            if (record.items == null)
            {
                goto Label_0117;
            }
            num2 = 0;
            goto Label_0105;
        Label_00C5:
            if (record.items[num2].itemParam != null)
            {
                goto Label_00E1;
            }
            goto Label_00FF;
        Label_00E1:
            data.GainItem(record.items[num2].itemParam.iname, 1);
        Label_00FF:
            num2 += 1;
        Label_0105:
            if (num2 < record.items.Count)
            {
                goto Label_00C5;
            }
        Label_0117:
            MonoSingleton<GameManager>.Instance.Player.MarkQuestCleared(this.mCurrentQuest.iname);
            MonoSingleton<GameManager>.Instance.Player.SetQuestMissionFlags(this.mCurrentQuest.iname, record.bonusFlags);
        Label_0151:
            return;
        }

        private void OnCameraForcus()
        {
            TacticsUnitController controller;
            if (this.mOnUnitFocus == null)
            {
                goto Label_0066;
            }
            if (this.m_TargetCameraPositionInterp != null)
            {
                goto Label_006D;
            }
            controller = this.FindClosestUnitController(this.m_CameraPosition, 1f);
            if ((this.mFocusedUnit != controller) == null)
            {
                goto Label_006D;
            }
            DebugUtility.Log("Focus:" + controller);
            this.mFocusedUnit = controller;
            this.mOnUnitFocus(this.mFocusedUnit);
            goto Label_006D;
        Label_0066:
            this.mFocusedUnit = null;
        Label_006D:
            return;
        }

        public void OnCameraModeChange(CameraMode nextMode)
        {
            GameSettings settings;
            if (this.m_CameraMode != nextMode)
            {
                goto Label_000D;
            }
            return;
        Label_000D:
            settings = GameSettings.Instance;
            this.m_CameraMode = nextMode;
            if (this.m_TargetCameraPositionInterp == null)
            {
                goto Label_0038;
            }
            this.m_CameraPosition = this.m_TargetCameraPosition;
            this.m_TargetCameraPositionInterp = 0;
        Label_0038:
            if (this.m_TargetCameraAngleInterp == null)
            {
                goto Label_0056;
            }
            this.m_CameraAngle = this.m_TargetCameraAngle;
            this.m_TargetCameraAngleInterp = 0;
        Label_0056:
            if (nextMode != null)
            {
                goto Label_00B7;
            }
            this.m_CameraAngle = this.m_CameraYaw;
            this.m_TargetCameraDistanceInterp = 0;
            this.m_TargetCamera.CameraDistance = this.m_TargetCameraDistance;
            this.m_TargetCamera.SetPositionYawPitch(this.m_CameraPosition + (Vector3.get_up() * settings.GameCamera_UnitHeightOffset), this.m_CameraAngle, settings.GameCamera_AngleX);
            goto Label_0118;
        Label_00B7:
            if (nextMode != 1)
            {
                goto Label_0118;
            }
            this.m_CameraYaw = this.m_CameraAngle;
            this.m_TargetCameraDistanceInterp = 0;
            this.m_TargetCamera.CameraDistance = 5f + this.m_TargetCameraDistance;
            this.m_TargetCamera.SetPositionYawPitch(this.m_CameraPosition + (Vector3.get_up() * settings.GameCamera_UnitHeightOffset), 90f, 270f);
        Label_0118:
            return;
        }

        private void OnCameraPreCull(Camera cam)
        {
            if ((cam.get_tag() == "MainCamera") == null)
            {
                goto Label_0038;
            }
            if (cam.get_gameObject().get_layer() != GameUtility.LayerDefault)
            {
                goto Label_0038;
            }
            this.LayoutPopups(cam);
            this.LayoutGauges(cam);
        Label_0038:
            return;
        }

        private unsafe void OnClickBackground(Vector2 screenPosition)
        {
            IntVector2 vector;
            Grid grid;
            float num;
            TacticsUnitController controller;
            Vector3 vector2;
            Camera camera;
            float num2;
            int num3;
            Vector2 vector3;
            float num4;
            Vector2 vector4;
            if (this.mOnGridClick == null)
            {
                goto Label_005E;
            }
            vector = this.CalcClickedGrid(screenPosition);
            grid = this.mBattle.CurrentMap[&vector.x, &vector.y];
            if (&vector.x == -1)
            {
                goto Label_005E;
            }
            if (&vector.y == -1)
            {
                goto Label_005E;
            }
            if (grid == null)
            {
                goto Label_005E;
            }
            this.mOnGridClick(grid);
        Label_005E:
            if (this.mOnUnitClick == null)
            {
                goto Label_012C;
            }
            num = 3.402823E+38f;
            controller = null;
            vector2 = Vector3.get_up() * 0.5f;
            camera = Camera.get_main();
            num2 = (float) (Screen.get_height() / 5);
            num3 = 0;
            goto Label_0102;
        Label_009B:
            vector4 = camera.WorldToScreenPoint(this.mTacticsUnits[num3].get_transform().get_position() + vector2) - screenPosition;
            num4 = &vector4.get_magnitude();
            if (num4 >= num)
            {
                goto Label_00FC;
            }
            if (num4 > num2)
            {
                goto Label_00FC;
            }
            controller = this.mTacticsUnits[num3];
            num = num4;
        Label_00FC:
            num3 += 1;
        Label_0102:
            if (num3 < this.mTacticsUnits.Count)
            {
                goto Label_009B;
            }
            if ((controller != null) == null)
            {
                goto Label_012C;
            }
            this.mOnUnitClick(controller);
        Label_012C:
            if (this.mOnScreenClick == null)
            {
                goto Label_0143;
            }
            this.mOnScreenClick(screenPosition);
        Label_0143:
            return;
        }

        public void OnColoRankModify()
        {
            string str;
            str = Network.ErrMsg;
            Network.RemoveAPI();
            Network.ResetError();
            UIUtility.SystemMessage(null, str, new UIUtility.DialogResultEvent(this.<OnColoRankModify>m__76), null, 1, -1);
            return;
        }

        private void OnDestroy()
        {
            if (this.GoResultBg == null)
            {
                goto Label_0020;
            }
            Object.Destroy(this.GoResultBg.get_gameObject());
        Label_0020:
            this.GoResultBg = null;
            LocalizedText.UnloadTable(QUEST_TEXTTABLE);
            if ((this.mNavigation != null) == null)
            {
                goto Label_0060;
            }
            Object.Destroy(this.mNavigation.get_gameObject());
            this.mNavigation = null;
            this.mTutorialTriggers = null;
        Label_0060:
            this.CleanupGoodJob();
            this.DestroyCamera();
            this.DestroyUI(0);
            if (this.mBattle == null)
            {
                goto Label_0090;
            }
            this.mBattle.Release();
            this.mBattle = null;
        Label_0090:
            return;
        }

        private void OnDisable()
        {
            if ((Instance == this) == null)
            {
                goto Label_0016;
            }
            Instance = null;
        Label_0016:
            return;
        }

        public void OnDoubleTap(Vector2 pos)
        {
        }

        private void OnDrag()
        {
            TacticsUnitController controller;
            VirtualStick2 stick;
            if (this.mBattle.IsMapCommand == null)
            {
                goto Label_002B;
            }
            if (this.mBattle.IsUnitAuto(this.mBattle.CurrentUnit) == null)
            {
                goto Label_002C;
            }
        Label_002B:
            return;
        Label_002C:
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_0056;
            }
            if (controller.IsStartSkill() == null)
            {
                goto Label_0056;
            }
            return;
        Label_0056:
            stick = this.mBattleUI.VirtualStick;
            if ((stick != null) == null)
            {
                goto Label_00A7;
            }
            if (this.IsControlBattleUI(0x100) == null)
            {
                goto Label_00A7;
            }
            stick.Visible = 1;
            stick.SetPosition(this.mTouchController.DragStart);
            stick.Delta = this.mTouchController.DragDelta;
        Label_00A7:
            return;
        }

        private void OnDragEnd()
        {
            TacticsUnitController controller;
            VirtualStick2 stick;
            if (this.mBattle.IsMapCommand == null)
            {
                goto Label_002B;
            }
            if (this.mBattle.IsUnitAuto(this.mBattle.CurrentUnit) == null)
            {
                goto Label_002C;
            }
        Label_002B:
            return;
        Label_002C:
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_0056;
            }
            if (controller.IsStartSkill() == null)
            {
                goto Label_0056;
            }
            return;
        Label_0056:
            stick = this.mBattleUI.VirtualStick;
            if ((stick != null) == null)
            {
                goto Label_0075;
            }
            stick.Visible = 0;
        Label_0075:
            return;
        }

        private void OnEnable()
        {
            if ((Instance == null) == null)
            {
                goto Label_0016;
            }
            Instance = this;
        Label_0016:
            return;
        }

        public void OnGimmickUpdate()
        {
            List<TacticsUnitController> list;
            List<TacticsUnitController> list2;
            int num;
            TacticsUnitController controller;
            int num2;
            TacticsUnitController controller2;
            IntVector2 vector;
            bool flag;
            int num3;
            TacticsUnitController controller3;
            IntVector2 vector2;
            list = new List<TacticsUnitController>();
            list2 = new List<TacticsUnitController>();
            num = 0;
            goto Label_00DA;
        Label_0013:
            controller = this.FindUnitController(this.mBattle.Units[num]);
            if ((controller == null) == null)
            {
                goto Label_003C;
            }
            goto Label_00D6;
        Label_003C:
            if (this.mBattle.Units[num].IsGimmick == null)
            {
                goto Label_0099;
            }
            if (this.mBattle.Units[num].IsDisableGimmick() != null)
            {
                goto Label_0099;
            }
            if (this.mBattle.Units[num].IsBreakObj != null)
            {
                goto Label_0099;
            }
            list2.Add(controller);
            goto Label_00D6;
        Label_0099:
            if (this.mBattle.Units[num].IsDead != null)
            {
                goto Label_00D6;
            }
            if (this.mBattle.Units[num].IsJump != null)
            {
                goto Label_00D6;
            }
            list.Add(controller);
        Label_00D6:
            num += 1;
        Label_00DA:
            if (num < this.mBattle.Units.Count)
            {
                goto Label_0013;
            }
            num2 = 0;
            goto Label_0202;
        Label_00F8:
            controller2 = list[num2];
            vector = this.CalcCoord(controller2.CenterPosition);
            flag = 0;
            num3 = 0;
            goto Label_01A6;
        Label_011C:
            controller3 = list2[num3];
            if ((controller2 == controller3) == null)
            {
                goto Label_0139;
            }
            goto Label_01A0;
        Label_0139:
            vector2 = this.CalcCoord(controller3.CenterPosition);
            if ((vector == vector2) == null)
            {
                goto Label_0199;
            }
            if (list[num2].Unit.CastSkill != null)
            {
                goto Label_0184;
            }
            flag = 1;
            controller2.SetGimmickIcon(list2[num3].Unit);
        Label_0184:
            controller3.ScaleHide();
            list2.Remove(controller3);
            goto Label_01B3;
        Label_0199:
            controller3.ScaleShow();
        Label_01A0:
            num3 += 1;
        Label_01A6:
            if (num3 < list2.Count)
            {
                goto Label_011C;
            }
        Label_01B3:
            if (flag != null)
            {
                goto Label_01FC;
            }
            if (list[num2].Unit != this.Battle.CurrentUnit)
            {
                goto Label_01F5;
            }
            controller2.HideGimmickIcon(list[num2].Unit.UnitType);
            goto Label_01FC;
        Label_01F5:
            controller2.DeleteGimmickIconAll();
        Label_01FC:
            num2 += 1;
        Label_0202:
            if (num2 < list.Count)
            {
                goto Label_00F8;
            }
            return;
        }

        private void OnGoodJobClickGrid(Grid grid)
        {
            this.AddGoodJob(grid.x, grid.y, -1);
            return;
        }

        private void OnGoodJobClickUnit(TacticsUnitController controller)
        {
            int num;
            <OnGoodJobClickUnit>c__AnonStorey1E8 storeye;
            storeye = new <OnGoodJobClickUnit>c__AnonStorey1E8();
            storeye.unit = controller.Unit;
            num = this.Battle.AllUnits.FindIndex(new Predicate<Unit>(storeye.<>m__B2));
            if (num >= 0)
            {
                goto Label_0037;
            }
            return;
        Label_0037:
            this.AddGoodJob(0, 0, num);
            return;
        }

        private void OnLoadTacticsScene(GameObject root)
        {
            TacticsSceneSettings settings;
            int num;
            Transform transform;
            int num2;
            Transform transform2;
            RenderPipeline pipeline;
            settings = root.GetComponent<TacticsSceneSettings>();
            if ((settings == null) == null)
            {
                goto Label_0014;
            }
            return;
        Label_0014:
            SceneAwakeObserver.RemoveListener(new SceneAwakeObserver.SceneEvent(this.OnLoadTacticsScene));
            CriticalSection.Leave(4);
            GameUtility.DeactivateActiveChildComponents<Camera>(settings);
            this.mTacticsSceneRoot = settings;
            num = 0;
            goto Label_00AC;
        Label_003F:
            transform = root.get_transform().GetChild(num);
            if ((transform.get_name() == "light") == null)
            {
                goto Label_00A8;
            }
            num2 = 0;
            goto Label_0097;
        Label_0068:
            transform2 = transform.GetChild(num2);
            if ((transform2.get_name() != "Ambient Light") == null)
            {
                goto Label_0093;
            }
            Object.Destroy(transform2.get_gameObject());
        Label_0093:
            num2 += 1;
        Label_0097:
            if (num2 < transform.get_childCount())
            {
                goto Label_0068;
            }
            goto Label_00BD;
        Label_00A8:
            num += 1;
        Label_00AC:
            if (num < root.get_transform().get_childCount())
            {
                goto Label_003F;
            }
        Label_00BD:
            pipeline = Camera.get_main().GetComponent<RenderPipeline>();
            if ((pipeline != null) == null)
            {
                goto Label_00F0;
            }
            pipeline.BackgroundImage = settings.BackgroundImage;
            pipeline.ScreenFilter = settings.ScreenFilter;
        Label_00F0:
            if (settings.OverrideCameraSettings == null)
            {
                goto Label_010D;
            }
            this.SetCameraYawRange(settings.CameraYawMin, settings.CameraYawMax);
        Label_010D:
            return;
        }

        private void OnSelectAttackTarget(int x, int y, SkillData skill, bool bUnitLockTarget)
        {
            object[] objArray1;
            Unit unit;
            this.HideAllHPGauges();
            this.HideAllUnitOwnerIndex();
            unit = this.mBattle.CurrentUnit;
            if (this.ApplyUnitMovement(0) == null)
            {
                goto Label_00C6;
            }
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_0052;
            }
            this.SendInputEntryBattle(1, this.Battle.CurrentUnit, this.mSelectedTarget, null, null, x, y, bUnitLockTarget);
        Label_0052:
            if (this.Battle.UseSkill(unit, x, y, skill, bUnitLockTarget, 0, 0, 0) != null)
            {
                goto Label_00C0;
            }
            objArray1 = new object[] { "failed use skill. Unit:", unit.UnitName, ", x:", (int) x, ", y:", (int) y, ", skill:", unit.GetAttackSkill() };
            DebugUtility.LogError(string.Concat(objArray1));
            return;
        Label_00C0:
            this.GotoState<State_WaitForLog>();
        Label_00C6:
            return;
        }

        private void OnSelectItemTarget(int x, int y, ItemData item)
        {
            if (this.ApplyUnitMovement(0) == null)
            {
                goto Label_0064;
            }
            this.HideAllHPGauges();
            this.HideAllUnitOwnerIndex();
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_0039;
            }
            Debug.LogError("Item! Cheat!");
            this.GotoState_WaitSignal<State_WaitForLog>();
            return;
        Label_0039:
            this.mBattle.UseItem(this.mBattle.CurrentUnit, x, y, item);
            this.mBattle.SetManualPlayFlag();
            this.GotoState_WaitSignal<State_WaitForLog>();
        Label_0064:
            return;
        }

        private unsafe void OnSelectSkillTarget(int x, int y, SkillData skill, bool bUnitLockTarget)
        {
            if (this.ApplyUnitMovement(0) == null)
            {
                goto Label_00CE;
            }
            this.HideAllHPGauges();
            this.HideAllUnitOwnerIndex();
            if (skill.EffectType != 0x16)
            {
                goto Label_0036;
            }
            this.mSelectedTarget = &this.mTargetSelectorParam.ThrowTarget;
        Label_0036:
            if (this.Battle.IsMultiPlay == null)
            {
                goto Label_0064;
            }
            this.SendInputEntryBattle(2, this.Battle.CurrentUnit, this.mSelectedTarget, skill, null, x, y, bUnitLockTarget);
        Label_0064:
            if (skill.EffectType != 0x16)
            {
                goto Label_00A9;
            }
            this.mBattle.UseSkill(this.mBattle.CurrentUnit, x, y, skill, bUnitLockTarget, this.mSelectedTarget.x, this.mSelectedTarget.y, 0);
            goto Label_00C8;
        Label_00A9:
            this.mBattle.UseSkill(this.mBattle.CurrentUnit, x, y, skill, bUnitLockTarget, 0, 0, 0);
        Label_00C8:
            this.GotoState_WaitSignal<State_WaitForLog>();
        Label_00CE:
            return;
        }

        private void OnSuccessCheat(WWWResult www)
        {
            Network.EErrCode code;
            if (Network.IsError == null)
            {
                goto Label_001A;
            }
            code = Network.ErrCode;
            FlowNode_Network.Failed();
        Label_001A:
            Network.RemoveAPI();
            return;
        }

        private void OnUnitDeath(Unit unit)
        {
            if (unit.Side != 1)
            {
                goto Label_0038;
            }
            if (this.mCurrentQuest.type == 3)
            {
                goto Label_0038;
            }
            MonoSingleton<GameManager>.Instance.Player.OnEnemyKill(unit.UnitParam.iname, 1);
        Label_0038:
            return;
        }

        private unsafe void OtherPlayerDisconnect()
        {
            MyPhoton photon;
            List<MyPhoton.MyPlayer> list;
            MultiPlayer player;
            List<MultiPlayer>.Enumerator enumerator;
            List<JSON_MyPhotonPlayerParam> list2;
            MyPhoton.MyPlayer player2;
            List<MultiPlayer>.Enumerator enumerator2;
            int num;
            int num2;
            List<JSON_MyPhotonPlayerParam>.Enumerator enumerator3;
            MultiPlayer player3;
            List<MyPhoton.MyPlayer> list3;
            int num3;
            MyPhoton.MyPlayer player4;
            <OtherPlayerDisconnect>c__AnonStorey1DA storeyda;
            <OtherPlayerDisconnect>c__AnonStorey1DB storeydb;
            <OtherPlayerDisconnect>c__AnonStorey1DC storeydc;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if (this.Battle.GetQuestResult() == null)
            {
                goto Label_0017;
            }
            return;
        Label_0017:
            if (this.mExecDisconnected == null)
            {
                goto Label_0033;
            }
            if (this.Battle.IsMultiTower == null)
            {
                goto Label_0033;
            }
            return;
        Label_0033:
            list = photon.GetRoomPlayerList();
            if (list == null)
            {
                goto Label_00C7;
            }
            enumerator = this.mMultiPlayer.GetEnumerator();
        Label_004C:
            try
            {
                goto Label_00AA;
            Label_0051:
                player = &enumerator.Current;
                if (list != null)
                {
                    goto Label_0064;
                }
                goto Label_00AA;
            Label_0064:
                if (photon.FindPlayer(list, player.PlayerID, player.PlayerIndex) == null)
                {
                    goto Label_0081;
                }
                goto Label_00AA;
            Label_0081:
                if (photon.IsOldestPlayer() == null)
                {
                    goto Label_00A3;
                }
                if (player.Disconnected != null)
                {
                    goto Label_00A3;
                }
                this.SendOtherPlayerDisconnect(player.PlayerIndex);
            Label_00A3:
                player.Disconnected = 1;
            Label_00AA:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0051;
                }
                goto Label_00C7;
            }
            finally
            {
            Label_00BB:
                ((List<MultiPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_00C7:
            if ((this.mBattleUI_MultiPlay != null) == null)
            {
                goto Label_035F;
            }
            if (this.mIsWaitingForBattleSignal != null)
            {
                goto Label_035F;
            }
            if (BlockInterrupt.IsBlocked(2) != null)
            {
                goto Label_035F;
            }
            if (this.CurrentNotifyDisconnectedPlayer != null)
            {
                goto Label_035F;
            }
            list2 = photon.GetMyPlayersStarted();
            player2 = photon.GetMyPlayer();
            storeyda = new <OtherPlayerDisconnect>c__AnonStorey1DA();
            enumerator2 = this.mMultiPlayer.GetEnumerator();
        Label_011D:
            try
            {
                goto Label_0341;
            Label_0122:
                storeyda.mp = &enumerator2.Current;
                if ((list2 == null) || (list == null))
                {
                    goto Label_0341;
                }
                if (player2 != null)
                {
                    goto Label_0149;
                }
                goto Label_0341;
            Label_0149:
                if (storeyda.mp.NotifyDisconnected == null)
                {
                    goto Label_015F;
                }
                goto Label_0341;
            Label_015F:
                if (photon.FindPlayer(list, storeyda.mp.PlayerID, storeyda.mp.PlayerIndex) == null)
                {
                    goto Label_0188;
                }
                goto Label_0341;
            Label_0188:
                if (this.mRecvIgnoreMyDisconnect.Find(new Predicate<MultiPlayRecvData>(storeyda.<>m__A1)) == null)
                {
                    goto Label_01AA;
                }
                goto Label_0341;
            Label_01AA:
                this.CurrentNotifyDisconnectedPlayer = (list2 != null) ? list2.Find(new Predicate<JSON_MyPhotonPlayerParam>(storeyda.<>m__A2)) : null;
                num = 0;
                num2 = 0;
                storeydb = new <OtherPlayerDisconnect>c__AnonStorey1DB();
                enumerator3 = list2.GetEnumerator();
            Label_01E7:
                try
                {
                    goto Label_0299;
                Label_01EC:
                    storeydb.sp = &enumerator3.Current;
                    player3 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeydb.<>m__A3));
                    if (player3 == null)
                    {
                        goto Label_022C;
                    }
                    if (player3.NotifyDisconnected == null)
                    {
                        goto Label_022C;
                    }
                    goto Label_0299;
                Label_022C:
                    if (storeydb.sp.playerIndex < num)
                    {
                        goto Label_0246;
                    }
                    if (num != null)
                    {
                        goto Label_0254;
                    }
                Label_0246:
                    num = storeydb.sp.playerIndex;
                Label_0254:
                    if (storeydb.sp.playerIndex == storeyda.mp.PlayerIndex)
                    {
                        goto Label_0299;
                    }
                    if (storeydb.sp.playerIndex < num2)
                    {
                        goto Label_028B;
                    }
                    if (num2 != null)
                    {
                        goto Label_0299;
                    }
                Label_028B:
                    num2 = storeydb.sp.playerIndex;
                Label_0299:
                    if (&enumerator3.MoveNext() != null)
                    {
                        goto Label_01EC;
                    }
                    goto Label_02B7;
                }
                finally
                {
                Label_02AA:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) enumerator3).Dispose();
                }
            Label_02B7:
                if (num == storeyda.mp.PlayerIndex)
                {
                    goto Label_02D6;
                }
                this.CurrentNotifyDisconnectedPlayerType = 0;
                goto Label_02F6;
            Label_02D6:
                if (num2 != photon.MyPlayerIndex)
                {
                    goto Label_02EF;
                }
                this.CurrentNotifyDisconnectedPlayerType = 2;
                goto Label_02F6;
            Label_02EF:
                this.CurrentNotifyDisconnectedPlayerType = 1;
            Label_02F6:
                if (this.CurrentResumePlayer == null)
                {
                    goto Label_030C;
                }
                this.mBattleUI_MultiPlay.OnOtherPlayerResumeClose();
            Label_030C:
                this.mBattleUI_MultiPlay.OnMyPlayerResumeClose();
                storeyda.mp.NotifyDisconnected = 1;
                storeyda.mp.RecvInputNum = 0;
                this.mBattleUI_MultiPlay.OnOtherDisconnected();
                goto Label_034D;
            Label_0341:
                if (&enumerator2.MoveNext() != null)
                {
                    goto Label_0122;
                }
            Label_034D:
                goto Label_035F;
            }
            finally
            {
            Label_0352:
                ((List<MultiPlayer>.Enumerator) enumerator2).Dispose();
            }
        Label_035F:
            if (this.Battle.ResumeState == null)
            {
                goto Label_0410;
            }
            list3 = photon.GetRoomPlayerList();
            num3 = this.mRecvResumeRequest.Count - 1;
            goto Label_03D6;
        Label_038B:
            storeydc = new <OtherPlayerDisconnect>c__AnonStorey1DC();
            storeydc.data = this.mRecvResumeRequest[num3];
            if (list3.Find(new Predicate<MyPhoton.MyPlayer>(storeydc.<>m__A4)) != null)
            {
                goto Label_03D0;
            }
            this.mRecvResumeRequest.RemoveAt(num3);
        Label_03D0:
            num3 -= 1;
        Label_03D6:
            if (num3 >= 0)
            {
                goto Label_038B;
            }
            if (this.mRecvResumeRequest.Count != null)
            {
                goto Label_0410;
            }
            this.Battle.ResumeState = 0;
            this.mRecvCheck.Clear();
            this.mMultiPlayCheckList.Clear();
        Label_0410:
            return;
        }

        private void OtherPlayerResume()
        {
            MyPhoton photon;
            List<JSON_MyPhotonPlayerParam> list;
            <OtherPlayerResume>c__AnonStorey1DD storeydd;
            if (this.mRecvResume.Count <= 0)
            {
                goto Label_00C4;
            }
            list = PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted();
            if ((((this.mBattleUI_MultiPlay != null) == null) || (this.mIsWaitingForBattleSignal != null)) || ((BlockInterrupt.IsBlocked(2) != null) || (this.CurrentResumePlayer != null)))
            {
                goto Label_00C4;
            }
            storeydd = new <OtherPlayerResume>c__AnonStorey1DD();
            storeydd.data = this.mRecvResume[0];
            this.CurrentResumePlayer = (list != null) ? list.Find(new Predicate<JSON_MyPhotonPlayerParam>(storeydd.<>m__A5)) : null;
            if (this.CurrentNotifyDisconnectedPlayer == null)
            {
                goto Label_00A2;
            }
            this.mBattleUI_MultiPlay.OnOtherDisconnectedForce();
        Label_00A2:
            this.mBattleUI_MultiPlay.OnMyPlayerResumeClose();
            this.mBattleUI_MultiPlay.OnOtherPlayerResume();
            this.mRecvResume.RemoveAt(0);
        Label_00C4:
            return;
        }

        public void Pause(bool flag)
        {
            if (flag == null)
            {
                goto Label_0019;
            }
            this.mPauseReqCount += 1;
            goto Label_002D;
        Label_0019:
            this.mPauseReqCount = Math.Max(0, this.mPauseReqCount - 1);
        Label_002D:
            TimeManager.SetTimeScale(0, (float) ((this.mPauseReqCount <= 0) ? 1 : 0));
            return;
        }

        public void PlayBGM()
        {
            if (string.IsNullOrEmpty(this.EventPlayBgmID) != null)
            {
                goto Label_0032;
            }
            MonoSingleton<MySound>.Instance.PlayBGM(this.EventPlayBgmID, null, EventAction.IsUnManagedAssets(this.EventPlayBgmID, 1));
            goto Label_004E;
        Label_0032:
            MonoSingleton<MySound>.Instance.PlayBGM(this.mBattle.CurrentMap.BGMName, null, 0);
        Label_004E:
            return;
        }

        public static void Popup2D(GameObject go, Vector3 position, int priority, float yOffset)
        {
            if ((Instance != null) == null)
            {
                goto Label_001E;
            }
            Instance.InternalPopup2D(go, position, priority, yOffset);
        Label_001E:
            return;
        }

        public void PopupAbsorb(Vector3 position, float yOffset)
        {
            if ((this.mAbsorbPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mAbsorbPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public void PopupBackstab(Vector3 position, float yOffset)
        {
            if ((this.mBackstabPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mBackstabPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public void PopupConditionChange(Vector3 position, EUnitCondition fails)
        {
            Type[] typeArray1;
            GameObject obj2;
            Transform transform;
            int num;
            EUnitCondition condition;
            Transform transform2;
            typeArray1 = new Type[] { typeof(RectTransform), typeof(DelayStart) };
            obj2 = new GameObject("Conditions", typeArray1);
            transform = obj2.get_transform();
            num = 0;
            goto Label_006C;
        Label_0039:
            condition = 1L << (num & 0x3f);
            if ((condition & fails) == null)
            {
                goto Label_0068;
            }
            transform2 = this.CreateConditionChangeEffect(condition);
            if ((transform2 != null) == null)
            {
                goto Label_0068;
            }
            transform2.SetParent(transform, 0);
        Label_0068:
            num += 1;
        Label_006C:
            if (num < Unit.MAX_UNIT_CONDITION)
            {
                goto Label_0039;
            }
            Popup2D(obj2, position, 0, 0f);
            return;
        }

        public void PopupCritical(Vector3 position, float yOffset)
        {
            if ((this.mCriticalPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mCriticalPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public GameObject PopupDamageDsgNumber(Vector3 position, int number, eDamageDispType ddt)
        {
            DamageDsgPopup popup;
            if (this.mDamageDsgTemplate != null)
            {
                goto Label_001C;
            }
            Debug.LogError("mDamageDsgTemplate == null");
            return null;
        Label_001C:
            popup = Object.Instantiate<DamageDsgPopup>(this.mDamageDsgTemplate);
            popup.Setup(number, Color.get_white(), ddt);
            Popup2D(popup.get_gameObject(), position, 1, 0f);
            return popup.get_gameObject();
        }

        public GameObject PopupDamageNumber(Vector3 position, int number)
        {
            return this.PopupNumber(position, number, Color.get_white(), this.mDamageTemplate);
        }

        public void PopupGoodJob(Vector3 position, GameObject prefab, Sprite sprite)
        {
            GameObject obj2;
            Image image;
            if ((prefab == null) == null)
            {
                goto Label_000D;
            }
            return;
        Label_000D:
            obj2 = Object.Instantiate<GameObject>(prefab);
            if ((obj2 == null) == null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            image = ((sprite == null) == null) ? obj2.GetComponentInChildren<Image>() : null;
            if ((image != null) == null)
            {
                goto Label_004D;
            }
            image.set_sprite(sprite);
        Label_004D:
            Popup2D(obj2, position, 0, 0f);
            return;
        }

        public void PopupGuard(Vector3 position, float yOffset)
        {
            if ((this.mGuardPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mGuardPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public void PopupGuts(Vector3 position, float yOffset)
        {
            if ((this.mGutsPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mGutsPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public GameObject PopupHpHealNumber(Vector3 position, int number)
        {
            return this.PopupNumber(position, number, Color.get_white(), this.mHpHealTemplate);
        }

        public void PopupMiss(Vector3 position, float yOffset)
        {
            if ((this.mMissPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mMissPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public GameObject PopupMpHealNumber(Vector3 position, int number)
        {
            return this.PopupNumber(position, number, Color.get_white(), this.mMpHealTemplate);
        }

        public GameObject PopupNumber(Vector3 position, int number, Color color, DamagePopup popup)
        {
            DamagePopup popup2;
            if ((popup == null) == null)
            {
                goto Label_0019;
            }
            Debug.LogError("mDamageTemplate == null");
            return null;
        Label_0019:
            popup2 = Object.Instantiate<DamagePopup>(popup);
            popup2.Value = number;
            popup2.DigitColor = color;
            Popup2D(popup2.get_gameObject(), position, 1, 0f);
            return popup2.get_gameObject();
        }

        public void PopupParamChange(Vector3 position, BuffBit buff, BuffBit debuff, int ct_change_val)
        {
            Type[] typeArray1;
            GameObject obj2;
            Transform transform;
            int num;
            ParamTypes types;
            Transform transform2;
            Transform transform3;
            int num2;
            Transform transform4;
            if (buff == null)
            {
                goto Label_000C;
            }
            if (debuff != null)
            {
                goto Label_000D;
            }
        Label_000C:
            return;
        Label_000D:
            typeArray1 = new Type[] { typeof(RectTransform), typeof(DelayStart) };
            obj2 = new GameObject("Params", typeArray1);
            transform = obj2.get_transform();
            num = 0;
            goto Label_00A5;
        Label_0046:
            types = (short) num;
            if (buff.CheckBit(types) == null)
            {
                goto Label_0075;
            }
            transform2 = this.CreateParamChangeEffect(types, 0);
            if ((transform2 != null) == null)
            {
                goto Label_0075;
            }
            transform2.SetParent(transform, 0);
        Label_0075:
            if (debuff.CheckBit(types) == null)
            {
                goto Label_00A1;
            }
            transform3 = this.CreateParamChangeEffect(types, 1);
            if ((transform3 != null) == null)
            {
                goto Label_00A1;
            }
            transform3.SetParent(transform, 0);
        Label_00A1:
            num += 1;
        Label_00A5:
            if (num < SkillParam.MAX_PARAMTYPES)
            {
                goto Label_0046;
            }
            num2 = ct_change_val / 10;
            if (num2 == null)
            {
                goto Label_00DE;
            }
            transform4 = this.CreateEffectChangeCT(num2);
            if ((transform4 != null) == null)
            {
                goto Label_00DE;
            }
            transform4.SetParent(transform, 0);
        Label_00DE:
            Popup2D(obj2, position, 0, 0f);
            return;
        }

        public void PopupPefectAvoid(Vector3 position, float yOffset)
        {
            if ((this.mPerfectAvoidPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mPerfectAvoidPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public void PopupResist(Vector3 position, float yOffset)
        {
            if ((this.mResistPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mResistPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        public void PopupWeak(Vector3 position, float yOffset)
        {
            if ((this.mWeakPopup != null) == null)
            {
                goto Label_0024;
            }
            Popup2D(Object.Instantiate<GameObject>(this.mWeakPopup), position, 0, yOffset);
        Label_0024:
            return;
        }

        private void RankingQuestActionCountEnable(bool enable)
        {
            GameObject obj2;
            obj2 = GameObjectID.FindGameObject(this.mBattleUI.RankingQuestActionCountID);
            if (obj2 == null)
            {
                goto Label_0023;
            }
            obj2.SetActive(enable);
        Label_0023:
            return;
        }

        private void RankingQuestActionCountSet(uint count)
        {
            RankingQuestActionCount count2;
            count2 = GameObjectID.FindGameObject<RankingQuestActionCount>(this.mBattleUI.RankingQuestActionCountID);
            if (count2 == null)
            {
                goto Label_0035;
            }
            if (count2.ActionCount == count)
            {
                goto Label_0035;
            }
            count2.ActionCount = count;
            count2.PlayEffect();
        Label_0035:
            return;
        }

        public static unsafe Vector3 RaycastGround(Vector3 start)
        {
            RaycastHit hit;
            if (Physics.Raycast(start + (Vector3.get_up() * 10f), -Vector3.get_up(), &hit) == null)
            {
                goto Label_0033;
            }
            return &hit.get_point();
        Label_0033:
            return start;
        }

        private unsafe Unit RayPickUnit(Vector2 pos)
        {
            Camera camera;
            Vector3 vector;
            float num;
            Unit unit;
            float num2;
            int num3;
            Unit unit2;
            TacticsUnitController controller;
            Vector3 vector2;
            Vector3 vector3;
            Vector2 vector4;
            camera = Camera.get_main();
            vector = camera.get_transform().get_position();
            num = ((float) (Screen.get_width() / this.mBattle.CurrentMap.Width)) * 0.5f;
            unit = null;
            num2 = 3.402823E+38f;
            num3 = 0;
            goto Label_00EF;
        Label_0041:
            unit2 = this.mBattle.Units[num3];
            controller = this.FindUnitController(unit2);
            if ((controller == null) == null)
            {
                goto Label_0071;
            }
            goto Label_00E9;
        Label_0071:
            vector2 = GameUtility.DeformPosition(controller.get_transform().get_position(), &vector.z);
            vector3 = camera.WorldToScreenPoint(vector2);
            vector4 = pos;
            &vector4.x -= &vector3.x;
            &vector4.y -= &vector3.y;
            if (&vector4.get_magnitude() > num)
            {
                goto Label_00E9;
            }
            if (&vector3.z >= num2)
            {
                goto Label_00E9;
            }
            unit = unit2;
            num2 = &vector3.z;
        Label_00E9:
            num3 += 1;
        Label_00EF:
            if (num3 < this.mBattle.Units.Count)
            {
                goto Label_0041;
            }
            return unit;
        }

        private void RecvBuildBuffAndCond(ref List<MultiPlayResumeSkillData> buff, ref List<MultiPlayResumeSkillData> cond, MultiPlayResumeUnitData unit)
        {
            int num;
            MultiPlayResumeBuff buff2;
            MultiPlayResumeSkillData data;
            int num2;
            MultiPlayResumeBuff buff3;
            MultiPlayResumeSkillData data2;
            *(buff).Clear();
            if (unit.buff == null)
            {
                goto Label_00F9;
            }
            num = 0;
            goto Label_00EB;
        Label_0019:
            buff2 = unit.buff[num];
            data = new MultiPlayResumeSkillData();
            data.user = (buff2.unitindex == -1) ? null : this.Battle.AllUnits[buff2.unitindex];
            data.check = (buff2.checkunit == -1) ? null : this.Battle.AllUnits[buff2.checkunit];
            data.skill = (data.user == null) ? null : data.user.GetSkillData(buff2.iname);
            if (data.skill != null)
            {
                goto Label_00DF;
            }
            data.skill = (data.user == null) ? null : data.user.SearchArtifactSkill(buff2.iname);
        Label_00DF:
            *(buff).Add(data);
            num += 1;
        Label_00EB:
            if (num < ((int) unit.buff.Length))
            {
                goto Label_0019;
            }
        Label_00F9:
            *(cond).Clear();
            if (unit.cond == null)
            {
                goto Label_0204;
            }
            num2 = 0;
            goto Label_01F6;
        Label_0112:
            buff3 = unit.cond[num2];
            data2 = new MultiPlayResumeSkillData();
            data2.user = (buff3.unitindex == -1) ? null : this.Battle.AllUnits[buff3.unitindex];
            data2.check = (buff3.checkunit == -1) ? null : this.Battle.AllUnits[buff3.checkunit];
            data2.skill = (data2.user == null) ? null : data2.user.GetSkillData(buff3.iname);
            if (data2.skill != null)
            {
                goto Label_01E9;
            }
            data2.skill = (data2.user == null) ? null : data2.user.SearchArtifactSkill(buff3.iname);
        Label_01E9:
            *(cond).Add(data2);
            num2 += 1;
        Label_01F6:
            if (num2 < ((int) unit.cond.Length))
            {
                goto Label_0112;
            }
        Label_0204:
            return;
        }

        private unsafe void RecvEvent()
        {
            object[] objArray3;
            object[] objArray2;
            object[] objArray1;
            MyPhoton photon;
            List<MyPhoton.MyEvent> list;
            MultiPlayer player;
            MultiPlayer player2;
            int num;
            Unit unit;
            int num2;
            string str;
            List<SkillData> list2;
            int num3;
            int num4;
            int num5;
            <RecvEvent>c__AnonStorey1D8 storeyd;
            <RecvEvent>c__AnonStorey1D9 storeyd2;
            string str2;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if ((photon == null) == null)
            {
                goto Label_0013;
            }
            return;
        Label_0013:
            list = photon.GetEvents();
            if (list == null)
            {
                goto Label_06E9;
            }
            goto Label_06DD;
        Label_0025:
            Debug.LogWarning((MyPhoton.SEND_TYPE) list[0].code);
            if (this.mResumeMultiPlay == null)
            {
                goto Label_014F;
            }
            if (list[0].code != 1)
            {
                goto Label_0076;
            }
            base.StartCoroutine(this.RecvResume(list[0].binary));
            goto Label_014A;
        Label_0076:
            storeyd = new <RecvEvent>c__AnonStorey1D8();
            storeyd.data = null;
            player = null;
            if (GameUtility.Binary2Object<MultiPlayRecvData>(&storeyd.data, list[0].binary) == null)
            {
                goto Label_06D6;
            }
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd.<>m__9B));
            if (player != null)
            {
                goto Label_00DC;
            }
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd.<>m__9C));
        Label_00DC:
            if (storeyd.data.h != 4)
            {
                goto Label_0105;
            }
            this.mRecvContinue.Add(storeyd.data);
            goto Label_014A;
        Label_0105:
            if (storeyd.data.h != 6)
            {
                goto Label_0129;
            }
            if (player == null)
            {
                goto Label_06D6;
            }
            player.FinishLoad = 1;
            goto Label_014A;
        Label_0129:
            if (storeyd.data.h != 9)
            {
                goto Label_06D6;
            }
            this.RecvResumeSuccess(player, storeyd.data);
        Label_014A:
            goto Label_06D6;
        Label_014F:
            if (list[0].code != null)
            {
                goto Label_06D6;
            }
            storeyd2 = new <RecvEvent>c__AnonStorey1D9();
            if (list[0].binary != null)
            {
                goto Label_0184;
            }
            list.RemoveAt(0);
            goto Label_06DD;
        Label_0184:
            storeyd2.data = null;
            player2 = null;
            if (GameUtility.Binary2Object<MultiPlayRecvData>(&storeyd2.data, list[0].binary) == null)
            {
                goto Label_029F;
            }
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd2.<>m__9D));
            if (player2 != null)
            {
                goto Label_01E3;
            }
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyd2.<>m__9E));
        Label_01E3:
            objArray1 = new object[] { "[PUN] recv packet sq:", (int) storeyd2.data.sq, " pid:", (int) storeyd2.data.pid, " pidx:", (int) storeyd2.data.pidx, " h:", (EMultiPlayRecvDataHeader) storeyd2.data.h, " b:", (int) storeyd2.data.b, "/", (int) this.UnitStartCountTotal };
            this.MultiPlayLog(string.Concat(objArray1));
            goto Label_02A7;
        Label_029F:
            storeyd2.data = null;
        Label_02A7:
            if (storeyd2.data != null)
            {
                goto Label_02B8;
            }
            goto Label_06D6;
        Label_02B8:
            if (storeyd2.data.h != 4)
            {
                goto Label_02E1;
            }
            this.mRecvContinue.Add(storeyd2.data);
            goto Label_06D6;
        Label_02E1:
            if (storeyd2.data.h != 3)
            {
                goto Label_030A;
            }
            this.mRecvGoodJob.Add(storeyd2.data);
            goto Label_06D6;
        Label_030A:
            if (storeyd2.data.h != 2)
            {
                goto Label_0386;
            }
            this.mRecvCheck.RemoveAll(new Predicate<MultiPlayRecvData>(storeyd2.<>m__9F));
            this.mRecvCheck.Add(storeyd2.data);
            if (this.mRecvCheckData.ContainsKey(storeyd2.data.b) != null)
            {
                goto Label_06D6;
            }
            this.mRecvCheckData.Add(storeyd2.data.b, storeyd2.data);
            goto Label_06D6;
        Label_0386:
            if (storeyd2.data.h != 1)
            {
                goto Label_03AF;
            }
            this.mRecvBattle.Add(storeyd2.data);
            goto Label_06D6;
        Label_03AF:
            if (storeyd2.data.h != 5)
            {
                goto Label_03D8;
            }
            this.mRecvIgnoreMyDisconnect.Add(storeyd2.data);
            goto Label_06D6;
        Label_03D8:
            if (storeyd2.data.h != 6)
            {
                goto Label_03FC;
            }
            if (player2 == null)
            {
                goto Label_06D6;
            }
            player2.FinishLoad = 1;
            goto Label_06D6;
        Label_03FC:
            if (storeyd2.data.h != 7)
            {
                goto Label_0473;
            }
            if (this.mRecvResumeRequest.Find(new Predicate<MultiPlayRecvData>(storeyd2.<>m__A0)) != null)
            {
                goto Label_06D6;
            }
            this.Battle.ResumeState = 1;
            this.mResumeSend = 0;
            Debug.Log("*********************");
            Debug.Log("ResumeRequest!!");
            Debug.Log("*********************");
            this.mRecvResumeRequest.Add(storeyd2.data);
            goto Label_06D6;
        Label_0473:
            if (storeyd2.data.h != 9)
            {
                goto Label_0499;
            }
            this.RecvResumeSuccess(player2, storeyd2.data);
            goto Label_06D6;
        Label_0499:
            if (storeyd2.data.h != 10)
            {
                goto Label_04BE;
            }
            if (player2 == null)
            {
                goto Label_06D6;
            }
            player2.SyncWait = 1;
            goto Label_06D6;
        Label_04BE:
            if (storeyd2.data.h != 11)
            {
                goto Label_04E3;
            }
            if (player2 == null)
            {
                goto Label_06D6;
            }
            player2.SyncResumeWait = 1;
            goto Label_06D6;
        Label_04E3:
            if (storeyd2.data.h == 14)
            {
                goto Label_051C;
            }
            if (storeyd2.data.h == 15)
            {
                goto Label_051C;
            }
            if (storeyd2.data.h != 0x10)
            {
                goto Label_06D6;
            }
        Label_051C:
            if (storeyd2.data.uid != photon.MyPlayerIndex)
            {
                goto Label_06D6;
            }
            if (this.mCheater != null)
            {
                goto Label_06D6;
            }
            num = 0;
            unit = null;
            num2 = 0;
            goto Label_058D;
        Label_054C:
            if (this.Battle.AllUnits[num2].OwnerPlayerIndex != photon.MyPlayerIndex)
            {
                goto Label_0587;
            }
            unit = this.Battle.AllUnits[num2];
            goto Label_05A4;
        Label_0587:
            num2 += 1;
        Label_058D:
            if (num2 < this.Battle.AllUnits.Count)
            {
                goto Label_054C;
            }
        Label_05A4:
            str = string.Empty;
            if (unit == null)
            {
                goto Label_06B4;
            }
            str = "unit = " + unit.UnitParam.iname;
            if (storeyd2.data.h != 15)
            {
                goto Label_06B4;
            }
            list2 = unit.BattleSkills;
            if (list2 == null)
            {
                goto Label_06B4;
            }
            num3 = 0;
            goto Label_06A6;
        Label_05F5:
            num4 = list2[num3].Cost;
            num5 = list2[num3].HpCostRate;
            str2 = str;
            objArray2 = new object[] { str2, "[", (int) num3, "]:", list2[num3].SkillParam.iname };
            str2 = string.Concat(objArray2) + "cost(mp):" + ((int) num4);
            objArray3 = new object[] { str2, "cost(hp):", (int) num5, "," };
            str = string.Concat(objArray3);
            num3 += 1;
        Label_06A6:
            if (num3 < list2.Count)
            {
                goto Label_05F5;
            }
        Label_06B4:
            Network.RequestAPI(new ReqMultiCheat(num, str, new Network.ResponseCallback(this.OnSuccessCheat)), 0);
            this.mCheater = 1;
        Label_06D6:
            list.RemoveAt(0);
        Label_06DD:
            if (list.Count > 0)
            {
                goto Label_0025;
            }
        Label_06E9:
            return;
        }

        private bool RecvEventAudience(bool isSkip)
        {
            GameManager manager;
            int num;
            int num2;
            int num3;
            bool flag;
            bool flag2;
            EMultiPlayRecvDataHeader header;
            MultiPlayer player;
            <RecvEventAudience>c__AnonStorey1E3 storeye;
            manager = MonoSingleton<GameManager>.Instance;
            num = -1;
            num2 = -1;
            num3 = 0;
            flag = 1;
            flag2 = 0;
            header = 0;
        Label_0015:
            storeye = new <RecvEventAudience>c__AnonStorey1E3();
            if (isSkip == null)
            {
                goto Label_003A;
            }
            if (manager.AudienceManager.IsSkipEnd == null)
            {
                goto Label_003A;
            }
            flag = 0;
            goto Label_01F1;
        Label_003A:
            storeye.data = null;
            player = null;
            storeye.data = manager.AudienceManager.GetData();
            num3 += 1;
            if (storeye.data != null)
            {
                goto Label_006C;
            }
            goto Label_01F1;
        Label_006C:
            if (storeye.data.b != null)
            {
                goto Label_0082;
            }
            goto Label_0015;
        Label_0082:
            if (storeye.data.h == 10)
            {
                goto Label_0015;
            }
            if (storeye.data.h == 11)
            {
                goto Label_0015;
            }
            if (storeye.data.h != 9)
            {
                goto Label_00C0;
            }
            goto Label_0015;
        Label_00C0:
            if (isSkip == null)
            {
                goto Label_00EF;
            }
            if (num2 < 0)
            {
                goto Label_00EF;
            }
            if (storeye.data.b == num2)
            {
                goto Label_00EF;
            }
            manager.AudienceManager.Restore();
            goto Label_01F1;
        Label_00EF:
            num2 = storeye.data.b;
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeye.<>m__AD));
            if (player == null)
            {
                goto Label_0154;
            }
            if (isSkip != null)
            {
                goto Label_0154;
            }
            if (num != -1)
            {
                goto Label_0137;
            }
            num = player.PlayerID;
            goto Label_0154;
        Label_0137:
            if (num == player.PlayerID)
            {
                goto Label_0154;
            }
            manager.AudienceManager.Restore();
            goto Label_01F1;
        Label_0154:
            if (storeye.data.h != 1)
            {
                goto Label_017D;
            }
            this.mRecvBattle.Add(storeye.data);
            goto Label_01C7;
        Label_017D:
            if (storeye.data.h != 12)
            {
                goto Label_01A2;
            }
            this.mAudienceRetire = storeye.data;
            goto Label_01C7;
        Label_01A2:
            if (storeye.data.h != 0x11)
            {
                goto Label_01C7;
            }
            this.mAudienceDisconnect.Add(storeye.data);
        Label_01C7:
            if (storeye.data == null)
            {
                goto Label_0015;
            }
            if (storeye.data.h != 2)
            {
                goto Label_0015;
            }
            flag2 = 1;
            goto Label_0015;
        Label_01F1:
            flag &= this.CheckSkipLogEnd(isSkip, num3, flag2);
            return flag;
        }

        [DebuggerHidden]
        private IEnumerator RecvReinforcementUnit()
        {
            <RecvReinforcementUnit>c__Iterator34 iterator;
            iterator = new <RecvReinforcementUnit>c__Iterator34();
            iterator.<>f__this = this;
            return iterator;
        }

        [DebuggerHidden]
        private IEnumerator RecvResume(byte[] resumedata)
        {
            string str;
            <RecvResume>c__Iterator33 iterator;
            iterator = new <RecvResume>c__Iterator33();
            iterator.resumedata = resumedata;
            iterator.<$>resumedata = resumedata;
            iterator.<>f__this = this;
            return iterator;
        }

        private void RecvResumeSuccess(MultiPlayer mp, MultiPlayRecvData data)
        {
            <RecvResumeSuccess>c__AnonStorey1D7 storeyd;
            storeyd = new <RecvResumeSuccess>c__AnonStorey1D7();
            storeyd.data = data;
            this.mResumeSend = 0;
            if (this.mRecvResumeRequest.Count <= 0)
            {
                goto Label_003D;
            }
            this.mRecvResumeRequest.RemoveAll(new Predicate<MultiPlayRecvData>(storeyd.<>m__99));
        Label_003D:
            if (this.mRecvResumeRequest.Count > 0)
            {
                goto Label_005F;
            }
            this.Battle.ResumeState = 0;
            goto Label_006B;
        Label_005F:
            this.Battle.ResumeState = 2;
        Label_006B:
            if (mp == null)
            {
                goto Label_00B7;
            }
            if (mp.NotifyDisconnected == null)
            {
                goto Label_00A9;
            }
            if (this.mRecvResume.Find(new Predicate<MultiPlayRecvData>(storeyd.<>m__9A)) != null)
            {
                goto Label_00A9;
            }
            this.mRecvResume.Add(storeyd.data);
        Label_00A9:
            mp.Disconnected = 0;
            mp.NotifyDisconnected = 0;
        Label_00B7:
            this.mRecvCheck.Clear();
            this.mMultiPlayCheckList.Clear();
            this.mRecvCheckData.Clear();
            this.mRecvCheckMyData.Clear();
            if (this.Battle.IsResume == null)
            {
                goto Label_00F9;
            }
            this.SendResumeInfo();
        Label_00F9:
            return;
        }

        private void RecvUnitDead(TacticsUnitController controller, Unit target)
        {
            if ((controller == null) == null)
            {
                goto Label_000D;
            }
            return;
        Label_000D:
            if (target != null)
            {
                goto Label_0014;
            }
            return;
        Label_0014:
            if (target.IsDead == null)
            {
                goto Label_0057;
            }
            this.Battle.ResumeDead(target);
            controller.get_gameObject().SetActive(0);
            controller.ShowHPGauge(0);
            controller.ShowVersusCursor(0);
            this.mTacticsUnits.Remove(controller);
            goto Label_007B;
        Label_0057:
            if (controller.IsJumpCant() == null)
            {
                goto Label_0068;
            }
            controller.SetCastJump();
        Label_0068:
            controller.UpdateShields(1);
            controller.ClearBadStatusLocks();
            controller.UpdateBadStatus();
        Label_007B:
            if (target.IsGimmick == null)
            {
                goto Label_00AE;
            }
            if (target.IsBreakObj == null)
            {
                goto Label_0097;
            }
            controller.ReflectDispModel();
        Label_0097:
            if (target.IsDisableGimmick() == null)
            {
                goto Label_00AE;
            }
            controller.get_gameObject().SetActive(0);
        Label_00AE:
            return;
        }

        public void ReflectCastSkill(bool is_disp)
        {
            if (is_disp == null)
            {
                goto Label_001C;
            }
            if (this.mIsShowCastSkill == null)
            {
                goto Label_002E;
            }
            this.InternalShowCastSkill();
            goto Label_002E;
        Label_001C:
            if (this.mIsShowCastSkill == null)
            {
                goto Label_002E;
            }
            this.InternalHideCastSkill(0);
        Label_002E:
            return;
        }

        private unsafe void ReflectUnitChgButton(Unit unit, bool is_update)
        {
            bool flag;
            Unit unit2;
            List<Unit>.Enumerator enumerator;
            TacticsUnitController controller;
            IntVector2 vector;
            flag = 0;
            if (is_update != null)
            {
                goto Label_00B4;
            }
            this.mIsUnitChgActive = 0;
            if (unit.Side != null)
            {
                goto Label_00A8;
            }
            if (unit.IsUnitFlag(0x40000) != null)
            {
                goto Label_00A8;
            }
            if (unit.IsUnitFlag(6) != null)
            {
                goto Label_00A8;
            }
            if (this.mBattle.Player == null)
            {
                goto Label_00A8;
            }
            enumerator = this.mBattle.Player.GetEnumerator();
        Label_0057:
            try
            {
                goto Label_008B;
            Label_005C:
                unit2 = &enumerator.Current;
                if (this.mBattle.StartingMembers.Contains(unit2) == null)
                {
                    goto Label_007F;
                }
                goto Label_008B;
            Label_007F:
                this.mIsUnitChgActive = 1;
                goto Label_0097;
            Label_008B:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_005C;
                }
            Label_0097:
                goto Label_00A8;
            }
            finally
            {
            Label_009C:
                ((List<Unit>.Enumerator) enumerator).Dispose();
            }
        Label_00A8:
            flag = this.mIsUnitChgActive;
            goto Label_013B;
        Label_00B4:
            if (this.mBattle.IsUnitChange != null)
            {
                goto Label_00C5;
            }
            return;
        Label_00C5:
            if (this.mIsUnitChgActive != null)
            {
                goto Label_00D1;
            }
            return;
        Label_00D1:
            if (this.mBattleUI.CommandWindow.IsEnableUnitChgButton != null)
            {
                goto Label_00E7;
            }
            return;
        Label_00E7:
            flag = 1;
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_013B;
            }
            vector = this.CalcCoord(controller.CenterPosition);
            if (&vector.x != unit.x)
            {
                goto Label_0139;
            }
            if (&vector.y == unit.y)
            {
                goto Label_013B;
            }
        Label_0139:
            flag = 0;
        Label_013B:
            this.mBattleUI.CommandWindow.EnableUnitChgButton(this.mBattle.IsUnitChange, flag);
            return;
        }

        private void ReflectWeatherInfo(WeatherData wd)
        {
            WeatherInfo info;
            if (wd != null)
            {
                goto Label_000D;
            }
            wd = WeatherData.CurrentWeatherData;
        Label_000D:
            info = GameObjectID.FindGameObject<WeatherInfo>(this.mBattleUI.WeatherInfoID);
            if (info == null)
            {
                goto Label_0030;
            }
            info.Refresh(wd);
        Label_0030:
            return;
        }

        private unsafe void RefreshJumpSpots()
        {
            int num;
            Unit unit;
            bool flag;
            int num2;
            int num3;
            int num4;
            Vector3 vector;
            GameObject obj2;
            int num5;
            Unit unit2;
            KeyValuePair<Unit, GameObject> pair;
            KeyValuePair<Unit, GameObject> pair2;
            KeyValuePair<Unit, GameObject> pair3;
            KeyValuePair<Unit, GameObject> pair4;
            if ((this.mJumpSpotEffectTemplate == null) == null)
            {
                goto Label_0012;
            }
            return;
        Label_0012:
            num = 0;
            goto Label_0123;
        Label_0019:
            unit = this.mBattle.Units[num];
            if (unit.IsDead != null)
            {
                goto Label_011F;
            }
            if (unit.CastSkill != null)
            {
                goto Label_0046;
            }
            goto Label_011F;
        Label_0046:
            if (unit.CastSkill.CastType == 2)
            {
                goto Label_0067;
            }
            if (unit.CastSkill.TeleportType == null)
            {
                goto Label_011F;
            }
        Label_0067:
            flag = 0;
            num2 = 0;
            goto Label_0096;
        Label_0070:
            pair = this.mJumpSpotEffects[num2];
            if (&pair.Key != unit)
            {
                goto Label_0092;
            }
            flag = 1;
            goto Label_00A7;
        Label_0092:
            num2 += 1;
        Label_0096:
            if (num2 < this.mJumpSpotEffects.Count)
            {
                goto Label_0070;
            }
        Label_00A7:
            if (flag != null)
            {
                goto Label_011F;
            }
            num3 = unit.x;
            num4 = unit.y;
            if (unit.CastSkill.TeleportType == null)
            {
                goto Label_00E7;
            }
            num3 = unit.GridTarget.x;
            num4 = unit.GridTarget.y;
        Label_00E7:
            vector = this.CalcGridCenter(num3, num4);
            obj2 = Object.Instantiate(this.mJumpSpotEffectTemplate, vector, Quaternion.get_identity()) as GameObject;
            this.mJumpSpotEffects.Add(new KeyValuePair<Unit, GameObject>(unit, obj2));
        Label_011F:
            num += 1;
        Label_0123:
            if (num < this.mBattle.Units.Count)
            {
                goto Label_0019;
            }
            num5 = this.mJumpSpotEffects.Count - 1;
            goto Label_01EA;
        Label_014D:
            pair2 = this.mJumpSpotEffects[num5];
            unit2 = &pair2.Key;
            if (unit2.IsDead != null)
            {
                goto Label_01A0;
            }
            if (unit2.CastSkill == null)
            {
                goto Label_01A0;
            }
            if (unit2.CastSkill.CastType == 2)
            {
                goto Label_01E4;
            }
            if (unit2.CastSkill.TeleportType != null)
            {
                goto Label_01E4;
            }
        Label_01A0:
            pair3 = this.mJumpSpotEffects[num5];
            GameUtility.StopEmitters(&pair3.Value);
            pair4 = this.mJumpSpotEffects[num5];
            &pair4.Value.AddComponent<OneShotParticle>();
            this.mJumpSpotEffects.RemoveAt(num5);
        Label_01E4:
            num5 -= 1;
        Label_01EA:
            if (num5 >= 0)
            {
                goto Label_014D;
            }
            return;
        }

        private void RefreshMapCommands()
        {
            Unit unit;
            UnitCommands.ButtonTypes types;
            unit = this.mBattle.CurrentUnit;
            types = 0;
            if (unit.IsEnableMoveCondition(0) == null)
            {
                goto Label_001E;
            }
            types |= 1;
        Label_001E:
            if (unit.IsUnitFlag(4) != null)
            {
                goto Label_00A1;
            }
            types |= 2;
            if (unit.IsEnableItemCondition(0) == null)
            {
                goto Label_0050;
            }
            if (this.mBattle.CheckDisableItems(unit) != null)
            {
                goto Label_0050;
            }
            types |= 0x40;
        Label_0050:
            if (unit.IsEnableAttackCondition(0) == null)
            {
                goto Label_007F;
            }
            types |= 0x10;
            if (this.mBattle.HelperUnits.Count <= 0)
            {
                goto Label_007F;
            }
            types |= 0x80;
        Label_007F:
            if (unit.IsEnableSkillCondition(0) == null)
            {
                goto Label_00A1;
            }
            if (this.mBattle.CheckDisableAbilities(unit) != null)
            {
                goto Label_00A1;
            }
            types |= 0x20;
        Label_00A1:
            types |= 8;
            types |= 0x100;
            if ((this.mBattleUI.CommandWindow != null) == null)
            {
                goto Label_0100;
            }
            this.mBattleUI.CommandWindow.CancelButton.SetActive(1);
            this.mBattleUI.CommandWindow.OKButton.SetActive(1);
            this.mBattleUI.CommandWindow.VisibleButtons = types;
        Label_0100:
            return;
        }

        private void RefreshOnlyMapCommand()
        {
            UnitCommands.ButtonTypes types;
            types = 0;
            types |= 0x100;
            if ((this.mBattleUI.CommandWindow != null) == null)
            {
                goto Label_005D;
            }
            this.mBattleUI.CommandWindow.CancelButton.SetActive(0);
            this.mBattleUI.CommandWindow.OKButton.SetActive(0);
            this.mBattleUI.CommandWindow.VisibleButtons = types;
        Label_005D:
            return;
        }

        private void RefreshUnitStatus(Unit unit)
        {
            if ((UnitQueue.Instance != null) == null)
            {
                goto Label_001B;
            }
            UnitQueue.Instance.Refresh(unit);
        Label_001B:
            return;
        }

        private void RemainingActionCountEnable(bool pc_enable, bool ec_enable)
        {
            GameObject obj2;
            GameObject obj3;
            obj2 = GameObjectID.FindGameObject(this.mBattleUI.PlayerActionCountID);
            if (obj2 == null)
            {
                goto Label_0023;
            }
            obj2.SetActive(pc_enable);
        Label_0023:
            obj3 = GameObjectID.FindGameObject(this.mBattleUI.EnemyActionCountID);
            if (obj3 == null)
            {
                goto Label_0046;
            }
            obj3.SetActive(ec_enable);
        Label_0046:
            return;
        }

        private void RemainingActionCountSet(uint pc_count, uint ec_count)
        {
            ArenaActionCount count;
            ArenaActionCount count2;
            count = GameObjectID.FindGameObject<ArenaActionCount>(this.mBattleUI.PlayerActionCountID);
            if ((count != null) == null)
            {
                goto Label_0041;
            }
            if (count.get_isActiveAndEnabled() == null)
            {
                goto Label_0041;
            }
            if (count.ActionCount == pc_count)
            {
                goto Label_0041;
            }
            count.ActionCount = pc_count;
            count.PlayEffect();
        Label_0041:
            count2 = GameObjectID.FindGameObject<ArenaActionCount>(this.mBattleUI.EnemyActionCountID);
            if ((count2 != null) == null)
            {
                goto Label_0082;
            }
            if (count2.get_isActiveAndEnabled() == null)
            {
                goto Label_0082;
            }
            if (count2.ActionCount == ec_count)
            {
                goto Label_0082;
            }
            count2.ActionCount = ec_count;
            count2.PlayEffect();
        Label_0082:
            return;
        }

        public void RemoveLog()
        {
            if (this.mBattle.Logs.Peek == null)
            {
                goto Label_0039;
            }
            DebugUtility.Log("RemoveLog(): " + this.mBattle.Logs.Peek.GetType());
        Label_0039:
            this.Battle.Logs.RemoveLog();
            return;
        }

        public unsafe void ResetCameraTarget()
        {
            this.m_TargetCamera.Reset();
            if (this.isUpView != null)
            {
                goto Label_003F;
            }
            this.m_CameraAngle = this.m_TargetCamera.Yaw;
            this.m_TargetCameraDistance = this.m_TargetCamera.CameraDistance;
            this.m_TargetCameraDistanceInterp = 0;
        Label_003F:
            this.m_CameraPosition = this.m_TargetCamera.TargetPosition;
            &this.m_CameraPosition.y -= GameSettings.Instance.GameCamera_UnitHeightOffset;
            return;
        }

        public void ResetCheckData()
        {
            this.mRecvCheck.Clear();
            this.mMultiPlayCheckList.Clear();
            return;
        }

        public void ResetMoveCamera()
        {
            TacticsUnitController controller;
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            this.InterpCameraTarget(controller.get_transform());
            this.m_TargetCamera.Pitch = GameSettings.Instance.GameCamera_AngleX;
            return;
        }

        private TacticsUnitController ResetMultiPlayerTransform(Unit unit)
        {
            TacticsUnitController controller;
            controller = (unit != null) ? this.FindUnitController(unit) : null;
            if ((controller == null) == null)
            {
                goto Label_0022;
            }
            return null;
        Label_0022:
            controller.get_transform().set_position(this.CalcGridCenter(unit.startX, unit.startY));
            controller.CancelAction();
            controller.get_transform().set_rotation(SRPG_Extensions.ToRotation(unit.startDir));
            return controller;
        }

        public unsafe void ResetSync()
        {
            MultiPlayer player;
            List<MultiPlayer>.Enumerator enumerator;
            enumerator = this.mMultiPlayer.GetEnumerator();
        Label_000C:
            try
            {
                goto Label_0027;
            Label_0011:
                player = &enumerator.Current;
                player.SyncWait = 0;
                player.SyncResumeWait = 0;
            Label_0027:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0011;
                }
                goto Label_0044;
            }
            finally
            {
            Label_0038:
                ((List<MultiPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_0044:
            return;
        }

        private void ResetUnitPosition()
        {
            Unit unit;
            TacticsUnitController controller;
            Grid grid;
            unit = this.mBattle.CurrentUnit;
            controller = this.FindUnitController(unit);
            if ((controller != null) == null)
            {
                goto Label_003F;
            }
            grid = this.mBattle.GetUnitGridPosition(unit);
            controller.get_transform().set_position(this.CalcGridCenter(grid));
        Label_003F:
            return;
        }

        private void ResetUnitPosition(TacticsUnitController controller)
        {
            Vector3 vector;
            vector = this.CalcGridCenter(this.mBattle.GetUnitGridPosition(controller.Unit));
            controller.get_transform().set_position(vector);
            controller.ResetRotation();
            return;
        }

        public void RestoreTreasureCount(int num)
        {
            this.TreasureCount = num;
            this.DispTreasureCount = num;
            return;
        }

        [DebuggerHidden]
        private IEnumerator RestoreWeather(WeatherData wth_data)
        {
            <RestoreWeather>c__Iterator35 iterator;
            iterator = new <RestoreWeather>c__Iterator35();
            iterator.wth_data = wth_data;
            iterator.<$>wth_data = wth_data;
            iterator.<>f__this = this;
            return iterator;
        }

        public void RotateCamera(float delta, float duration)
        {
            float num;
            int num2;
            int num3;
            float num4;
            float num5;
            if (this.IsControlBattleUI(4) != null)
            {
                goto Label_000D;
            }
            return;
        Label_000D:
            if (this.mUpdateCameraPosition == null)
            {
                goto Label_0023;
            }
            if (this.isBattleCamera == null)
            {
                goto Label_0024;
            }
        Label_0023:
            return;
        Label_0024:
            if (this.isUpView == null)
            {
                goto Label_0030;
            }
            return;
        Label_0030:
            if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
            {
                goto Label_0045;
            }
            return;
        Label_0045:
            num = 0f;
            if (this.isNewCamera != null)
            {
                goto Label_006B;
            }
            num = delta * (this.m_CameraYawMax - this.m_CameraYawMin);
            goto Label_0087;
        Label_006B:
            if (delta >= 0f)
            {
                goto Label_0081;
            }
            num = -45f;
            goto Label_0087;
        Label_0081:
            num = 45f;
        Label_0087:
            if (this.m_TargetCameraAngleInterp == null)
            {
                goto Label_00B1;
            }
            this.m_TargetCameraAngleStart = this.m_CameraAngle;
            this.m_TargetCameraAngle += num;
            goto Label_00D2;
        Label_00B1:
            this.m_TargetCameraAngleStart = this.m_CameraAngle;
            this.m_TargetCameraAngleInterp = 1;
            this.m_TargetCameraAngle = this.m_CameraAngle + num;
        Label_00D2:
            if (this.isNewCamera == null)
            {
                goto Label_0144;
            }
            if (num <= 0f)
            {
                goto Label_0113;
            }
            num2 = Mathf.FloorToInt((this.m_TargetCameraAngle + 1f) / 45f);
            this.m_TargetCameraAngle = ((float) num2) * 45f;
            goto Label_0144;
        Label_0113:
            if (num >= 0f)
            {
                goto Label_0144;
            }
            num3 = Mathf.CeilToInt((this.m_TargetCameraAngle - 1f) / 45f);
            this.m_TargetCameraAngle = ((float) num3) * 45f;
        Label_0144:
            num4 = duration;
            num5 = duration / 45f;
            duration = Mathf.Abs(this.m_TargetCameraAngle - this.m_TargetCameraAngleStart) * num5;
            if (duration <= num4)
            {
                goto Label_0175;
            }
            duration = num4;
            goto Label_0187;
        Label_0175:
            if (duration >= 0.1f)
            {
                goto Label_0187;
            }
            duration = 0.1f;
        Label_0187:
            if (this.isNewCamera != null)
            {
                goto Label_01B4;
            }
            this.m_TargetCameraAngle = Mathf.Clamp(this.m_TargetCameraAngle, this.m_CameraYawMin, this.m_CameraYawMax);
            goto Label_0272;
        Label_01B4:
            if (this.isFullRotationCamera != null)
            {
                goto Label_01E1;
            }
            this.m_TargetCameraAngle = Mathf.Clamp(this.m_TargetCameraAngle, this.m_CameraYawMin, this.m_CameraYawMax);
            goto Label_0272;
        Label_01E1:
            if (this.m_TargetCameraAngle < 360f)
            {
                goto Label_022C;
            }
            this.m_CameraAngle -= 360f;
            this.m_TargetCameraAngleStart -= 360f;
            this.m_TargetCameraAngle -= 360f;
            goto Label_0272;
        Label_022C:
            if (this.m_TargetCameraAngle >= 0f)
            {
                goto Label_0272;
            }
            this.m_CameraAngle += 360f;
            this.m_TargetCameraAngleStart += 360f;
            this.m_TargetCameraAngle += 360f;
        Label_0272:
            this.m_TargetCameraAngleTime = 0f;
            this.m_TargetCameraAngleTimeMax = duration;
            return;
        }

        private void SaveResult()
        {
            this.mSavedResult = new QuestResultData(MonoSingleton<GameManager>.Instance.Player, this.mCurrentQuest.clear_missions, this.mBattle.GetQuestRecord(), this.Battle.AllUnits, this.mIsFirstWin);
            return;
        }

        public int SearchUnitIndex(Unit target)
        {
            int num;
            if (target != null)
            {
                goto Label_0008;
            }
            return -1;
        Label_0008:
            num = 0;
            goto Label_0031;
        Label_000F:
            if (this.Battle.AllUnits[num].Equals(target) == null)
            {
                goto Label_002D;
            }
            return num;
        Label_002D:
            num += 1;
        Label_0031:
            if (num < this.Battle.AllUnits.Count)
            {
                goto Label_000F;
            }
            return -1;
        }

        public void SelectUnitDir(EUnitDirection dir)
        {
            State_InputDirection direction;
            if (this.mState.IsInState<State_InputDirection>() != null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            direction = (State_InputDirection) this.mState.State;
            direction.SelectDirection(dir);
            return;
        }

        public void SendCheat(CHEAT_TYPE type, int uid)
        {
            EMultiPlayRecvDataHeader header;
            MyPhoton photon;
            byte[] buffer;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            header = 14 + type;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            buffer = this.CreateSendBinary(header, uid, null);
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            return;
        }

        private unsafe bool SendCheckMultiPlay()
        {
            MyPhoton photon;
            bool flag;
            List<MultiPlayInput> list;
            int num;
            Unit unit;
            MultiPlayInput input;
            RandXorshift xorshift;
            RandXorshift xorshift2;
            uint num2;
            uint num3;
            byte[] buffer;
            <SendCheckMultiPlay>c__AnonStorey1E7 storeye;
            storeye = new <SendCheckMultiPlay>c__AnonStorey1E7();
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0018;
            }
            return 1;
        Label_0018:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_002A;
            }
            return 1;
        Label_002A:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            flag = ((this.mBattleUI_MultiPlay == null) == null) ? this.mBattleUI_MultiPlay.CheckRandCheat : 0;
            list = new List<MultiPlayInput>();
            num = 0;
            goto Label_014A;
        Label_0060:
            unit = this.Battle.AllUnits[num];
            input = new MultiPlayInput();
            input.c = unit.CurrentStatus.param.hp;
            input.gx = unit.x;
            input.gy = unit.y;
            input.d = unit.Direction;
            xorshift = (flag == null) ? null : this.Battle.CloneRand();
            xorshift2 = (flag == null) ? null : this.Battle.CloneRandDamage();
            num2 = (xorshift != null) ? xorshift.Get() : 0;
            num3 = (xorshift2 != null) ? xorshift2.Get() : 0;
            input.s = &num2.ToString() + " / " + &num3.ToString();
            list.Add(input);
            num += 1;
        Label_014A:
            if (num < this.Battle.AllUnits.Count)
            {
                goto Label_0060;
            }
            buffer = this.CreateSendBinary(2, 0, list);
            if (photon.IsOldestPlayer() == null)
            {
                goto Label_0188;
            }
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            photon.SendFlush();
        Label_0188:
            storeye.data = null;
            if (GameUtility.Binary2Object<MultiPlayRecvData>(&storeye.data, buffer) == null)
            {
                goto Label_0208;
            }
            this.mRecvCheck.RemoveAll(new Predicate<MultiPlayRecvData>(storeye.<>m__B1));
            this.mRecvCheck.Add(storeye.data);
            if (this.mRecvCheckMyData.ContainsKey(storeye.data.b) != null)
            {
                goto Label_0208;
            }
            this.mRecvCheckMyData.Add(storeye.data.b, storeye.data);
        Label_0208:
            Debug.Log("*****SendCheckData******::" + ((int) storeye.data.b));
            return 1;
        }

        public bool SendFinishLoad()
        {
            GameManager manager;
            MyPhoton photon;
            MultiPlayer player;
            byte[] buffer;
            bool flag;
            <SendFinishLoad>c__AnonStorey1E9 storeye;
            storeye = new <SendFinishLoad>c__AnonStorey1E9();
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode != null)
            {
                goto Label_0023;
            }
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_0025;
            }
        Label_0023:
            return 1;
        Label_0025:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            storeye.me = photon.GetMyPlayer();
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeye.<>m__B3));
            buffer = this.CreateSendBinary(6, 0, null);
            flag = photon.SendRoomMessageBinary(1, buffer, 0, 0);
            if (player == null)
            {
                goto Label_0074;
            }
            player.FinishLoad = 1;
        Label_0074:
            return flag;
        }

        private bool SendIgnoreMyDisconnect()
        {
            byte[] buffer;
            MyPhoton photon;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0011;
            }
            return 1;
        Label_0011:
            if (MonoSingleton<GameManager>.Instance.IsVSCpuBattle == null)
            {
                goto Label_0022;
            }
            return 1;
        Label_0022:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0034;
            }
            return 1;
        Label_0034:
            buffer = this.CreateSendBinary(5, 0, null);
            photon = PunMonoSingleton<MyPhoton>.Instance;
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            photon.SendFlush();
            this.MultiPlayLog("[PUN]SendIgnoreMyDisconnect");
            return 1;
        }

        private void SendInputEntryBattle(EBattleCommand type, Unit unit, Unit enemy, SkillData skill, ItemData item, int gx, int gy, bool bUnitLockTarget)
        {
            object[] objArray1;
            GameManager manager;
            MultiPlayInput input;
            <SendInputEntryBattle>c__AnonStorey1E6 storeye;
            storeye = new <SendInputEntryBattle>c__AnonStorey1E6();
            storeye.enemy = enemy;
            manager = MonoSingleton<GameManager>.Instance;
            if ((manager.AudienceMode == null) && (manager.IsVSCpuBattle == null))
            {
                goto Label_002A;
            }
            return;
        Label_002A:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_003B;
            }
            return;
        Label_003B:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_004C;
            }
            return;
        Label_004C:
            this.SendInputUnitXYDir(unit, unit.x, unit.y, unit.Direction);
            input = new MultiPlayInput();
            input.c = 6;
            if (storeye.enemy == null)
            {
                goto Label_009F;
            }
            input.u = this.Battle.AllUnits.FindIndex(new Predicate<Unit>(storeye.<>m__B0));
        Label_009F:
            if (skill == null)
            {
                goto Label_00CB;
            }
            input.s = skill.SkillID;
            if (skill.CastType != 2)
            {
                goto Label_00CB;
            }
            this.MultiPlayInputTimeLimit = 0f;
        Label_00CB:
            if (item == null)
            {
                goto Label_00DF;
            }
            input.i = item.ItemID;
        Label_00DF:
            input.gx = gx;
            input.gy = gy;
            input.d = type;
            input.ul = (bUnitLockTarget == null) ? 0 : 1;
            this.mSendList.Add(input);
            objArray1 = new object[] { "[PUN] SendInputEntryBattle (", (int) unit.x, ",", (int) unit.y, ")", (EUnitDirection) unit.Direction, "(", (storeye.enemy != null) ? storeye.enemy.UnitName : "null", "[", (int) input.u, "],", (skill != null) ? skill.SkillID : "null", ",", (item != null) ? item.ItemID : "null", ")" };
            this.MultiPlayLog(string.Concat(objArray1));
            this.SendInputFlush(0);
            return;
        }

        private void SendInputFlush(bool force)
        {
            GameManager manager;
            MyPhoton photon;
            byte[] buffer;
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode != null)
            {
                goto Label_001C;
            }
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_001D;
            }
        Label_001C:
            return;
        Label_001D:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if (this.mSendList.Count <= 0)
            {
                goto Label_005F;
            }
            buffer = this.CreateSendBinary(1, this.mCurrentSendInputUnitID, this.mSendList);
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            if (force == null)
            {
                goto Label_005F;
            }
            photon.SendFlush();
        Label_005F:
            this.mSendList.Clear();
            this.mSendTime = 0f;
            return;
        }

        private void SendInputGridEvent(Unit unit)
        {
            MultiPlayInput input;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_0032;
            }
            return;
        Label_0032:
            if (this.Battle.CurrentUnit.IsUnitFlag(2) != null)
            {
                goto Label_0052;
            }
            DebugUtility.LogWarning("SendInputGridEvent not moved");
        Label_0052:
            input = new MultiPlayInput();
            input.c = 7;
            input.gx = unit.x;
            input.gy = unit.y;
            input.d = unit.Direction;
            this.mSendList.Add(input);
            this.MultiPlayLog("[PUN] SendInputUnitTimeLimit");
            return;
        }

        private void SendInputGridXY(Unit unit, int gridX, int gridY, EUnitDirection dir, bool send)
        {
            object[] objArray1;
            GameManager manager;
            MultiPlayInput input;
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode != null)
            {
                goto Label_001C;
            }
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_001D;
            }
        Label_001C:
            return;
        Label_001D:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_002E;
            }
            return;
        Label_002E:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_003F;
            }
            return;
        Label_003F:
            if (this.mPrevGridX != gridX)
            {
                goto Label_0064;
            }
            if (this.mPrevGridY != gridY)
            {
                goto Label_0064;
            }
            if (this.mPrevDir == dir)
            {
                goto Label_00EA;
            }
        Label_0064:
            input = new MultiPlayInput();
            input.c = 3;
            input.gx = gridX;
            input.gy = gridY;
            input.d = dir;
            this.mSendList.Add(input);
            objArray1 = new object[] { "[PUN] SendInputGridXY x:", (int) gridX, " y:", (int) gridY };
            this.MultiPlayLog(string.Concat(objArray1));
            if (send == null)
            {
                goto Label_00D4;
            }
            this.SendInputFlush(1);
        Label_00D4:
            this.mPrevGridX = gridX;
            this.mPrevGridY = gridY;
            this.mPrevDir = dir;
        Label_00EA:
            return;
        }

        private void SendInputMove(Unit unit, TacticsUnitController controller)
        {
        }

        private void SendInputMoveEnd(Unit unit, bool cancel)
        {
            GameManager manager;
            MultiPlayInput input;
            manager = MonoSingleton<GameManager>.Instance;
            if ((manager.AudienceMode == null) && (manager.IsVSCpuBattle == null))
            {
                goto Label_001D;
            }
            return;
        Label_001D:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_002E;
            }
            return;
        Label_002E:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_003F;
            }
            return;
        Label_003F:
            input = new MultiPlayInput();
            input.c = (cancel == null) ? 4 : 5;
            input.gx = unit.x;
            input.gy = unit.y;
            input.d = unit.Direction;
            this.mSendList.Add(input);
            this.MultiPlayLog("[PUN] SendInputMoveEnd cancel:" + ((bool) cancel));
            return;
        }

        private void SendInputMoveStart(Unit unit)
        {
            GameManager manager;
            MultiPlayInput input;
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode != null)
            {
                goto Label_001C;
            }
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_001D;
            }
        Label_001C:
            return;
        Label_001D:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_002E;
            }
            return;
        Label_002E:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_003F;
            }
            return;
        Label_003F:
            input = new MultiPlayInput();
            input.c = 1;
            input.gx = unit.x;
            input.gy = unit.y;
            this.mSendList.Add(input);
            return;
        }

        private void SendInputUnitEnd(Unit unit, EUnitDirection dir)
        {
            MultiPlayInput input;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_0032;
            }
            return;
        Label_0032:
            if (this.Battle.CurrentUnit.IsUnitFlag(2) != null)
            {
                goto Label_0052;
            }
            DebugUtility.LogWarning("SendInputUnitEnd not moved");
        Label_0052:
            input = new MultiPlayInput();
            input.c = 8;
            input.gx = unit.x;
            input.gy = unit.y;
            input.d = dir;
            this.mSendList.Add(input);
            this.MultiPlayLog("[PUN] SendInputUnitEnd");
            this.SendInputFlush(0);
            this.MultiPlayInputTimeLimit = 0f;
            return;
        }

        private void SendInputUnitTimeLimit(Unit unit)
        {
            MultiPlayInput input;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_0032;
            }
            return;
        Label_0032:
            input = new MultiPlayInput();
            input.c = 9;
            input.gx = unit.x;
            input.gy = unit.y;
            input.d = unit.Direction;
            this.mSendList.Add(input);
            this.MultiPlayLog("[PUN] SendInputUnitTimeLimit");
            return;
        }

        private void SendInputUnitXYDir(Unit unit, int gridX, int gridY, EUnitDirection dir)
        {
            object[] objArray1;
            MultiPlayInput input;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            if (this.Battle.EntryBattleMultiPlayTimeUp == null)
            {
                goto Label_0032;
            }
            return;
        Label_0032:
            input = new MultiPlayInput();
            input.c = 10;
            input.gx = gridX;
            input.gy = gridY;
            input.d = dir;
            this.mSendList.Add(input);
            objArray1 = new object[] { "[PUN] SendInputUnitXYDir x:", (int) gridX, " y:", (int) gridY, " dir:", (EUnitDirection) dir };
            this.MultiPlayLog(string.Concat(objArray1));
            return;
        }

        public void SendOtherPlayerDisconnect(int uid)
        {
            byte[] buffer;
            MyPhoton photon;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            buffer = this.CreateSendBinary(0x11, uid, null);
            photon = PunMonoSingleton<MyPhoton>.Instance;
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            photon.SendFlush();
            this.MultiPlayLog("[PUN]SendIgnoreMyDisconnect");
            return;
        }

        public unsafe void SendRequestResume()
        {
            MyPhoton photon;
            byte[] buffer;
            List<MyPhoton.MyPlayer> list;
            List<MyPhoton.MyPlayer>.Enumerator enumerator;
            MultiPlayer player;
            <SendRequestResume>c__AnonStorey1EA storeyea;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.mResumeMultiPlay != null)
            {
                goto Label_001C;
            }
            return;
        Label_001C:
            if (this.mResumeSend == null)
            {
                goto Label_0028;
            }
            return;
        Label_0028:
            if (this.mRestResumeRequestInterval <= 0f)
            {
                goto Label_0039;
            }
            return;
        Label_0039:
            this.mRestResumeRequestInterval = this.RESUME_REQUEST_INTERVAL;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            buffer = this.CreateSendBinary(7, 0, null);
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            list = photon.GetRoomPlayerList();
            storeyea = new <SendRequestResume>c__AnonStorey1EA();
            enumerator = list.GetEnumerator();
        Label_0075:
            try
            {
                goto Label_00D9;
            Label_007A:
                storeyea.player = &enumerator.Current;
                player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeyea.<>m__B4));
                if (storeyea.player.start == null)
                {
                    goto Label_00D9;
                }
                this.mResumeAlreadyStartPlayer.Add(storeyea.player.playerID);
                if (player == null)
                {
                    goto Label_00D9;
                }
                player.FinishLoad = 1;
            Label_00D9:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_007A;
                }
                goto Label_00F6;
            }
            finally
            {
            Label_00EA:
                ((List<MyPhoton.MyPlayer>.Enumerator) enumerator).Dispose();
            }
        Label_00F6:
            return;
        }

        public void SendResumeInfo()
        {
            MyPhoton photon;
            byte[] buffer;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            if (this.Battle.IsResume != null)
            {
                goto Label_0027;
            }
            return;
        Label_0027:
            if (photon.IsHost() != null)
            {
                goto Label_0033;
            }
            return;
        Label_0033:
            if (this.mResumeSend == null)
            {
                goto Label_003F;
            }
            return;
        Label_003F:
            if (this.mRecvResumeRequest.Count > 0)
            {
                goto Label_0051;
            }
            return;
        Label_0051:
            buffer = this.CreateSendResumeInfo();
            if (buffer == null)
            {
                goto Label_006E;
            }
            this.mResumeSend = photon.SendRoomMessageBinary(1, buffer, 1, 0);
        Label_006E:
            Debug.Log("Send ResumeInfo!!!");
            return;
        }

        public void SendResumeSuccess()
        {
            MyPhoton photon;
            byte[] buffer;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.mResumeSend == null)
            {
                goto Label_001C;
            }
            return;
        Label_001C:
            if (this.mRestResumeSuccessInterval <= 0f)
            {
                goto Label_002D;
            }
            return;
        Label_002D:
            this.mRestResumeSuccessInterval = this.RESUME_SUCCESS_INTERVAL;
            photon = PunMonoSingleton<MyPhoton>.Instance;
            buffer = this.CreateSendBinary(9, 0, null);
            photon.SendRoomMessageBinary(1, buffer, 0, 0);
            return;
        }

        private void SendTimeLimit()
        {
            TacticsUnitController controller;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.mIsWaitingForBattleSignal == null)
            {
                goto Label_0032;
            }
            this.MultiPlayLog("[PUN]TimeUp but waiting for battle signal...");
            this.MultiPlayInputTimeLimit = -1f;
            return;
        Label_0032:
            this.MultiPlayInputTimeLimit = 0f;
            if (this.IsInState<State_MapMoveSelect_Stick>() == null)
            {
                goto Label_0055;
            }
            this.Battle.EntryBattleMultiPlayTimeUp = 1;
            return;
        Label_0055:
            if (this.Battle.CurrentUnit.IsUnitFlag(2) != null)
            {
                goto Label_00AC;
            }
            controller = this.ResetMultiPlayerTransform(this.Battle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_009A;
            }
            this.SetCameraTarget(controller.get_transform().get_position());
        Label_009A:
            this.SendInputMoveEnd(this.Battle.CurrentUnit, 1);
        Label_00AC:
            this.SendInputUnitTimeLimit(this.Battle.CurrentUnit);
            this.SendInputFlush(0);
            this.CloseBattleUI();
            this.Battle.EntryBattleMultiPlayTimeUp = 1;
            this.GotoMapCommand();
            return;
        }

        public void SetBattleCamera(bool value)
        {
            this.m_BattleCamera = value;
            return;
        }

        private void SetCameraOffset(Transform transform)
        {
        }

        private void SetCameraTarget(Component position)
        {
            this.SetCameraTarget(position.get_transform().get_position());
            return;
        }

        private void SetCameraTarget(Vector3 position)
        {
            this.m_CameraPosition = position;
            this.m_TargetCameraPositionInterp = 0;
            return;
        }

        private unsafe void SetCameraTarget(float x, float y)
        {
            &this.m_CameraPosition.x = x;
            &this.m_CameraPosition.y = this.CalcHeight(x, y);
            &this.m_CameraPosition.z = y;
            return;
        }

        public void SetCameraYawRange(float min, float max)
        {
            this.m_DefaultCameraYawMin = min;
            this.m_DefaultCameraYawMax = max;
            return;
        }

        public void SetFullRotationCamera(bool value)
        {
            if (value == null)
            {
                goto Label_0012;
            }
            this.m_NewCamera = 1;
            goto Label_003D;
        Label_0012:
            this.m_CameraYawMin = this.m_DefaultCameraYawMin;
            this.m_CameraYawMax = this.m_DefaultCameraYawMax;
            this.m_CameraAngle = this.m_DefaultCameraYawMin;
            this.m_NewCamera = 0;
        Label_003D:
            this.m_FullRotationCamera = value;
            return;
        }

        public void SetMoveCamera()
        {
            this.ResetMoveCamera();
            return;
        }

        public void SetNewCamera(TacticsSceneCamera camera)
        {
            float num;
            this.m_NewCamera = 1;
            this.m_FullRotationCamera = camera.allRange.enable;
            if (this.m_FullRotationCamera != null)
            {
                goto Label_00A8;
            }
            if (camera.moveRange.isOverride == null)
            {
                goto Label_00A8;
            }
            this.m_CameraYawMin = 360f - camera.moveRange.min;
            this.m_CameraYawMax = 360f - camera.moveRange.max;
            this.m_CameraAngle = 360f - camera.moveRange.start;
            if (this.m_CameraYawMin <= this.m_CameraYawMax)
            {
                goto Label_00CC;
            }
            num = this.m_CameraYawMin;
            this.m_CameraYawMin = this.m_CameraYawMax;
            this.m_CameraYawMax = num;
            goto Label_00CC;
        Label_00A8:
            this.m_CameraYawMin = this.m_DefaultCameraYawMin;
            this.m_CameraYawMax = this.m_DefaultCameraYawMax;
            this.m_CameraAngle = this.m_DefaultCameraYawMin;
        Label_00CC:
            return;
        }

        private void SetPrioritizedUnit(TacticsUnitController controller)
        {
            int num;
            if ((controller != null) == null)
            {
                goto Label_0013;
            }
            controller.AlwaysUpdate = 1;
        Label_0013:
            num = 0;
            goto Label_0047;
        Label_001A:
            if ((this.mTacticsUnits[num] != controller) == null)
            {
                goto Label_0043;
            }
            this.mTacticsUnits[num].AlwaysUpdate = 0;
        Label_0043:
            num += 1;
        Label_0047:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_001A;
            }
            return;
        }

        private void SetPrioritizedUnits(List<TacticsUnitController> controllers)
        {
            int num;
            int num2;
            if (controllers != null)
            {
                goto Label_0039;
            }
            num = 0;
            goto Label_0023;
        Label_000D:
            this.mTacticsUnits[num].AlwaysUpdate = 0;
            num += 1;
        Label_0023:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_000D;
            }
            goto Label_0095;
        Label_0039:
            num2 = 0;
            goto Label_0084;
        Label_0040:
            if (controllers.Contains(this.mTacticsUnits[num2]) == null)
            {
                goto Label_006E;
            }
            this.mTacticsUnits[num2].AlwaysUpdate = 1;
            goto Label_0080;
        Label_006E:
            this.mTacticsUnits[num2].AlwaysUpdate = 0;
        Label_0080:
            num2 += 1;
        Label_0084:
            if (num2 < this.mTacticsUnits.Count)
            {
                goto Label_0040;
            }
        Label_0095:
            return;
        }

        private void SetScreenMirroring(bool mirror)
        {
            RenderPipeline pipeline;
            pipeline = Camera.get_main().GetComponent<RenderPipeline>();
            if ((pipeline != null) == null)
            {
                goto Label_0025;
            }
            pipeline.FlipHorizontally = mirror;
            this.isScreenMirroring = mirror;
        Label_0025:
            return;
        }

        private void SetUiHeight(int Height)
        {
            MapHeight height;
            height = GameObjectID.FindGameObject<MapHeight>(this.mBattleUI.MapHeightID);
            if ((height != null) == null)
            {
                goto Label_002B;
            }
            height.FocusUnit = null;
            height.Height = Height;
        Label_002B:
            return;
        }

        private void SetUnitUiHeight(Unit FocusUnit)
        {
            MapHeight height;
            height = GameObjectID.FindGameObject<MapHeight>(this.mBattleUI.MapHeightID);
            if ((height != null) == null)
            {
                goto Label_0024;
            }
            height.FocusUnit = FocusUnit;
        Label_0024:
            return;
        }

        public void SetupGoodJob()
        {
            SRPG_TouchInputModule module;
            if (this.mSetupGoodJob == null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            module = this.GetTouchInputModule();
            if ((module == null) == null)
            {
                goto Label_0020;
            }
            return;
        Label_0020:
            module.OnDoubleTap = (SRPG_TouchInputModule.OnDoubleTapDelegate) Delegate.Combine(module.OnDoubleTap, new SRPG_TouchInputModule.OnDoubleTapDelegate(this.OnDoubleTap));
            this.mSetupGoodJob = 1;
            return;
        }

        [DebuggerHidden]
        private IEnumerator SetWeatherEffect(WeatherData wd)
        {
            <SetWeatherEffect>c__Iterator31 iterator;
            iterator = new <SetWeatherEffect>c__Iterator31();
            iterator.wd = wd;
            iterator.<$>wd = wd;
            iterator.<>f__this = this;
            return iterator;
        }

        private void ShowAllHPGauges()
        {
            this.ShowPlayerHPGauges();
            this.ShowEnemyHPGauges();
            this.ShowBreakObjHPGauges();
            return;
        }

        private unsafe void ShowBreakObjHPGauges()
        {
            TacticsUnitController controller;
            List<TacticsUnitController>.Enumerator enumerator;
            enumerator = this.mTacticsUnits.GetEnumerator();
        Label_000C:
            try
            {
                goto Label_0030;
            Label_0011:
                controller = &enumerator.Current;
                if (controller.Unit.IsBreakObj == null)
                {
                    goto Label_0030;
                }
                controller.ShowHPGauge(1);
            Label_0030:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_0011;
                }
                goto Label_004D;
            }
            finally
            {
            Label_0041:
                ((List<TacticsUnitController>.Enumerator) enumerator).Dispose();
            }
        Label_004D:
            return;
        }

        private void ShowCastSkill()
        {
            this.mIsShowCastSkill = 1;
            if (GameUtility.Config_ChargeDisp.Value != null)
            {
                goto Label_0017;
            }
            return;
        Label_0017:
            this.InternalShowCastSkill();
            return;
        }

        private void ShowEnemyHPGauges()
        {
            int num;
            num = 0;
            goto Label_0039;
        Label_0007:
            if (this.mTacticsUnits[num].Unit.Side != 1)
            {
                goto Label_0035;
            }
            this.mTacticsUnits[num].ShowHPGauge(1);
        Label_0035:
            num += 1;
        Label_0039:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0007;
            }
            return;
        }

        private void ShowEnemyUnitMarkers()
        {
            int num;
            Unit unit;
            this.HideUnitMarkers(1);
            num = 0;
            goto Label_0043;
        Label_000E:
            unit = this.mTacticsUnits[num].Unit;
            if (unit.Side != 1)
            {
                goto Label_003F;
            }
            if (unit.IsDead != null)
            {
                goto Label_003F;
            }
            this.ShowUnitMarker(unit, 1);
        Label_003F:
            num += 1;
        Label_0043:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_000E;
            }
            return;
        }

        private void ShowPlayerHPGauges()
        {
            int num;
            num = 0;
            goto Label_0038;
        Label_0007:
            if (this.mTacticsUnits[num].Unit.Side != null)
            {
                goto Label_0034;
            }
            this.mTacticsUnits[num].ShowHPGauge(1);
        Label_0034:
            num += 1;
        Label_0038:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_0007;
            }
            return;
        }

        public void ShowSkillNamePlate(string skill_name, EUnitSide side, float speed)
        {
            this.mSkillNamePlate.SetSkillName(skill_name, side, 0, 0, 0);
            this.mSkillNamePlate.Open(speed);
            this.mSkillNamePlate.get_transform().SetParent(this.OverlayCanvas.get_transform(), 0);
            return;
        }

        public void ShowSkillNamePlate(Unit unit, SkillData skill, string skill_name, float speed)
        {
            if (skill != null)
            {
                goto Label_0020;
            }
            this.mSkillNamePlate.SetSkillName(skill_name, unit.Side, 0, 0, 0);
            goto Label_0049;
        Label_0020:
            this.mSkillNamePlate.SetSkillName(skill.Name, unit.Side, skill.ElementType, skill.AttackDetailType, skill.AttackType);
        Label_0049:
            this.mSkillNamePlate.Open(speed);
            this.mSkillNamePlate.get_transform().SetParent(this.OverlayCanvas.get_transform(), 0);
            return;
        }

        private void ShowThinking()
        {
            int num;
            string str;
            if ((this.mBattleUI_MultiPlay != null) == null)
            {
                goto Label_011C;
            }
            num = 0;
            if (this.IsInState<State_MapCommandMultiPlay>() != null)
            {
                goto Label_0029;
            }
            if (this.IsInState<State_MapCommandVersus>() == null)
            {
                goto Label_0081;
            }
        Label_0029:
            if (this.Battle.CurrentUnit == null)
            {
                goto Label_0081;
            }
            if (this.Battle.CurrentUnit.OwnerPlayerIndex <= 0)
            {
                goto Label_0081;
            }
            str = FlowNode_Variable.Get("DisableThinkingUI");
            if (string.IsNullOrEmpty(str) != null)
            {
                goto Label_0070;
            }
            if (long.Parse(str) != null)
            {
                goto Label_0081;
            }
        Label_0070:
            num = this.Battle.CurrentUnit.OwnerPlayerIndex;
        Label_0081:
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_00C7;
            }
            if (this.Battle.CurrentUnit == null)
            {
                goto Label_00C7;
            }
            if (this.Battle.CurrentUnit.OwnerPlayerIndex <= 0)
            {
                goto Label_00C7;
            }
            num = this.Battle.CurrentUnit.OwnerPlayerIndex;
        Label_00C7:
            if (num == this.mThinkingPlayerIndex)
            {
                goto Label_0115;
            }
            if (num <= 0)
            {
                goto Label_00FA;
            }
            if (this.Battle.CurrentUnit.OwnerPlayerIndex != this.Battle.MyPlayerIndex)
            {
                goto Label_010A;
            }
        Label_00FA:
            this.mBattleUI_MultiPlay.HideThinking();
            goto Label_0115;
        Label_010A:
            this.mBattleUI_MultiPlay.ShowThinking();
        Label_0115:
            this.mThinkingPlayerIndex = num;
        Label_011C:
            return;
        }

        private void ShowTimeLimit()
        {
            bool flag;
            int num;
            if ((this.mBattleUI_MultiPlay != null) == null)
            {
                goto Label_00D6;
            }
            flag = 0;
            if (this.mBeginMultiPlay != null)
            {
                goto Label_0023;
            }
            goto Label_006A;
        Label_0023:
            if (this.Battle.CurrentUnit == null)
            {
                goto Label_006A;
            }
            if (this.Battle.CurrentUnit.OwnerPlayerIndex == this.Battle.MyPlayerIndex)
            {
                goto Label_0058;
            }
            goto Label_006A;
        Label_0058:
            if (this.GainMultiPlayInputTimeLimit() != null)
            {
                goto Label_0068;
            }
            goto Label_006A;
        Label_0068:
            flag = 1;
        Label_006A:
            num = this.GetMultiPlayInputTimeLimit();
            if (flag == null)
            {
                goto Label_0094;
            }
            if (this.DisplayMultiPlayInputTimeLimit == num)
            {
                goto Label_0094;
            }
            this.DisplayMultiPlayInputTimeLimit = num;
            GameParameter.UpdateValuesOfType(0xde);
        Label_0094:
            if (num > 0)
            {
                goto Label_009D;
            }
            flag = 0;
        Label_009D:
            if (this.mShowInputTimeLimit != flag)
            {
                goto Label_00AE;
            }
            goto Label_00CF;
        Label_00AE:
            if (flag == null)
            {
                goto Label_00C4;
            }
            this.mBattleUI_MultiPlay.ShowInputTimeLimit();
            goto Label_00CF;
        Label_00C4:
            this.mBattleUI_MultiPlay.HideInputTimeLimit();
        Label_00CF:
            this.mShowInputTimeLimit = flag;
        Label_00D6:
            return;
        }

        private unsafe void ShowUnitCursor(Unit unit)
        {
            GameSettings settings;
            if (unit != null)
            {
                goto Label_0007;
            }
            return;
        Label_0007:
            settings = GameSettings.Instance;
            this.ShowUnitCursor(unit, (unit.Side != null) ? &settings.Colors.Enemy : &settings.Colors.Player);
            return;
        }

        private void ShowUnitCursor(Unit unit, Color color)
        {
            TacticsUnitController controller;
            if (unit != null)
            {
                goto Label_0007;
            }
            return;
        Label_0007:
            controller = this.FindUnitController(unit);
            if ((controller == null) == null)
            {
                goto Label_001C;
            }
            return;
        Label_001C:
            controller.ShowCursor(this.UnitCursor, color);
            return;
        }

        private void ShowUnitCursorOnCurrent()
        {
            Unit unit;
            TacticsUnitController controller;
            unit = this.mBattle.CurrentUnit;
            if (this.FindUnitController(unit).HasCursor != null)
            {
                goto Label_0026;
            }
            this.ShowUnitCursor(unit);
        Label_0026:
            return;
        }

        private void ShowUnitMarker(Unit unit, UnitMarkerTypes markerType)
        {
            TacticsUnitController controller;
            Transform transform;
            List<GameObject> list;
            int num;
            int num2;
            GameObject obj2;
            controller = this.FindUnitController(unit);
            if ((controller == null) == null)
            {
                goto Label_0015;
            }
            return;
        Label_0015:
            transform = controller.get_transform();
            list = this.mUnitMarkers[markerType];
            num = list.Count - 1;
            goto Label_006A;
        Label_0033:
            if (list[num].get_layer() == GameUtility.LayerHidden)
            {
                goto Label_0066;
            }
            if ((list[num].get_transform().get_parent() == transform) == null)
            {
                goto Label_0066;
            }
            return;
        Label_0066:
            num -= 1;
        Label_006A:
            if (num >= 0)
            {
                goto Label_0033;
            }
            num2 = list.Count - 1;
            goto Label_00D3;
        Label_0080:
            if (list[num2].get_layer() != GameUtility.LayerHidden)
            {
                goto Label_00CD;
            }
            list[num2].get_transform().SetParent(transform, 0);
            GameUtility.SetLayer(list[num2], GameUtility.LayerUI, 1);
            list[num2].SetActive(1);
            return;
        Label_00CD:
            num2 -= 1;
        Label_00D3:
            if (num2 >= 0)
            {
                goto Label_0080;
            }
            obj2 = Object.Instantiate(this.mUnitMarkerTemplates[markerType], Vector3.get_zero(), Quaternion.get_identity()) as GameObject;
            obj2.get_transform().SetParent(controller.get_transform(), 0);
            obj2.get_transform().set_localPosition(Vector3.get_up() * 2f);
            GameUtility.SetLayer(obj2, GameUtility.LayerUI, 1);
            list.Add(obj2);
            return;
        }

        private void ShowUnitMarker(List<Unit> units, UnitMarkerTypes markerType)
        {
            int num;
            num = units.Count - 1;
            goto Label_0020;
        Label_000E:
            this.ShowUnitMarker(units[num], markerType);
            num -= 1;
        Label_0020:
            if (num >= 0)
            {
                goto Label_000E;
            }
            return;
        }

        private unsafe void ShowWalkableGrids(GridMap<int> accessMap, int layerIndex)
        {
            GridMap<Color32> map;
            GameSettings settings;
            int num;
            int num2;
            map = new GridMap<Color32>(accessMap.w, accessMap.h);
            settings = GameSettings.Instance;
            num = 0;
            goto Label_009E;
        Label_001F:
            num2 = 0;
            goto Label_008E;
        Label_0026:
            if (accessMap.get(num, num2) < 0)
            {
                goto Label_008A;
            }
            accessMap.set(num, num2, 0);
            if (this.mCurrentUnitStartX != num)
            {
                goto Label_0072;
            }
            if (this.mCurrentUnitStartY != num2)
            {
                goto Label_0072;
            }
            map.set(num, num2, &settings.Colors.StartGrid);
            goto Label_008A;
        Label_0072:
            map.set(num, num2, &settings.Colors.WalkableArea);
        Label_008A:
            num2 += 1;
        Label_008E:
            if (num2 < accessMap.h)
            {
                goto Label_0026;
            }
            num += 1;
        Label_009E:
            if (num < accessMap.w)
            {
                goto Label_001F;
            }
            this.mTacticsSceneRoot.ShowGridLayer(layerIndex, map, 0);
            return;
        }

        public void SkipLog()
        {
            GameManager manager;
            int num;
            int num2;
            BattleCore.OrderData data;
            Unit unit;
            SkillData data2;
            int num3;
            int num4;
            Unit unit2;
            int num5;
            TacticsUnitController controller;
            int num6;
            Unit unit3;
            int num7;
            <SkipLog>c__AnonStorey1E4 storeye;
            <SkipLog>c__AnonStorey1E5 storeye2;
            if (this.ReqCreateBreakObjUcLists.Count == null)
            {
                goto Label_0011;
            }
            return;
        Label_0011:
            manager = MonoSingleton<GameManager>.Instance;
            if (this.RecvEventAudience(1) != null)
            {
                goto Label_006C;
            }
            this.Battle.MultiFinishLoad = 1;
            manager.AudienceManager.SkipMode = 0;
            this.Battle.StartOrder(0, 0, 1);
            this.Battle.RemainVersusTurnCount = this.UnitStartCountTotal;
            this.ArenaActionCountSet(this.Battle.RemainVersusTurnCount);
            return;
        Label_006C:
            this.mUnitStartCount += 1;
            this.mUnitStartCountTotal += 1;
            this.Battle.UnitStart();
            this.BeginMultiPlayer();
            num = 0;
            goto Label_00CC;
        Label_00A0:
            if ((this.mTacticsUnits[num] != null) == null)
            {
                goto Label_00C8;
            }
            this.mTacticsUnits[num].UpdateBadStatus();
        Label_00C8:
            num += 1;
        Label_00CC:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_00A0;
            }
            this.UpdateMultiBattleInfo();
            num2 = 0;
            goto Label_0100;
        Label_00EA:
            this.mMultiPlayerUnit[num2].UpdateSkip(this);
            num2 += 1;
        Label_0100:
            if (num2 < this.mMultiPlayerUnit.Count)
            {
                goto Label_00EA;
            }
            this.Battle.CommandWait(0);
            if (this.Battle.GetQuestResult() != null)
            {
                goto Label_0139;
            }
            this.Battle.UnitEnd();
        Label_0139:
            data = null;
            data = this.Battle.CurrentOrderData;
            goto Label_022D;
        Label_014C:
            unit = this.Battle.CurrentUnit;
            data2 = unit.CastSkill;
            num3 = 0;
            num4 = 0;
            if (data2 == null)
            {
                goto Label_01BF;
            }
            if (unit.UnitTarget == null)
            {
                goto Label_0197;
            }
            num3 = unit.UnitTarget.x;
            num4 = unit.UnitTarget.y;
        Label_0197:
            if (unit.GridTarget == null)
            {
                goto Label_01BF;
            }
            num3 = unit.GridTarget.x;
            num4 = unit.GridTarget.y;
        Label_01BF:
            this.Battle.CastSkillStart();
            this.Battle.CastSkillEnd();
            if (data2 == null)
            {
                goto Label_0221;
            }
            if (data2.IsSetBreakObjSkill() == null)
            {
                goto Label_0221;
            }
            unit2 = this.Battle.FindGimmickAtGrid(num3, num4, 0);
            if (unit2 == null)
            {
                goto Label_0221;
            }
            if (unit2.IsBreakObj == null)
            {
                goto Label_0221;
            }
            this.ReqCreateBreakObjUcLists.Add(new ReqCreateBreakObjUc(data2, unit2));
        Label_0221:
            data = this.Battle.CurrentOrderData;
        Label_022D:
            if (data == null)
            {
                goto Label_023E;
            }
            if (data.IsCastSkill != null)
            {
                goto Label_014C;
            }
        Label_023E:
            num5 = 0;
            goto Label_033D;
        Label_0246:
            controller = this.FindUnitController(this.Battle.AllUnits[num5]);
            if ((controller == null) == null)
            {
                goto Label_0272;
            }
            goto Label_0337;
        Label_0272:
            if (this.Battle.AllUnits[num5].IsGimmick == null)
            {
                goto Label_02D8;
            }
            if (this.Battle.AllUnits[num5].IsBreakObj != null)
            {
                goto Label_02D8;
            }
            if (this.Battle.AllUnits[num5].IsDisableGimmick() == null)
            {
                goto Label_0337;
            }
            controller.get_gameObject().SetActive(0);
            goto Label_0337;
        Label_02D8:
            if (this.Battle.AllUnits[num5].IsBreakObj == null)
            {
                goto Label_02FB;
            }
            controller.ReflectDispModel();
        Label_02FB:
            if (controller.Unit.IsDead == null)
            {
                goto Label_0337;
            }
            controller.get_gameObject().SetActive(0);
            controller.ShowHPGauge(0);
            controller.ShowVersusCursor(0);
            this.mTacticsUnits.Remove(controller);
        Label_0337:
            num5 += 1;
        Label_033D:
            if (num5 < this.Battle.AllUnits.Count)
            {
                goto Label_0246;
            }
            num6 = this.mTacticsUnits.Count - 1;
            goto Label_03FE;
        Label_0368:
            storeye = new <SkipLog>c__AnonStorey1E4();
            storeye.tuc = this.mTacticsUnits[num6];
            if (storeye.tuc == null)
            {
                goto Label_03EB;
            }
            if (this.Battle.AllUnits.Find(new Predicate<Unit>(storeye.<>m__AE)) == null)
            {
                goto Label_03BF;
            }
            goto Label_03F8;
        Label_03BF:
            storeye.tuc.get_gameObject().SetActive(0);
            storeye.tuc.ShowHPGauge(0);
            storeye.tuc.ShowVersusCursor(0);
        Label_03EB:
            this.mTacticsUnits.RemoveAt(num6);
        Label_03F8:
            num6 -= 1;
        Label_03FE:
            if (num6 >= 0)
            {
                goto Label_0368;
            }
            if (this.ReqCreateBreakObjUcLists.Count == null)
            {
                goto Label_048C;
            }
            num7 = 0;
            goto Label_047A;
        Label_041E:
            storeye2 = new <SkipLog>c__AnonStorey1E5();
            storeye2.<>f__this = this;
            storeye2.rcb = this.ReqCreateBreakObjUcLists[num7];
            storeye2.rcb.mIsLoad = 1;
            base.StartCoroutine(State_PrepareSkill.loadBreakObjUnit(this, storeye2.rcb.mTargetUnit, new Action(storeye2.<>m__AF)));
            num7 += 1;
        Label_047A:
            if (num7 < this.ReqCreateBreakObjUcLists.Count)
            {
                goto Label_041E;
            }
        Label_048C:
            this.Battle.Logs.Reset();
            this.EndMultiPlayer();
            return;
        }

        private GameObject SpawnShieldEffect(TacticsUnitController unit, SkillParam skill, int value, int valueMax, int turn, int turnMax)
        {
            GameObject obj2;
            GameObject obj3;
            Animator animator;
            float num;
            float num2;
            if (this.mShieldEffects.ContainsKey(skill) != null)
            {
                goto Label_0013;
            }
            return null;
        Label_0013:
            obj2 = this.mShieldEffects[skill];
            if ((obj2 == null) == null)
            {
                goto Label_002E;
            }
            return null;
        Label_002E:
            obj3 = Object.Instantiate(obj2, unit.get_transform().get_position(), Quaternion.get_identity()) as GameObject;
            animator = obj3.GetComponent<Animator>();
            if ((animator != null) == null)
            {
                goto Label_0116;
            }
            animator.SetInteger("shield_val", value);
            if (valueMax <= 0)
            {
                goto Label_00B6;
            }
            animator.SetFloat("shield_val_norm", ((float) value) / ((float) valueMax));
            num = (((float) value) * 100f) / ((float) valueMax);
            animator.SetInteger("shield_val_per", (num >= 50f) ? Mathf.FloorToInt(num) : Mathf.CeilToInt(num));
        Label_00B6:
            animator.SetInteger("shield_turn", turn);
            if (turnMax <= 0)
            {
                goto Label_0116;
            }
            animator.SetFloat("shield_turn_norm", ((float) turn) / ((float) turnMax));
            num2 = (((float) turn) * 100f) / ((float) turnMax);
            animator.SetInteger("shield_turn_per", (num2 >= 50f) ? Mathf.FloorToInt(num2) : Mathf.CeilToInt(num2));
        Label_0116:
            return obj3;
        }

        private void Start()
        {
            int num;
            int num2;
            MonoSingleton<GameManager>.Instance.Player.ClearItemFlags(3);
            LocalizedText.LoadTable(QUEST_TEXTTABLE, 0);
            FadeController.Instance.ResetSceneFade(0f);
            this.InitCamera();
            num = Enum.GetValues(typeof(UnitMarkerTypes)).Length;
            this.mUnitMarkerTemplates = new GameObject[num];
            this.mUnitMarkers = new List<GameObject>[num];
            num2 = 0;
            goto Label_0077;
        Label_0064:
            this.mUnitMarkers[num2] = new List<GameObject>(12);
            num2 += 1;
        Label_0077:
            if (num2 < num)
            {
                goto Label_0064;
            }
            this.mBattle = new BattleCore();
            this.mState = new StateMachine<SceneBattle>(this);
            SimpleEvent.Clear();
            SimpleEvent.Add(TreasureEvent.GROUP, new TreasureEvent());
            if (this.mStartQuestCalled != null)
            {
                goto Label_00BA;
            }
            this.GotoState<State_ReqBtlComReq>();
        Label_00BA:
            this.mStartCalled = 1;
            return;
        }

        private void StartDownloadNextQuestAsync()
        {
            base.StartCoroutine(this.DownloadNextQuestAsync());
            return;
        }

        public void StartQuest(string questID, BattleCore.Json_Battle json)
        {
            this.mStartQuestCalled = 1;
            base.StartCoroutine(this.StartQuestAsync(questID, json));
            return;
        }

        [DebuggerHidden]
        private IEnumerator StartQuestAsync(string questID, BattleCore.Json_Battle jsonBtl)
        {
            int num;
            <StartQuestAsync>c__Iterator2F iteratorf;
            iteratorf = new <StartQuestAsync>c__Iterator2F();
            iteratorf.questID = questID;
            iteratorf.jsonBtl = jsonBtl;
            iteratorf.<$>questID = questID;
            iteratorf.<$>jsonBtl = jsonBtl;
            iteratorf.<>f__this = this;
            return iteratorf;
        }

        private unsafe void StepToNear(Unit unit)
        {
            TacticsUnitController controller;
            IntVector2 vector;
            Grid grid;
            controller = this.FindUnitController(unit);
            vector = this.CalcCoord(controller.CenterPosition);
            grid = this.mBattle.CurrentMap[&vector.x, &vector.y];
            controller.StepTo(this.CalcGridCenter(grid));
            return;
        }

        public void StopBGM()
        {
            MonoSingleton<MySound>.Instance.PlayBGM(null, null, 0);
            return;
        }

        [DebuggerHidden]
        private IEnumerator StopWeatherEffect(bool is_immidiate)
        {
            <StopWeatherEffect>c__Iterator32 iterator;
            iterator = new <StopWeatherEffect>c__Iterator32();
            iterator.is_immidiate = is_immidiate;
            iterator.<$>is_immidiate = is_immidiate;
            iterator.<>f__this = this;
            return iterator;
        }

        private void SubmitArenaResultCallback(WWWResult www)
        {
            this.SubmitResultCallbackImpl(www, 1);
            return;
        }

        private unsafe void SubmitBattleResult(long btlid, QuestParam quest)
        {
            int num;
            bool flag;
            BattleCore.Record record;
            BtlResultTypes types;
            int[] numArray;
            int num2;
            int[] numArray2;
            int num3;
            int[] numArray3;
            int num4;
            int[] numArray4;
            int num5;
            string str;
            string str2;
            GameManager manager;
            ArenaPlayer player;
            int[] numArray5;
            int num6;
            int num7;
            TowerFloorParam param;
            byte num8;
            List<int> list;
            List<int> list2;
            int num9;
            List<int> list3;
            PartyData data;
            int num10;
            List<JSON_MyPhotonPlayerParam> list4;
            JSON_MyPhotonPlayerParam param2;
            List<int> list5;
            List<int> list6;
            int num11;
            List<int> list7;
            PartyData data2;
            int num12;
            List<JSON_MyPhotonPlayerParam> list8;
            JSON_MyPhotonPlayerParam param3;
            MyPhoton.MyRoom room;
            JSON_MyPhotonRoomParam param4;
            int num13;
            int num14;
            VersusRankParam param5;
            VersusRankClassParam param6;
            int num15;
            string str3;
            MyPhoton photon;
            List<JSON_MyPhotonPlayerParam> list9;
            string[] strArray;
            int num16;
            int num17;
            JSON_MyPhotonPlayerParam param7;
            SupportData data3;
            List<int> list10;
            List<string> list11;
            RankingQuestParam param8;
            int num18;
            int num19;
            string str4;
            BtlEndTypes types2;
            bool? nullable;
            <SubmitBattleResult>c__AnonStorey1CD storeycd;
            <SubmitBattleResult>c__AnonStorey1CE storeyce;
            bool? nullable2;
            bool? nullable3;
            num = 0;
            flag = PunMonoSingleton<MyPhoton>.Instance.IsMultiPlay;
            record = this.mBattle.GetQuestRecord();
            types = 0;
            if (record.result != null)
            {
                goto Label_0050;
            }
            types = 2;
            if (this.mRevertQuestNewIfRetire == null)
            {
                goto Label_0071;
            }
            types = 3;
            MonoSingleton<GameManager>.Instance.Player.SetQuestState(quest.name, 0);
            goto Label_0071;
        Label_0050:
            if (record.result != 4)
            {
                goto Label_0063;
            }
            types = 4;
            goto Label_0071;
        Label_0063:
            if (record.result == 1)
            {
                goto Label_0071;
            }
            types = 1;
        Label_0071:
            if (record.result != 1)
            {
                goto Label_0097;
            }
            MonoSingleton<GameManager>.Instance.Player.MarkQuestCleared(this.mCurrentQuest.iname);
        Label_0097:
            if (record.result != 1)
            {
                goto Label_00BD;
            }
            MonoSingleton<GameManager>.Instance.Player.IncrementQuestChallangeNumDaily(this.mCurrentQuest.iname);
        Label_00BD:
            if (record.drops != null)
            {
                goto Label_00D4;
            }
            record.drops = new OInt[0];
        Label_00D4:
            if (record.item_steals != null)
            {
                goto Label_00EB;
            }
            record.item_steals = new OInt[0];
        Label_00EB:
            if (record.gold_steals != null)
            {
                goto Label_0102;
            }
            record.gold_steals = new OInt[0];
        Label_0102:
            numArray = new int[(int) record.drops.Length];
            num2 = 0;
            goto Label_013B;
        Label_0119:
            numArray[num2] = *(&(record.drops[num2]));
            num2 += 1;
        Label_013B:
            if (num2 < ((int) record.drops.Length))
            {
                goto Label_0119;
            }
            numArray2 = new int[(int) record.item_steals.Length];
            num3 = 0;
            goto Label_0183;
        Label_0161:
            numArray2[num3] = *(&(record.item_steals[num3]));
            num3 += 1;
        Label_0183:
            if (num3 < ((int) record.item_steals.Length))
            {
                goto Label_0161;
            }
            numArray3 = new int[(int) record.gold_steals.Length];
            num4 = 0;
            goto Label_01CB;
        Label_01A9:
            numArray3[num4] = *(&(record.gold_steals[num4]));
            num4 += 1;
        Label_01CB:
            if (num4 < ((int) record.gold_steals.Length))
            {
                goto Label_01A9;
            }
            numArray4 = new int[record.bonusCount];
            num5 = 0;
            goto Label_0214;
        Label_01EF:
            numArray4[num5] = ((record.bonusFlags & (1 << (num5 & 0x1f))) == null) ? 0 : 1;
            num5 += 1;
        Label_0214:
            if (num5 < ((int) numArray4.Length))
            {
                goto Label_01EF;
            }
            this.UpdateTrophy();
            manager = MonoSingleton<GameManager>.Instance;
            manager.ServerSyncTrophyExecStart(&str, &str2);
            if (quest.type != 2)
            {
                goto Label_029D;
            }
            player = GlobalVars.SelectedArenaPlayer;
            Network.RequestAPI(new ReqBtlComEnd(player.FUID, player.ArenaRank, MonoSingleton<GameManager>.Instance.Player.ArenaRank, types, numArray, numArray2, numArray3, numArray4, null, record.used_items, new Network.ResponseCallback(this.SubmitArenaResultCallback), 2, str, str2), 0);
            goto Label_0AD8;
        Label_029D:
            if (quest.type != 7)
            {
                goto Label_03AB;
            }
            numArray5 = new int[record.bonusCount];
            num6 = 0;
            goto Label_02ED;
        Label_02BE:
            if (num6 < record.takeoverProgressList.Count)
            {
                goto Label_02D5;
            }
            goto Label_02F8;
        Label_02D5:
            numArray5[num6] = record.takeoverProgressList[num6];
            num6 += 1;
        Label_02ED:
            if (num6 < ((int) numArray5.Length))
            {
                goto Label_02BE;
            }
        Label_02F8:
            num7 = manager.TowerResuponse.round;
            param = manager.TowerResuponse.GetCurrentFloor();
            if (param != null)
            {
                goto Label_032A;
            }
            param = manager.FindTowerFloor(quest.iname);
        Label_032A:
            num8 = (param == null) ? 0 : param.floor;
            Network.RequestAPI(new ReqTowerBtlComEnd(btlid, this.Battle.Player.ToArray(), this.Battle.Enemys.ToArray(), this.Battle.ActionCount, num7, num8, types, this.Battle.Map[0].mRandDeckResult, new Network.ResponseCallback(this.SubmitResultCallback), str, str2, numArray4, numArray5), 0);
            goto Label_0AD8;
        Label_03AB:
            if ((quest.type != 8) && (quest.type != 9))
            {
                goto Label_0566;
            }
            storeycd = new <SubmitBattleResult>c__AnonStorey1CD();
            storeycd.pt = PunMonoSingleton<MyPhoton>.Instance;
            list = this.Battle.GetFinishHp(0);
            list2 = this.Battle.GetFinishHp(1);
            num9 = this.Battle.GetDeadCount(1);
            list3 = new List<int>();
            data = MonoSingleton<GameManager>.Instance.Player.Partys[7];
            num10 = 0;
            goto Label_044B;
        Label_0427:
            list3.Add(PlayerPrefsUtility.GetInt(PlayerPrefsUtility.VERSUS_ID_KEY + ((int) num10), 0));
            num10 += 1;
        Label_044B:
            if (num10 < data.MAX_UNIT)
            {
                goto Label_0427;
            }
            if (manager.IsVSCpuBattle == null)
            {
                goto Label_04CA;
            }
            Network.RequestAPI(new ReqVersusCpuEnd(btlid, types, this.Battle.VersusTurnCount, list.ToArray(), list2.ToArray(), this.Battle.TotalDamages, this.Battle.TotalDamagesTaken, this.Battle.TotalHeal, num9, list3.ToArray(), new Network.ResponseCallback(this.SubmitResultCallback), str, str2), 0);
            goto Label_0561;
        Label_04CA:
            param2 = storeycd.pt.GetMyPlayersStarted().Find(new Predicate<JSON_MyPhotonPlayerParam>(storeycd.<>m__77));
            Network.RequestAPI(new ReqVersusEnd(btlid, types, param2.UID, param2.FUID, this.Battle.VersusTurnCount, list.ToArray(), list2.ToArray(), this.Battle.TotalDamages, this.Battle.TotalDamagesTaken, this.Battle.TotalHeal, num9, list3.ToArray(), new Network.ResponseCallback(this.SubmitResultCallback), GlobalVars.SelectedMultiPlayVersusType, str, str2), 0);
        Label_0561:
            goto Label_0AD8;
        Label_0566:
            if (quest.type != 0x10)
            {
                goto Label_084D;
            }
            storeyce = new <SubmitBattleResult>c__AnonStorey1CE();
            storeyce.pt = PunMonoSingleton<MyPhoton>.Instance;
            list5 = this.Battle.GetFinishHp(0);
            list6 = this.Battle.GetFinishHp(1);
            num11 = this.Battle.GetDeadCount(1);
            list7 = new List<int>();
            data2 = MonoSingleton<GameManager>.Instance.Player.Partys[10];
            num12 = 0;
            goto Label_05FB;
        Label_05D7:
            list7.Add(PlayerPrefsUtility.GetInt(PlayerPrefsUtility.RANKMATCH_ID_KEY + ((int) num12), 0));
            num12 += 1;
        Label_05FB:
            if (num12 < data2.MAX_UNIT)
            {
                goto Label_05D7;
            }
            param3 = storeyce.pt.GetMyPlayersStarted().Find(new Predicate<JSON_MyPhotonPlayerParam>(storeyce.<>m__78));
            manager.Player.RankMatchResult = types;
            if (manager.Player.RankMatchBattlePoint <= 0)
            {
                goto Label_07CA;
            }
            manager.Player.IncrementRankMatchMission(1);
            if (types != null)
            {
                goto Label_07CA;
            }
            manager.Player.IncrementRankMatchMission(2);
            manager.Player.SetMaxProgRankMatchMission(4, manager.Player.RankMatchStreakWin + 1);
            room = storeyce.pt.GetCurrentRoom();
            if (room == null)
            {
                goto Label_07CA;
            }
            param4 = JSON_MyPhotonRoomParam.Parse(room.json);
            num13 = 0;
            if (((param4 == null) || (param4.players == null)) || (((int) param4.players.Length) <= 1))
            {
                goto Label_0728;
            }
            num14 = 0;
            goto Label_0718;
        Label_06D7:
            if (param4.players[num14].playerID == storeyce.pt.GetMyPlayer().playerID)
            {
                goto Label_0712;
            }
            num13 = param4.players[num14].rankmatch_score;
            goto Label_0728;
        Label_0712:
            num14 += 1;
        Label_0718:
            if (num14 < ((int) param4.players.Length))
            {
                goto Label_06D7;
            }
        Label_0728:
            param5 = manager.GetVersusRankParam(manager.RankMatchScheduleId);
            param6 = manager.GetVersusRankClass(manager.RankMatchScheduleId, manager.Player.RankMatchClass);
            if ((param5 == null) || (param6 == null))
            {
                goto Label_07CA;
            }
            num15 = (int) Math.Truncate(((double) param5.WinPointBase) * ((((double) (num13 - manager.Player.RankMatchScore)) * 0.001) + 1.0));
            num15 = Mathf.Clamp(num15, param6.WinPointMin, param6.WinPointMax);
            manager.Player.SetMaxProgRankMatchMission(3, manager.Player.RankMatchScore + num15);
        Label_07CA:
            str3 = manager.Player.GetMissionProgressString();
            Network.RequestAPI(new ReqRankMatchEnd(btlid, types, param3.UID, param3.FUID, this.Battle.VersusTurnCount, list5.ToArray(), list6.ToArray(), this.Battle.TotalDamages, this.Battle.TotalDamagesTaken, this.Battle.TotalHeal, num11, list7.ToArray(), new Network.ResponseCallback(this.SubmitResultCallback), str, str2, str3), 0);
            goto Label_0AD8;
        Label_084D:
            photon = PunMonoSingleton<MyPhoton>.Instance;
            list9 = photon.GetMyPlayersStarted();
            strArray = null;
            if ((GlobalVars.LastQuestResult.Get() != 1) || (list9 == null))
            {
                goto Label_08FA;
            }
            strArray = new string[list9.Count];
            num16 = 0;
            num17 = 0;
            goto Label_08EC;
        Label_0890:
            param7 = list9[num17];
            if (param7 != null)
            {
                goto Label_08A7;
            }
            goto Label_08E6;
        Label_08A7:
            if (param7.playerIndex != photon.MyPlayerIndex)
            {
                goto Label_08BF;
            }
            goto Label_08E6;
        Label_08BF:
            if (string.IsNullOrEmpty(param7.FUID) == null)
            {
                goto Label_08D5;
            }
            goto Label_08E6;
        Label_08D5:
            strArray[num16++] = param7.FUID;
        Label_08E6:
            num17 += 1;
        Label_08EC:
            if (num17 < list9.Count)
            {
                goto Label_0890;
            }
        Label_08FA:
            if (<>f__am$cache10B != null)
            {
                goto Label_0921;
            }
            <>f__am$cache10B = new Predicate<SupportData>(SceneBattle.<SubmitBattleResult>m__79);
        Label_0921:
            data3 = MonoSingleton<GameManager>.Instance.Player.Supports.Find(<>f__am$cache10B);
            if (this.Battle.IsMultiTower == null)
            {
                goto Label_098B;
            }
            list10 = this.Battle.GetFinishHp(0);
            list11 = this.Battle.GetPlayerName();
            Network.RequestAPI(new ReqBtlMultiTwEnd(btlid, num, types, list10.ToArray(), list11.ToArray(), strArray, new Network.ResponseCallback(this.SubmitResultCallback), str, str2), 0);
            goto Label_0AD8;
        Label_098B:
            if ((this.Battle.IsRankingQuest == null) || (record.result != 1))
            {
                goto Label_0A4D;
            }
            param8 = this.Battle.GetRankingQuestParam();
            num18 = 0;
            num19 = 0;
            if (param8.type != 1)
            {
                goto Label_09D4;
            }
            num18 = this.Battle.ActionCount;
        Label_09D4:
            num19 = this.Battle.CalcPlayerUnitsTotalParameter();
            str4 = ReqBtlComEnd.CreateRankingQuestEndParam(num18, num19);
            Network.RequestAPI(new ReqBtlComEnd(btlid, num, types, numArray, numArray2, numArray3, numArray4, strArray, record.used_items, new Network.ResponseCallback(this.SubmitResultCallback), (flag == null) ? 0 : 1, str, str2, (data3 == null) ? 0 : data3.UnitElement, str4, 0, new bool?()), 0);
            goto Label_0AD8;
        Label_0A4D:
            types2 = (flag == null) ? 0 : 1;
            if (quest.type != 15)
            {
                goto Label_0A6C;
            }
            types2 = 3;
        Label_0A6C:
            nullable = new bool?();
            if (quest.type != 3)
            {
                goto Label_0A90;
            }
            nullable = new bool?(GlobalVars.IsSkipQuestDemo);
        Label_0A90:
            Network.RequestAPI(new ReqBtlComEnd(btlid, num, types, numArray, numArray2, numArray3, numArray4, strArray, record.used_items, new Network.ResponseCallback(this.SubmitResultCallback), types2, str, str2, (data3 == null) ? 0 : data3.UnitElement, null, 0, nullable), 0);
        Label_0AD8:
            MonoSingleton<GameManager>.Instance.Player.ResetMissionClearAt();
            return;
        }

        public void SubmitResult()
        {
            char[] chArray1;
            long num;
            string str;
            string[] strArray;
            ItemParam param;
            if (this.mQuestResultSending == null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            this.mQuestResultSending = 1;
            if (Network.Mode != null)
            {
                goto Label_0057;
            }
            num = this.mBattle.BtlID;
            if (this.mCurrentQuest.IsScenario == null)
            {
                goto Label_0045;
            }
            this.SubmitScenarioResult(num);
            goto Label_0052;
        Label_0045:
            this.SubmitBattleResult(num, this.mCurrentQuest);
        Label_0052:
            goto Label_013A;
        Label_0057:
            if (this.mBattle.GetQuestResult() != 1)
            {
                goto Label_012E;
            }
            MonoSingleton<GameManager>.Instance.Player.MarkQuestCleared(this.mCurrentQuest.iname);
            if (this.IsOrdealQuest == null)
            {
                goto Label_012E;
            }
            if (this.mIsFirstPlay == null)
            {
                goto Label_012E;
            }
            this.FirstClearItemId = null;
            if (this.mCurrentQuest.FirstClearItems == null)
            {
                goto Label_012E;
            }
            if (((int) this.mCurrentQuest.FirstClearItems.Length) == null)
            {
                goto Label_012E;
            }
            str = this.mCurrentQuest.FirstClearItems[0];
            if (string.IsNullOrEmpty(str) != null)
            {
                goto Label_012E;
            }
            chArray1 = new char[] { 0x2c };
            strArray = str.Split(chArray1);
            if (strArray == null)
            {
                goto Label_012E;
            }
            if (((int) strArray.Length) == null)
            {
                goto Label_012E;
            }
            this.FirstClearItemId = strArray[0];
            param = MonoSingleton<GameManager>.Instance.GetItemParam(this.FirstClearItemId);
            if (param == null)
            {
                goto Label_0127;
            }
            if (param.type == 0x10)
            {
                goto Label_012E;
            }
        Label_0127:
            this.FirstClearItemId = null;
        Label_012E:
            BattleCore.RemoveSuspendData();
            this.mQuestResultSent = 1;
        Label_013A:
            return;
        }

        private void SubmitResultCallback(WWWResult www)
        {
            this.SubmitResultCallbackImpl(www, 0);
            return;
        }

        private unsafe void SubmitResultCallbackImpl(WWWResult www, bool isArenaType)
        {
            WebAPI.JSON_BodyResponse<Json_PlayerDataAll> response;
            JSON_QuestProgress[] progressArray;
            GameManager manager;
            TowerResuponse resuponse;
            WebAPI.JSON_BodyResponse<Json_TowerBtlResult> response2;
            QuestParam param;
            BattleCore.Record record;
            int num;
            GameManager manager2;
            WebAPI.JSON_BodyResponse<Json_VersusEndEnd> response3;
            WebAPI.JSON_BodyResponse<Json_VersusEndEnd> response4;
            WebAPI.JSON_BodyResponse<Json_VersusEndEnd> response5;
            GameManager manager3;
            WebAPI.JSON_BodyResponse<Json_BtlComEnd> response6;
            ItemParam param2;
            int num2;
            ConceptCardData data;
            List<ConceptCardData> list;
            int num3;
            GameManager manager4;
            VersusCoinParam param3;
            int num4;
            int num5;
            int num6;
            BattleCore.Record record2;
            int num7;
            Exception exception;
            WebAPI.JSON_BodyResponse<Json_ArenaPlayerDataAll> response7;
            ArenaBattleResponse response8;
            int num8;
            int num9;
            BattleCore.Record record3;
            Network.EErrCode code;
            if (FlowNode_Network.HasCommonError(www) == null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            if ((this.Battle.QuestType != 7) || (TowerErrorHandle.Error(null) == null))
            {
                goto Label_0029;
            }
            return;
        Label_0029:
            if (Network.IsError == null)
            {
                goto Label_0093;
            }
            code = Network.ErrCode;
            switch ((code - 0xf3c))
            {
                case 0:
                    goto Label_0070;

                case 1:
                    goto Label_0076;

                case 2:
                    goto Label_0076;
            }
            if (code == 0xdac)
            {
                goto Label_0070;
            }
            if (code == 0xedf)
            {
                goto Label_0076;
            }
            goto Label_008D;
        Label_0070:
            FlowNode_Network.Failed();
            return;
        Label_0076:
            if (isArenaType == null)
            {
                goto Label_0087;
            }
            this.OnColoRankModify();
            goto Label_008C;
        Label_0087:
            FlowNode_Network.Failed();
        Label_008C:
            return;
        Label_008D:
            FlowNode_Network.Retry();
            return;
        Label_0093:
            response = null;
            progressArray = null;
            if (this.Battle.QuestType != 7)
            {
                goto Label_02A7;
            }
            manager = MonoSingleton<GameManager>.Instance;
            resuponse = manager.TowerResuponse;
            response2 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_TowerBtlResult>>(&www.text);
            resuponse.Deserialize(response2.body.pdeck);
            resuponse.arrived_num = response2.body.arrived_num;
            resuponse.clear = response2.body.clear;
            if (response2.body.ranking == null)
            {
                goto Label_01F0;
            }
            resuponse.speedRank = response2.body.ranking.spd_rank;
            resuponse.techRank = response2.body.ranking.tec_rank;
            resuponse.turn_num = response2.body.ranking.turn_num;
            resuponse.died_num = response2.body.ranking.died_num;
            resuponse.retire_num = response2.body.ranking.retire_num;
            resuponse.recover_num = response2.body.ranking.recovery_num;
            resuponse.spd_score = response2.body.ranking.spd_score;
            resuponse.tec_score = response2.body.ranking.tec_score;
            resuponse.ret_score = response2.body.ranking.ret_score;
            resuponse.rcv_score = response2.body.ranking.rcv_score;
        Label_01F0:
            param = manager.FindQuest(this.Battle.QuestID);
            if ((param == null) || (param.HasMission() == null))
            {
                goto Label_0267;
            }
            record = this.Battle.GetQuestRecord();
            if (record.takeoverProgressList == null)
            {
                goto Label_0267;
            }
            num = 0;
            goto Label_0254;
        Label_0237:
            param.SetMissionValue(num, record.takeoverProgressList[num]);
            num += 1;
        Label_0254:
            if (num < record.takeoverProgressList.Count)
            {
                goto Label_0237;
            }
        Label_0267:
            if (response2.body.artis == null)
            {
                goto Label_028F;
            }
            MonoSingleton<GameManager>.Instance.Deserialize(response2.body.artis, 0);
        Label_028F:
            response = new WebAPI.JSON_BodyResponse<Json_PlayerDataAll>();
            response.body = response2.body;
            goto Label_05BF;
        Label_02A7:
            if ((GlobalVars.SelectedMultiPlayVersusType != 1) || (this.Battle.IsMultiVersus == null))
            {
                goto Label_034C;
            }
            manager2 = MonoSingleton<GameManager>.Instance;
            response3 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_VersusEndEnd>>(&www.text);
            manager2.SetVersusWinCount(response3.body.wincnt);
            manager2.SetVersuTowerEndParam(response3.body.rankup == 1, response3.body.win_bonus == 1, response3.body.key, response3.body.floor, response3.body.arravied);
            response = new WebAPI.JSON_BodyResponse<Json_PlayerDataAll>();
            response.body = response3.body;
            goto Label_05BF;
        Label_034C:
            if ((GlobalVars.SelectedMultiPlayVersusType != 3) || (this.Battle.IsMultiVersus == null))
            {
                goto Label_038D;
            }
            response4 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_VersusEndEnd>>(&www.text);
            response = new WebAPI.JSON_BodyResponse<Json_PlayerDataAll>();
            response.body = response4.body;
            goto Label_05BF;
        Label_038D:
            if ((GlobalVars.SelectedMultiPlayVersusType == 1) || (this.Battle.IsMultiVersus == null))
            {
                goto Label_03F5;
            }
            response5 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_VersusEndEnd>>(&www.text);
            manager3 = MonoSingleton<GameManager>.Instance;
            if (manager3.IsVSCpuBattle != null)
            {
                goto Label_03DD;
            }
            manager3.SetVersusWinCount(response5.body.wincnt);
        Label_03DD:
            response = new WebAPI.JSON_BodyResponse<Json_PlayerDataAll>();
            response.body = response5.body;
            goto Label_05BF;
        Label_03F5:
            response6 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_BtlComEnd>>(&www.text);
            MonoSingleton<GameManager>.Instance.Player.RegistTrophyStateDictByProgExtra(response6.body.trophyprogs);
            progressArray = response6.body.quests;
            if (response6.body.quest_ranking == null)
            {
                goto Label_0481;
            }
            this.mIsRankingQuestNewScore = response6.body.quest_ranking.IsNewScore;
            this.mRankingQuestNewRank = response6.body.quest_ranking.rank;
            this.mIsRankingQuestJoinReward = response6.body.quest_ranking.IsJoinReward;
        Label_0481:
            this.FirstClearItemId = null;
            if ((response6.body.fclr_items == null) || (((int) response6.body.fclr_items.Length) == null))
            {
                goto Label_04F3;
            }
            this.FirstClearItemId = response6.body.fclr_items[0].iname;
            param2 = MonoSingleton<GameManager>.Instance.GetItemParam(this.FirstClearItemId);
            if ((param2 != null) && (param2.type == 0x10))
            {
                goto Label_04F3;
            }
            this.FirstClearItemId = null;
        Label_04F3:
            if (response6.body.cards == null)
            {
                goto Label_058D;
            }
            num2 = 0;
            goto Label_0578;
        Label_050C:
            GlobalVars.IsDirtyConceptCardData.Set(1);
            if (response6.body.cards[num2].IsGetUnit == null)
            {
                goto Label_0572;
            }
            FlowNode_ConceptCardGetUnit.AddConceptCardData(ConceptCardData.CreateConceptCardDataForDisplay(response6.body.cards[num2].iname));
            this.mBattle.AddReward(4, response6.body.cards[num2].get_unit);
        Label_0572:
            num2 += 1;
        Label_0578:
            if (num2 < ((int) response6.body.cards.Length))
            {
                goto Label_050C;
            }
        Label_058D:
            this.m_IsCardSendMail = (response6.body.is_mail_cards != 1) ? 0 : 1;
            response = new WebAPI.JSON_BodyResponse<Json_PlayerDataAll>();
            response.body = response6.body;
        Label_05BF:
            if (response.body != null)
            {
                goto Label_05D0;
            }
            FlowNode_Network.Retry();
            return;
        Label_05D0:
            list = new List<ConceptCardData>();
            num3 = 0;
            goto Label_065C;
        Label_05DF:
            if (this.Battle.Units[num3] == null)
            {
                goto Label_0656;
            }
            if (this.Battle.Units[num3].UnitData.ConceptCard == null)
            {
                goto Label_0656;
            }
            if (this.Battle.Units[num3].IsPartyMember == null)
            {
                goto Label_0656;
            }
            list.Add(this.Battle.Units[num3].UnitData.ConceptCard);
        Label_0656:
            num3 += 1;
        Label_065C:
            if (num3 < this.Battle.Units.Count)
            {
                goto Label_05DF;
            }
        Label_0673:
            try
            {
                manager4 = MonoSingleton<GameManager>.Instance;
                param3 = manager4.GetVersusCoinParam(this.CurrentQuest.iname);
                num4 = manager4.Player.MultiCoin;
                num5 = 0;
                if (param3 == null)
                {
                    goto Label_06BE;
                }
                num5 = MonoSingleton<GameManager>.Instance.Player.GetItemAmount(param3.coin_iname);
            Label_06BE:
                manager4.Deserialize(response.body.player);
                manager4.Deserialize(response.body.units);
                manager4.Deserialize(response.body.items);
                if (progressArray == null)
                {
                    goto Label_0706;
                }
                MonoSingleton<GameManager>.Instance.Deserialize(progressArray);
            Label_0706:
                if (response.body.mails == null)
                {
                    goto Label_072C;
                }
                MonoSingleton<GameManager>.Instance.Deserialize(response.body.mails);
            Label_072C:
                if (response.body.fuids == null)
                {
                    goto Label_0784;
                }
                if (this.mCurrentQuest.type == 1)
                {
                    goto Label_076F;
                }
                if (this.mCurrentQuest.type == 14)
                {
                    goto Label_076F;
                }
                if (this.mCurrentQuest.IsMultiTower == null)
                {
                    goto Label_0784;
                }
            Label_076F:
                MonoSingleton<GameManager>.Instance.Deserialize(response.body.fuids);
            Label_0784:
                num6 = MonoSingleton<GameManager>.Instance.Player.MultiCoin;
                if (this.Battle.IsMultiPlay == null)
                {
                    goto Label_07F3;
                }
                record2 = this.Battle.GetQuestRecord();
                record2.multicoin = num6 - num4;
                if (param3 == null)
                {
                    goto Label_07F3;
                }
                num7 = MonoSingleton<GameManager>.Instance.Player.GetItemAmount(param3.coin_iname);
                record2.pvpcoin = num7 - num5;
            Label_07F3:
                goto Label_0810;
            }
            catch (Exception exception1)
            {
            Label_07F8:
                exception = exception1;
                DebugUtility.LogException(exception);
                FlowNode_Network.Failed();
                goto Label_09BF;
            }
        Label_0810:
            if (isArenaType == null)
            {
                goto Label_085E;
            }
            response7 = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<Json_ArenaPlayerDataAll>>(&www.text);
            if (response7.body != null)
            {
                goto Label_0836;
            }
            FlowNode_Network.Retry();
            return;
        Label_0836:
            response8 = new ArenaBattleResponse();
            response8.Deserialize(response7.body.btlres);
            GlobalVars.ResultArenaBattleResponse = response8;
            this.mArenaSubmitMode = 1;
        Label_085E:
            if (this.mBattle.IsAutoBattle == null)
            {
                goto Label_0873;
            }
            GameUtility.SetDefaultSleepSetting();
        Label_0873:
            if (this.IsPlayingMultiQuest == null)
            {
                goto Label_088F;
            }
            this.mFirstContact = response.body.first_contact;
        Label_088F:
            MonoSingleton<GameManager>.Instance.ServerSyncTrophyExecEnd(www);
            this.mQuestResultSent = 1;
            Network.RemoveAPI();
            this.TrophyLvupCheck();
            num8 = 0;
            goto Label_0973;
        Label_08B4:
            if (response.body.units == null)
            {
                goto Label_096D;
            }
            num9 = 0;
            goto Label_0959;
        Label_08CC:
            if (response.body.units[num9].concept_card == null)
            {
                goto Label_0953;
            }
            if (list[num8].UniqueID != response.body.units[num9].concept_card.iid)
            {
                goto Label_0953;
            }
            MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustMaxTrophy(response.body.units[num9].concept_card.iname, response.body.units[num9].concept_card.trust);
        Label_0953:
            num9 += 1;
        Label_0959:
            if (num9 < ((int) response.body.units.Length))
            {
                goto Label_08CC;
            }
        Label_096D:
            num8 += 1;
        Label_0973:
            if (num8 < list.Count)
            {
                goto Label_08B4;
            }
            if (this.mIsForceEndQuest == null)
            {
                goto Label_09BA;
            }
            record3 = this.mBattle.GetQuestRecord();
            MonoSingleton<GameManager>.Instance.Player.SetQuestMissionFlags(this.mCurrentQuest.iname, record3.bonusFlags);
        Label_09BA:
            BattleCore.RemoveSuspendData();
        Label_09BF:
            return;
        }

        private void SubmitScenarioResult(long btlid)
        {
            bool? nullable;
            Network.RequestAPI(new ReqBtlComEnd(btlid, 0, 0, null, null, null, null, null, null, new Network.ResponseCallback(this.SubmitResultCallback), 0, null, null, 0, null, 0, new bool?()), 0);
            MonoSingleton<GameManager>.Instance.Player.MarkQuestCleared(this.mCurrentQuest.iname);
            return;
        }

        private void ToggleBattleScene(bool visible, string sceneName)
        {
            BattleSceneSettings settings;
            int num;
            RenderPipeline pipeline;
            if (visible == null)
            {
                goto Label_0077;
            }
            settings = null;
            if (string.IsNullOrEmpty(sceneName) != null)
            {
                goto Label_005D;
            }
            num = 0;
            goto Label_004C;
        Label_001A:
            if ((this.mBattleScenes[num].get_name() == sceneName) == null)
            {
                goto Label_0048;
            }
            settings = this.mBattleScenes[num];
            goto Label_005D;
        Label_0048:
            num += 1;
        Label_004C:
            if (num < this.mBattleScenes.Count)
            {
                goto Label_001A;
            }
        Label_005D:
            if ((settings == null) == null)
            {
                goto Label_0070;
            }
            settings = this.mDefaultBattleScene;
        Label_0070:
            this.mBattleSceneRoot = settings;
        Label_0077:
            if ((this.mBattleSceneRoot != null) == null)
            {
                goto Label_0099;
            }
            this.mBattleSceneRoot.get_gameObject().SetActive(visible);
        Label_0099:
            if ((this.mTacticsSceneRoot != null) == null)
            {
                goto Label_00BE;
            }
            this.mTacticsSceneRoot.get_gameObject().SetActive(visible == 0);
        Label_00BE:
            pipeline = Camera.get_main().GetComponent<RenderPipeline>();
            if ((pipeline != null) == null)
            {
                goto Label_00DF;
            }
            pipeline.EnableVignette = visible == 0;
        Label_00DF:
            return;
        }

        private unsafe void ToggleJumpSpots(bool visible)
        {
            int num;
            KeyValuePair<Unit, GameObject> pair;
            num = 0;
            goto Label_0025;
        Label_0007:
            pair = this.mJumpSpotEffects[num];
            &pair.Value.SetActive(visible);
            num += 1;
        Label_0025:
            if (num < this.mJumpSpotEffects.Count)
            {
                goto Label_0007;
            }
            return;
        }

        private void ToggleRenkeiAura(bool visible)
        {
            List<Unit> list;
            TacticsUnitController controller;
            int num;
            int num2;
            if (visible == null)
            {
                goto Label_0098;
            }
            list = this.mBattle.HelperUnits;
            if (list.Count <= 0)
            {
                goto Label_0098;
            }
            controller = this.FindUnitController(this.mBattle.CurrentUnit);
            if ((controller != null) == null)
            {
                goto Label_0048;
            }
            controller.SetRenkeiAura(this.mRenkeiAuraEffect);
        Label_0048:
            num = 0;
            goto Label_0086;
        Label_004F:
            if (list.Contains(this.mTacticsUnits[num].Unit) == null)
            {
                goto Label_0082;
            }
            this.mTacticsUnits[num].SetRenkeiAura(this.mRenkeiAuraEffect);
        Label_0082:
            num += 1;
        Label_0086:
            if (num < this.mTacticsUnits.Count)
            {
                goto Label_004F;
            }
            return;
        Label_0098:
            num2 = 0;
            goto Label_00B4;
        Label_009F:
            this.mTacticsUnits[num2].StopRenkeiAura();
            num2 += 1;
        Label_00B4:
            if (num2 < this.mTacticsUnits.Count)
            {
                goto Label_009F;
            }
            return;
        }

        private void ToggleUserInterface(bool isEnabled)
        {
            string[] textArray1;
            string[] strArray;
            int num;
            Canvas canvas;
            BattleCameraControl control;
            List<Unit> list;
            int num2;
            TacticsUnitController controller;
            textArray1 = new string[] { this.mBattleUI.QueueObjectID, this.mBattleUI.QuestStatusID, this.mBattleUI.MapHeightID, this.mBattleUI.ElementDiagram, this.mBattleUI.FukanCameraID };
            strArray = textArray1;
            num = 0;
            goto Label_0074;
        Label_0054:
            canvas = GameObjectID.FindGameObject<Canvas>(strArray[num]);
            if ((canvas != null) == null)
            {
                goto Label_0070;
            }
            canvas.set_enabled(isEnabled);
        Label_0070:
            num += 1;
        Label_0074:
            if (num < ((int) strArray.Length))
            {
                goto Label_0054;
            }
            control = GameObjectID.FindGameObject<BattleCameraControl>(this.mBattleUI.CameraControllerID);
            if ((control != null) == null)
            {
                goto Label_00A1;
            }
            control.SetDisp(isEnabled);
        Label_00A1:
            if (this.Battle.IsMultiVersus == null)
            {
                goto Label_0107;
            }
            list = this.Battle.Units;
            if (list == null)
            {
                goto Label_0107;
            }
            num2 = 0;
            goto Label_00F9;
        Label_00CD:
            controller = this.FindUnitController(list[num2]);
            if ((controller != null) == null)
            {
                goto Label_00F3;
            }
            controller.ShowVersusCursor(isEnabled);
        Label_00F3:
            num2 += 1;
        Label_00F9:
            if (num2 < list.Count)
            {
                goto Label_00CD;
            }
        Label_0107:
            return;
        }

        private void TriggerWinEvent()
        {
            BattleCore.QuestResult result;
            BattleCore.QuestResult result2;
            if ((this.mEventScript != null) == null)
            {
                goto Label_008E;
            }
            result2 = this.Battle.GetQuestResult();
            if (result2 == 1)
            {
                goto Label_0032;
            }
            if (result2 == 2)
            {
                goto Label_0060;
            }
            goto Label_008E;
        Label_0032:
            this.mEventSequence = this.mEventScript.OnQuestWin();
            if ((this.mEventSequence != null) == null)
            {
                goto Label_008E;
            }
            this.GotoState<State_WaitEvent<State_PreQuestResult>>();
            return;
            goto Label_008E;
        Label_0060:
            this.mEventSequence = this.mEventScript.OnQuestLose();
            if ((this.mEventSequence != null) == null)
            {
                goto Label_008E;
            }
            this.GotoState<State_WaitEvent<State_PreQuestResult>>();
            return;
        Label_008E:
            this.GotoState<State_PreQuestResult>();
            return;
        }

        private void TrophyLvupCheck()
        {
            PlayerData data;
            data = MonoSingleton<GameManager>.Instance.Player;
            if (this.mStartPlayerLevel >= data.Lv)
            {
                goto Label_002F;
            }
            data.OnPlayerLevelChange(data.Lv - this.mStartPlayerLevel);
        Label_002F:
            return;
        }

        public unsafe EUnitDirection UnitDirectionFromPosition(Vector3 self, Vector3 target, SkillParam skill_param)
        {
            IntVector2 vector;
            IntVector2 vector2;
            Grid grid;
            Grid grid2;
            vector = this.CalcCoord(self);
            vector2 = this.CalcCoord(target);
            grid = this.mBattle.CurrentMap[&vector.x, &vector.y];
            grid2 = this.mBattle.CurrentMap[&vector2.x, &vector2.y];
            if (skill_param == null)
            {
                goto Label_006F;
            }
            if (skill_param.select_scope != 12)
            {
                goto Label_006F;
            }
            return this.mBattle.UnitDirectionFromGridLaserTwin(grid, grid2);
        Label_006F:
            return this.mBattle.UnitDirectionFromGrid(grid, grid2);
        }

        private void Update()
        {
            this.UpdateMultiPlayer();
            this.UpdateAudiencePlayer();
            if (this.mState == null)
            {
                goto Label_0033;
            }
            if (this.Battle.ResumeState == 2)
            {
                goto Label_0033;
            }
            this.mState.Update();
        Label_0033:
            this.UpdateCameraControl(0);
            MyEncrypt.EncryptCount = 0;
            MyEncrypt.DecryptCount = 0;
            if (this.mDownloadTutorialAssets == null)
            {
                goto Label_0084;
            }
            if (GameUtility.Config_UseAssetBundles.Value == null)
            {
                goto Label_0084;
            }
            if (MonoSingleton<GameManager>.Instance.HasTutorialDLAssets == null)
            {
                goto Label_0084;
            }
            if (AssetDownloader.isDone == null)
            {
                goto Label_0084;
            }
            MonoSingleton<GameManager>.Instance.PartialDownloadTutorialAssets();
        Label_0084:
            if (this.CurrentQuest == null)
            {
                goto Label_00A6;
            }
            if (this.CurrentQuest.type == 3)
            {
                goto Label_00A6;
            }
            GlobalVars.IsTutorialEnd = 1;
        Label_00A6:
            return;
        }

        private void UpdateAudiencePlayer()
        {
            GameManager manager;
            int num;
            manager = MonoSingleton<GameManager>.Instance;
            if (manager.AudienceMode != null)
            {
                goto Label_0012;
            }
            return;
        Label_0012:
            if (this.Battle.MultiFinishLoad != null)
            {
                goto Label_0023;
            }
            return;
        Label_0023:
            if (this.QuestStart != null)
            {
                goto Label_002F;
            }
            return;
        Label_002F:
            this.RecvEventAudience(0);
            this.ShowThinking();
            this.UpdateMultiBattleInfo();
            num = 0;
            goto Label_0060;
        Label_004A:
            this.mMultiPlayerUnit[num].Update(this);
            num += 1;
        Label_0060:
            if (num < this.mMultiPlayerUnit.Count)
            {
                goto Label_004A;
            }
            if (manager.AudienceManager.IsEnd == null)
            {
                goto Label_00CE;
            }
            if (this.Battle.RemainVersusTurnCount == null)
            {
                goto Label_00CE;
            }
            if (this.IsInState<State_AudienceForceEnd>() != null)
            {
                goto Label_00CE;
            }
            if (this.IsInState<State_AudienceEnd>() != null)
            {
                goto Label_00CE;
            }
            if (this.IsInState<State_AudienceRetire>() != null)
            {
                goto Label_00CE;
            }
            if (this.IsInState<State_ExitQuest>() != null)
            {
                goto Label_00CE;
            }
            if (this.CheckAudienceResult() != null)
            {
                goto Label_00CE;
            }
            this.GotoState<State_AudienceForceEnd>();
        Label_00CE:
            return;
        }

        private void UpdateBGM()
        {
            if (string.IsNullOrEmpty(this.mBattle.CurrentMap.BGMName) == null)
            {
                goto Label_0025;
            }
            this.StopBGM();
            goto Label_002B;
        Label_0025:
            this.PlayBGM();
        Label_002B:
            return;
        }

        private void UpdateCameraControl(bool immediate)
        {
            Camera camera;
            Transform transform;
            GameSettings settings;
            bool flag;
            float num;
            float num2;
            if (this.isBattleCamera == null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            if (this.isUpView == null)
            {
                goto Label_001F;
            }
            this.UpdateCameraControlUpView(immediate);
            return;
        Label_001F:
            camera = Camera.get_main();
            transform = ((camera != null) == null) ? null : camera.get_transform();
            settings = GameSettings.Instance;
            if (((this.mTacticsSceneRoot != null) == null) || (this.mTacticsSceneRoot.get_gameObject().get_activeInHierarchy() == null))
            {
                goto Label_007F;
            }
            camera.set_fieldOfView(GameSettings.Instance.GameCamera_TacticsSceneFOV);
            goto Label_00B5;
        Label_007F:
            if (((this.mBattleSceneRoot != null) == null) || (this.mBattleSceneRoot.get_gameObject().get_activeInHierarchy() == null))
            {
                goto Label_00B5;
            }
            camera.set_fieldOfView(GameSettings.Instance.GameCamera_BattleSceneFOV);
        Label_00B5:
            if ((ObjectAnimator.Get(camera).isMoving != null) || (this.mUpdateCameraPosition == null))
            {
                goto Label_01BC;
            }
            flag = this.UpdateCameraRotationInterp(immediate);
            if ((this.mTouchController != null) == null)
            {
                goto Label_0108;
            }
            this.UpdateCameraRotationTouchMove(flag == 0, immediate);
            this.UpdateCameraPositionTouchMove(transform.get_right(), transform.get_forward());
        Label_0108:
            this.UpdateCameraPositionInterp(immediate);
            if (this.m_TargetCameraDistanceInterp == null)
            {
                goto Label_0190;
            }
            num = (immediate == null) ? (Time.get_deltaTime() * 8f) : 1f;
            num2 = this.m_TargetCameraDistance;
            this.m_TargetCamera.CameraDistance = Mathf.Lerp(this.m_TargetCamera.CameraDistance, num2, num);
            if (Mathf.Abs(num2 - this.m_TargetCamera.CameraDistance) > 0.01f)
            {
                goto Label_0190;
            }
            this.m_TargetCamera.CameraDistance = num2;
            this.m_TargetCameraDistanceInterp = 0;
        Label_0190:
            this.m_TargetCamera.SetPositionYaw(this.m_CameraPosition + (Vector3.get_up() * settings.GameCamera_UnitHeightOffset), this.m_CameraAngle);
        Label_01BC:
            this.OnCameraForcus();
            return;
        }

        private void UpdateCameraControlUpView(bool immediate)
        {
            Camera camera;
            Transform transform;
            GameSettings settings;
            float num;
            float num2;
            camera = Camera.get_main();
            transform = ((camera != null) == null) ? null : camera.get_transform();
            settings = GameSettings.Instance;
            camera.set_fieldOfView(GameSettings.Instance.GameCamera_TacticsSceneFOV);
            if (this.mUpdateCameraPosition == null)
            {
                goto Label_0130;
            }
            if (((this.mTouchController != null) == null) || (ObjectAnimator.Get(camera).isMoving != null))
            {
                goto Label_0074;
            }
            this.UpdateCameraPositionTouchMove(transform.get_right(), transform.get_up());
        Label_0074:
            this.UpdateCameraPositionInterp(immediate);
            if (this.m_TargetCameraDistanceInterp == null)
            {
                goto Label_0100;
            }
            num = (immediate == null) ? (Time.get_deltaTime() * 8f) : 1f;
            num2 = 5f + this.m_TargetCameraDistance;
            this.m_TargetCamera.CameraDistance = Mathf.Lerp(this.m_TargetCamera.CameraDistance, num2, num);
            if (Mathf.Abs(num2 - this.m_TargetCamera.CameraDistance) > 0.01f)
            {
                goto Label_0100;
            }
            this.m_TargetCamera.CameraDistance = num2;
            this.m_TargetCameraDistanceInterp = 0;
        Label_0100:
            this.m_TargetCamera.SetPositionYawPitch(this.m_CameraPosition + (Vector3.get_up() * settings.GameCamera_UnitHeightOffset), 90f, 270f);
        Label_0130:
            this.OnCameraForcus();
            return;
        }

        private unsafe bool UpdateCameraPositionInterp(bool immediate)
        {
            float num;
            Vector3 vector;
            num = (immediate == null) ? (Time.get_deltaTime() * 8f) : 1f;
            if (this.m_TargetCameraPositionInterp == null)
            {
                goto Label_0077;
            }
            this.m_CameraPosition = Vector3.Lerp(this.m_CameraPosition, this.m_TargetCameraPosition, num);
            vector = this.m_TargetCameraPosition - this.m_CameraPosition;
            if (&vector.get_magnitude() > 0.01f)
            {
                goto Label_0075;
            }
            this.m_CameraPosition = this.m_TargetCameraPosition;
            this.m_TargetCameraPositionInterp = 0;
        Label_0075:
            return 1;
        Label_0077:
            return 0;
        }

        private unsafe bool UpdateCameraPositionTouchMove(Vector3 xAxis, Vector3 yAxis)
        {
            Camera camera;
            bool flag;
            Vector2 vector;
            Vector3 vector2;
            Vector3 vector3;
            Vector2 vector4;
            camera = Camera.get_main();
            flag = 0;
            if (this.m_AllowCameraTranslation == null)
            {
                goto Label_01E3;
            }
            if (&this.mTouchController.Velocity.get_magnitude() <= 0f)
            {
                goto Label_01E3;
            }
            if (this.IsControlBattleUI(4) == null)
            {
                goto Label_01E3;
            }
            vector = this.mTouchController.Velocity;
            &yAxis.y = 0f;
            &yAxis.Normalize();
            &xAxis.y = 0f;
            &xAxis.Normalize();
            vector2 = camera.WorldToScreenPoint(this.m_CameraPosition);
            vector4 = camera.WorldToScreenPoint((this.m_CameraPosition + xAxis) + yAxis) - vector2;
            &vector.x /= Mathf.Abs(&vector4.x);
            &vector.y /= Mathf.Abs(&vector4.y);
            &vector..ctor((&xAxis.x * &vector.x) + (&yAxis.x * &vector.y), (&xAxis.z * &vector.x) + (&yAxis.z * &vector.y));
            &this.m_CameraPosition.x -= &vector.x;
            &this.m_CameraPosition.z -= &vector.y;
            &this.m_CameraPosition.x = Mathf.Clamp(&this.m_CameraPosition.x, 0.1f, ((float) this.mBattle.CurrentMap.Width) - 0.1f);
            &this.m_CameraPosition.z = Mathf.Clamp(&this.m_CameraPosition.z, 0.1f, ((float) this.mBattle.CurrentMap.Height) - 0.1f);
            &this.m_CameraPosition.y = this.CalcHeight(&this.m_CameraPosition.x, &this.m_CameraPosition.z);
            flag = 1;
        Label_01E3:
            this.mTouchController.Velocity = Vector2.get_zero();
            return flag;
        }

        private bool UpdateCameraRotationInterp(bool immediate)
        {
            float num;
            if (this.m_TargetCameraAngleInterp == null)
            {
                goto Label_008A;
            }
            if (immediate == null)
            {
                goto Label_0022;
            }
            this.m_TargetCameraAngleTime = this.m_TargetCameraAngleTimeMax;
            goto Label_003F;
        Label_0022:
            this.m_TargetCameraAngleTime = Mathf.Min(this.m_TargetCameraAngleTime + Time.get_deltaTime(), this.m_TargetCameraAngleTimeMax);
        Label_003F:
            num = Mathf.Sin(1.570796f * (this.m_TargetCameraAngleTime / this.m_TargetCameraAngleTimeMax));
            this.m_CameraAngle = Mathf.Lerp(this.m_TargetCameraAngleStart, this.m_TargetCameraAngle, num);
            if (this.m_TargetCameraAngleTime < this.m_TargetCameraAngleTimeMax)
            {
                goto Label_0088;
            }
            this.m_TargetCameraAngleInterp = 0;
        Label_0088:
            return 1;
        Label_008A:
            return 0;
        }

        private unsafe bool UpdateCameraRotationTouchMove(bool isEnable, bool immediate)
        {
            bool flag;
            float num;
            float num2;
            float num3;
            float num4;
            float num5;
            float num6;
            float num7;
            flag = 0;
            if (((isEnable == null) || (this.m_AllowCameraRotation == null)) || (this.IsControlBattleUI(4) == null))
            {
                goto Label_0238;
            }
            num = (1f / ((float) Screen.get_width())) * 180f;
            num2 = -&this.mTouchController.AngularVelocity.x * num;
            if (this.isNewCamera != null)
            {
                goto Label_01DE;
            }
            num3 = GameSettings.Instance.GameCamera_YawSoftLimit;
            num4 = 2f;
            if ((this.m_CameraAngle >= this.m_CameraYawMin) || (num2 >= 0f))
            {
                goto Label_00AD;
            }
            num5 = Mathf.Pow(1f - Mathf.Clamp01(-(this.m_CameraAngle - this.m_CameraYawMin) / num3), num4);
            num2 *= num5;
            goto Label_00F1;
        Label_00AD:
            if ((this.m_CameraAngle <= this.m_CameraYawMax) || (num2 <= 0f))
            {
                goto Label_00F1;
            }
            num6 = Mathf.Pow(1f - Mathf.Clamp01((this.m_CameraAngle - this.m_CameraYawMax) / num3), num4);
            num2 *= num6;
        Label_00F1:
            this.m_CameraAngle += num2;
            if (SRPG_TouchInputModule.IsMultiTouching != null)
            {
                goto Label_0236;
            }
            num7 = (immediate == null) ? (Time.get_deltaTime() * 10f) : 1f;
            if (this.m_CameraAngle >= this.m_CameraYawMin)
            {
                goto Label_0182;
            }
            if (Mathf.Abs(this.m_CameraAngle - this.m_CameraYawMin) >= 0.01f)
            {
                goto Label_0164;
            }
            this.m_CameraAngle = this.m_CameraYawMin;
            goto Label_017D;
        Label_0164:
            this.m_CameraAngle = Mathf.Lerp(this.m_CameraAngle, this.m_CameraYawMin, num7);
        Label_017D:
            goto Label_01D9;
        Label_0182:
            if (this.m_CameraAngle <= this.m_CameraYawMax)
            {
                goto Label_0236;
            }
            if (Mathf.Abs(this.m_CameraAngle - this.m_CameraYawMax) >= 0.01f)
            {
                goto Label_01C0;
            }
            this.m_CameraAngle = this.m_CameraYawMax;
            goto Label_01D9;
        Label_01C0:
            this.m_CameraAngle = Mathf.Lerp(this.m_CameraAngle, this.m_CameraYawMax, num7);
        Label_01D9:
            goto Label_0236;
        Label_01DE:
            this.m_CameraAngle += num2;
            if (this.isFullRotationCamera != null)
            {
                goto Label_0236;
            }
            if (this.m_CameraAngle >= this.m_CameraYawMin)
            {
                goto Label_0219;
            }
            this.m_CameraAngle = this.m_CameraYawMin;
            goto Label_0236;
        Label_0219:
            if (this.m_CameraAngle <= this.m_CameraYawMax)
            {
                goto Label_0236;
            }
            this.m_CameraAngle = this.m_CameraYawMax;
        Label_0236:
            flag = 1;
        Label_0238:
            this.mTouchController.AngularVelocity = Vector2.get_zero();
            return flag;
        }

        private unsafe void UpdateGoodJob()
        {
            bool flag;
            MultiPlayInput input;
            MultiPlayRecvData data;
            List<MultiPlayRecvData>.Enumerator enumerator;
            int num;
            int num2;
            int num3;
            int num4;
            Vector3 vector;
            BattleStamp stamp;
            Sprite sprite;
            GameObject obj2;
            if (this.mSetupGoodJob != null)
            {
                goto Label_000C;
            }
            return;
        Label_000C:
            if (this.mGoodJobWait <= 0f)
            {
                goto Label_002E;
            }
            this.mGoodJobWait -= Time.get_deltaTime();
        Label_002E:
            if ((((this.mBattleUI_MultiPlay != null) == null) ? 0 : this.mBattleUI_MultiPlay.StampWindowIsOpened) == null)
            {
                goto Label_0093;
            }
            if (this.mOnGridClick != null)
            {
                goto Label_0071;
            }
            this.mOnGridClick = new GridClickEvent(this.OnGoodJobClickGrid);
        Label_0071:
            if (this.mOnUnitClick != null)
            {
                goto Label_00D9;
            }
            this.mOnUnitClick = new UnitClickEvent(this.OnGoodJobClickUnit);
            goto Label_00D9;
        Label_0093:
            if ((this.mOnGridClick == new GridClickEvent(this.OnGoodJobClickGrid)) == null)
            {
                goto Label_00B6;
            }
            this.mOnGridClick = null;
        Label_00B6:
            if ((this.mOnUnitClick == new UnitClickEvent(this.OnGoodJobClickUnit)) == null)
            {
                goto Label_00D9;
            }
            this.mOnUnitClick = null;
        Label_00D9:
            input = new MultiPlayInput();
            enumerator = this.mRecvGoodJob.GetEnumerator();
        Label_00EB:
            try
            {
                goto Label_0306;
            Label_00F0:
                data = &enumerator.Current;
                num = ((data.c != null) && (((int) data.c.Length) > 0)) ? data.c[0] : input.c;
                num2 = ((data.gx != null) && (((int) data.gx.Length) > 0)) ? data.gx[0] : input.gx;
                num3 = ((data.gy != null) && (((int) data.gy.Length) > 0)) ? data.gy[0] : input.gy;
                num4 = data.uid;
                if ((0 > num4) || (num4 >= this.Battle.AllUnits.Count))
                {
                    goto Label_01DB;
                }
                num2 = this.Battle.AllUnits[num4].x;
                num3 = this.Battle.AllUnits[num4].y;
            Label_01DB:
                if ((((this.Battle.CurrentMap == null) || (this.mHeightMap == null)) || ((0 > num2) || (num2 >= this.Battle.CurrentMap.Width))) || ((0 > num3) || (num3 >= this.Battle.CurrentMap.Height)))
                {
                    goto Label_0306;
                }
                vector = this.CalcGridCenter(this.Battle.CurrentMap[num2, num3]);
                stamp = ((this.mBattleUI_MultiPlay == null) == null) ? this.mBattleUI_MultiPlay.StampWindow : null;
                sprite = ((((stamp == null) == null) && (stamp.Sprites != null)) && ((num >= 0) && (num < ((int) stamp.Sprites.Length)))) ? stamp.Sprites[num] : null;
            Label_02E8:
                obj2 = ((((stamp == null) == null) && (stamp.Prefabs != null)) && ((num >= 0) && (num < ((int) stamp.Prefabs.Length)))) ? stamp.Prefabs[num] : null;
                this.PopupGoodJob(vector, obj2, sprite);
            Label_0306:
                if (&enumerator.MoveNext() != null)
                {
                    goto Label_00F0;
                }
                goto Label_0323;
            }
            finally
            {
            Label_0317:
                ((List<MultiPlayRecvData>.Enumerator) enumerator).Dispose();
            }
        Label_0323:
            this.mRecvGoodJob.Clear();
            return;
        }

        private void UpdateInterval()
        {
            this.mRestSyncInterval = Mathf.Max(this.mRestSyncInterval - Time.get_deltaTime(), 0f);
            this.mRestResumeRequestInterval = Mathf.Max(this.mRestResumeRequestInterval - Time.get_deltaTime(), 0f);
            this.mRestResumeSuccessInterval = Mathf.Max(this.mRestResumeSuccessInterval - Time.get_deltaTime(), 0f);
            return;
        }

        private void UpdateLoadProgress()
        {
            float num;
            num = (this.mLoadProgress_UI + this.mLoadProgress_Scene) + this.mLoadProgress_Animation;
            ProgressWindow.SetLoadProgress(num * 0.5f);
            return;
        }

        private void UpdateMultiBattleInfo()
        {
            object[] objArray2;
            object[] objArray1;
            MultiPlayerUnit unit;
            MultiPlayer player;
            MultiPlayer player2;
            <UpdateMultiBattleInfo>c__AnonStorey1DF storeydf;
            <UpdateMultiBattleInfo>c__AnonStorey1E0 storeye;
            int num;
            goto Label_01B2;
        Label_0005:
            storeydf = new <UpdateMultiBattleInfo>c__AnonStorey1DF();
            storeydf.data = this.mRecvBattle[0];
            if (storeydf.data.b <= this.UnitStartCountTotal)
            {
                goto Label_00D8;
            }
            objArray1 = new object[] { "[PUN] new turn data. sq:", (int) storeydf.data.sq, " h:", (EMultiPlayRecvDataHeader) storeydf.data.h, " b:", (int) storeydf.data.b, "/", (int) this.UnitStartCountTotal, " test:", (int) this.mRecvBattle.FindIndex(new Predicate<MultiPlayRecvData>(storeydf.<>m__A7)) };
            DebugUtility.LogWarning(string.Concat(objArray1));
            goto Label_01C3;
        Label_00D8:
            if (storeydf.data.b >= this.UnitStartCountTotal)
            {
                goto Label_016A;
            }
            objArray2 = new object[] { "[PUN] old turn data. sq:", (int) storeydf.data.sq, " h:", (EMultiPlayRecvDataHeader) storeydf.data.h, " b:", (int) storeydf.data.b, "/", (int) this.UnitStartCountTotal };
            DebugUtility.LogWarning(string.Concat(objArray2));
            goto Label_01A6;
        Label_016A:
            if (storeydf.data.h != 1)
            {
                goto Label_01A6;
            }
            unit = this.mMultiPlayerUnit.Find(new Predicate<MultiPlayerUnit>(storeydf.<>m__A8));
            if (unit == null)
            {
                goto Label_01A6;
            }
            unit.RecvInput(this, storeydf.data);
        Label_01A6:
            this.mRecvBattle.RemoveAt(0);
        Label_01B2:
            if (this.mRecvBattle.Count > 0)
            {
                goto Label_0005;
            }
        Label_01C3:
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_02F8;
            }
            storeye = new <UpdateMultiBattleInfo>c__AnonStorey1E0();
            storeye.<>f__this = this;
            storeye.i = 0;
            goto Label_0271;
        Label_01EE:
            if (this.mAudienceDisconnect[storeye.i].b != this.UnitStartCountTotal)
            {
                goto Label_0261;
            }
            player = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(storeye.<>m__A9));
            if (player == null)
            {
                goto Label_0261;
            }
            if (player.StartBegin == null)
            {
                goto Label_0261;
            }
            player.Disconnected = 1;
            this.mAudienceDisconnect.RemoveAt(storeye.i--);
        Label_0261:
            storeye.i += 1;
        Label_0271:
            if (storeye.i < this.mAudienceDisconnect.Count)
            {
                goto Label_01EE;
            }
            if (this.mAudienceRetire == null)
            {
                goto Label_02F8;
            }
            if (this.mAudienceRetire.b != this.UnitStartCountTotal)
            {
                goto Label_02F8;
            }
            if (this.mRecvBattle.Count > 0)
            {
                goto Label_02F8;
            }
            player2 = this.mMultiPlayer.Find(new Predicate<MultiPlayer>(this.<UpdateMultiBattleInfo>m__AA));
            if (player2 == null)
            {
                goto Label_02DF;
            }
            player2.NotifyDisconnected = 1;
        Label_02DF:
            this.mAudienceRetire = null;
            this.Battle.IsVSForceWin = 1;
            this.GotoState_WaitSignal<State_AudienceRetire>();
        Label_02F8:
            return;
        }

        private void UpdateMultiPlayer()
        {
            int num;
            int num2;
            if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
            {
                goto Label_0010;
            }
            return;
        Label_0010:
            if (this.Battle.IsMultiPlay != null)
            {
                goto Label_0021;
            }
            return;
        Label_0021:
            if (this.Battle.MultiFinishLoad != null)
            {
                goto Label_0032;
            }
            return;
        Label_0032:
            this.UpdateInterval();
            this.RecvEvent();
            if (this.DisconnetEvent() == null)
            {
                goto Label_004A;
            }
            return;
        Label_004A:
            this.SendRequestResume();
            this.SendResumeInfo();
            this.CheckStart();
            this.ShowTimeLimit();
            this.ShowThinking();
            this.OtherPlayerDisconnect();
            this.OtherPlayerResume();
            if (this.mBeginMultiPlay != null)
            {
                goto Label_0080;
            }
            return;
        Label_0080:
            this.CheckMultiPlay();
            this.UpdateGoodJob();
            this.UpdateMultiBattleInfo();
            num = 0;
            goto Label_00B0;
        Label_009A:
            this.mMultiPlayer[num].Update(this);
            num += 1;
        Label_00B0:
            if (num < this.mMultiPlayer.Count)
            {
                goto Label_009A;
            }
            num2 = 0;
            goto Label_00DE;
        Label_00C8:
            this.mMultiPlayerUnit[num2].Update(this);
            num2 += 1;
        Label_00DE:
            if (num2 < this.mMultiPlayerUnit.Count)
            {
                goto Label_00C8;
            }
            this.mSendTime += Time.get_deltaTime();
            if (this.mSendTime < this.SEND_TURN_SEC)
            {
                goto Label_0119;
            }
            this.SendInputFlush(0);
        Label_0119:
            if (this.CheckInputTimeLimit() == null)
            {
                goto Label_0125;
            }
            return;
        Label_0125:
            this.SendTimeLimit();
            return;
        }

        private void UpdateTrophy()
        {
            PlayerData data;
            BattleCore.QuestResult result;
            BattleCore.Record record;
            BattleCore.Record record2;
            int num;
            MyPhoton photon;
            GameManager manager;
            int num2;
            int num3;
            List<MyPhoton.MyPlayer> list;
            int num4;
            JSON_MyPhotonPlayerParam param;
            data = MonoSingleton<GameManager>.Instance.Player;
            result = this.mBattle.GetQuestResult();
            if (this.mCurrentQuest.type != 2)
            {
                goto Label_006D;
            }
            if (this.mBattle.GetQuestRecord().result != 1)
            {
                goto Label_0057;
            }
            data.OnQuestWin(this.mCurrentQuest.iname, null);
            goto Label_0068;
        Label_0057:
            data.OnQuestLose(this.mCurrentQuest.iname);
        Label_0068:
            goto Label_01BC;
        Label_006D:
            if (result != 1)
            {
                goto Label_00F1;
            }
            record2 = this.Battle.GetQuestRecord();
            data.OnQuestWin(this.mCurrentQuest.iname, record2);
            num = 0;
            goto Label_00DA;
        Label_009A:
            if (record2.items[num].itemParam != null)
            {
                goto Label_00B6;
            }
            goto Label_00D4;
        Label_00B6:
            data.OnItemQuantityChange(record2.items[num].itemParam.iname, 1);
        Label_00D4:
            num += 1;
        Label_00DA:
            if (num < record2.items.Count)
            {
                goto Label_009A;
            }
            goto Label_0109;
        Label_00F1:
            if (result != 2)
            {
                goto Label_0109;
            }
            data.OnQuestLose(this.mCurrentQuest.iname);
        Label_0109:
            if (this.mCurrentQuest.IsMultiTower == null)
            {
                goto Label_01BC;
            }
            photon = PunMonoSingleton<MyPhoton>.Instance;
            num2 = MonoSingleton<GameManager>.Instance.GetMTClearedMaxFloor();
            num3 = GlobalVars.SelectedMultiTowerFloor;
            if ((photon != null) == null)
            {
                goto Label_01BC;
            }
            list = photon.GetRoomPlayerList();
            if (list == null)
            {
                goto Label_01BC;
            }
            num4 = 0;
            goto Label_01AE;
        Label_015C:
            param = JSON_MyPhotonPlayerParam.Parse(list[num4].json);
            if (param == null)
            {
                goto Label_01A8;
            }
            if (param.playerIndex == photon.MyPlayerIndex)
            {
                goto Label_01A8;
            }
            if (num3 > num2)
            {
                goto Label_01A8;
            }
            if (num3 <= param.mtClearedFloor)
            {
                goto Label_01A8;
            }
            data.OnMultiTowerHelp();
        Label_01A8:
            num4 += 1;
        Label_01AE:
            if (num4 < list.Count)
            {
                goto Label_015C;
            }
        Label_01BC:
            return;
        }

        public void UpdateUnitHP(TacticsUnitController controller)
        {
        }

        public void UpdateUnitMP(TacticsUnitController controller)
        {
        }

        public int UnitStartCount
        {
            get
            {
                return this.mUnitStartCount;
            }
        }

        public int UnitStartCountTotal
        {
            get
            {
                return this.mUnitStartCountTotal;
            }
        }

        public FlowNode_BattleUI BattleUI
        {
            get
            {
                return this.mBattleUI;
            }
        }

        public GameObject CurrentScene
        {
            get
            {
                return ((this.mTacticsSceneRoot == null) ? null : this.mTacticsSceneRoot.get_gameObject());
            }
        }

        public QuestParam CurrentQuest
        {
            get
            {
                return this.mCurrentQuest;
            }
        }

        public bool IsRankingQuestNewScore
        {
            get
            {
                return this.mIsRankingQuestNewScore;
            }
        }

        public bool IsRankingQuestJoinReward
        {
            get
            {
                return this.mIsRankingQuestJoinReward;
            }
        }

        public int RankingQuestNewRank
        {
            get
            {
                return this.mRankingQuestNewRank;
            }
        }

        public bool ValidateRankingQuestRank
        {
            get
            {
                return (this.mRankingQuestNewRank > 0);
            }
        }

        public bool IsOrdealQuest
        {
            get
            {
                return ((this.mCurrentQuest == null) ? 0 : (this.mCurrentQuest.type == 15));
            }
        }

        public bool IsGetFirstClearItem
        {
            get
            {
                return (string.IsNullOrEmpty(this.FirstClearItemId) == 0);
            }
        }

        public bool IsCardSendMail
        {
            get
            {
                return this.m_IsCardSendMail;
            }
        }

        public BattleCore Battle
        {
            get
            {
                return this.mBattle;
            }
        }

        public List<JSON_MyPhotonPlayerParam> AudiencePlayer
        {
            get
            {
                return this.mAudiencePlayers;
            }
        }

        public bool QuestStart
        {
            get
            {
                return this.mQuestStart;
            }
            set
            {
                this.mQuestStart = value;
                return;
            }
        }

        public bool IsPlayingArenaQuest
        {
            get
            {
                return (this.mCurrentQuest.type == 2);
            }
        }

        public bool IsPlayingMultiQuest
        {
            get
            {
                return this.mCurrentQuest.IsMulti;
            }
        }

        public bool IsPlayingTower
        {
            get
            {
                return (this.mCurrentQuest.type == 7);
            }
        }

        public bool IsFirstPlay
        {
            get
            {
                return this.mIsFirstPlay;
            }
        }

        public bool IsFirstWin
        {
            get
            {
                return this.mIsFirstWin;
            }
        }

        public bool IsPlayLastDemo
        {
            get
            {
                return ((((this.mBattle == null) || (this.mCurrentQuest == null)) || ((this.mBattle.GetQuestResult() != 1) || (string.IsNullOrEmpty(this.mCurrentQuest.event_clear) != null))) ? 0 : this.mIsFirstWin);
            }
        }

        private bool IsUnitLoading
        {
            get
            {
                int num;
                num = 0;
                goto Label_0028;
            Label_0007:
                goto Label_000E;
            Label_000C:
                return 1;
            Label_000E:
                if (this.mTacticsUnits[num].IsLoading != null)
                {
                    goto Label_000C;
                }
                num += 1;
            Label_0028:
                if (num < this.mTacticsUnits.Count)
                {
                    goto Label_000E;
                }
                return 0;
            }
        }

        public int FirstContact
        {
            get
            {
                return this.mFirstContact;
            }
        }

        public QuestResultData ResultData
        {
            get
            {
                return this.mSavedResult;
            }
        }

        private Unit mCollaboTargetUnit
        {
            get
            {
                return ((this.mCollaboTargetTuc == null) ? null : this.mCollaboTargetTuc.Unit);
            }
        }

        public Unit CollaboMainUnit
        {
            get
            {
                return ((this.mIsInstigatorSubUnit != null) ? this.mCollaboTargetUnit : this.mCollaboMainUnit);
            }
        }

        public Unit CollaboSubUnit
        {
            get
            {
                return ((this.mIsInstigatorSubUnit == null) ? this.mCollaboTargetUnit : this.mCollaboMainUnit);
            }
        }

        public bool isUpView
        {
            get
            {
                return (this.m_CameraMode == 1);
            }
        }

        public bool isNewCamera
        {
            get
            {
                return this.m_NewCamera;
            }
        }

        public bool isFullRotationCamera
        {
            get
            {
                return this.m_FullRotationCamera;
            }
        }

        public bool mUpdateCameraPosition
        {
            get
            {
                return this.m_UpdateCamera;
            }
            set
            {
                this.m_UpdateCamera = value;
                return;
            }
        }

        public bool isBattleCamera
        {
            get
            {
                return this.m_BattleCamera;
            }
        }

        public TargetCamera targetCamera
        {
            get
            {
                return this.m_TargetCamera;
            }
        }

        private bool IsCameraMoving
        {
            get
            {
                if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
                {
                    goto Label_0016;
                }
                return 1;
            Label_0016:
                if (this.mUpdateCameraPosition == null)
                {
                    goto Label_0039;
                }
                if (this.m_TargetCameraPositionInterp != null)
                {
                    goto Label_0037;
                }
                if (this.m_TargetCameraDistanceInterp == null)
                {
                    goto Label_0039;
                }
            Label_0037:
                return 1;
            Label_0039:
                return 0;
            }
        }

        public bool isCameraLeftMove
        {
            get
            {
                if (this.isFullRotationCamera == null)
                {
                    goto Label_000D;
                }
                return 1;
            Label_000D:
                return ((this.m_CameraAngle - this.m_CameraYawMin) > 0.01f);
            }
        }

        public bool isCameraRightMove
        {
            get
            {
                if (this.isFullRotationCamera == null)
                {
                    goto Label_000D;
                }
                return 1;
            Label_000D:
                return ((this.m_CameraYawMax - this.m_CameraAngle) > 0.01f);
            }
        }

        private Vector3 mCameraTarget
        {
            get
            {
                return this.m_CameraPosition;
            }
            set
            {
                this.m_CameraPosition = value;
                return;
            }
        }

        private bool mAllowCameraRotation
        {
            get
            {
                return this.m_AllowCameraRotation;
            }
            set
            {
                this.m_AllowCameraRotation = value;
                return;
            }
        }

        private bool mAllowCameraTranslation
        {
            get
            {
                return this.m_AllowCameraTranslation;
            }
            set
            {
                this.m_AllowCameraTranslation = value;
                return;
            }
        }

        private bool mDesiredCameraTargetSet
        {
            get
            {
                return this.m_TargetCameraPositionInterp;
            }
            set
            {
                this.m_TargetCameraPositionInterp = value;
                return;
            }
        }

        public float CameraYawRatio
        {
            get
            {
                return Mathf.Clamp01((this.m_CameraAngle - this.m_CameraYawMin) / (this.m_CameraYawMax - this.m_CameraYawMin));
            }
        }

        public bool AudiencePause
        {
            get
            {
                return this.mAudiencePause;
            }
            set
            {
                this.mAudiencePause = value;
                return;
            }
        }

        public bool AudienceSkip
        {
            get
            {
                return this.mAudienceSkip;
            }
            set
            {
                this.mAudienceSkip = value;
                return;
            }
        }

        public int MultiPlayerCount
        {
            get
            {
                return this.mMultiPlayer.Count;
            }
        }

        private float MultiPlayInputTimeLimit
        {
            [CompilerGenerated]
            get
            {
                return this.<MultiPlayInputTimeLimit>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<MultiPlayInputTimeLimit>k__BackingField = value;
                return;
            }
        }

        private bool MultiPlayExtMoveInputTime
        {
            [CompilerGenerated]
            get
            {
                return this.<MultiPlayExtMoveInputTime>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<MultiPlayExtMoveInputTime>k__BackingField = value;
                return;
            }
        }

        private bool MultiPlayExtSelectInputTime
        {
            [CompilerGenerated]
            get
            {
                return this.<MultiPlayExtSelectInputTime>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<MultiPlayExtSelectInputTime>k__BackingField = value;
                return;
            }
        }

        public float MultiPlayAddInputTime
        {
            [CompilerGenerated]
            get
            {
                return this.<MultiPlayAddInputTime>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<MultiPlayAddInputTime>k__BackingField = value;
                return;
            }
        }

        public bool ResumeSuccess
        {
            get
            {
                return this.mResumeSuccess;
            }
            set
            {
                this.mResumeSuccess = value;
                return;
            }
        }

        public bool ResumeOnly
        {
            get
            {
                return this.mResumeOnlyPlayer;
            }
        }

        public bool VersusMapView
        {
            get
            {
                return this.mMapViewMode;
            }
            set
            {
                this.mMapViewMode = value;
                return;
            }
        }

        public bool AlreadyEndBattle
        {
            get
            {
                return this.mAlreadyEndBattle;
            }
            set
            {
                this.mAlreadyEndBattle = value;
                return;
            }
        }

        public bool IsExistResume
        {
            get
            {
                return ((this.mRecvResumeRequest == null) ? 0 : (this.mRecvResumeRequest.Count > 0));
            }
        }

        public bool AudienceForceEnd
        {
            get
            {
                return this.mAudienceForceEnd;
            }
            set
            {
                this.mAudienceForceEnd = value;
                return;
            }
        }

        public bool IsSend
        {
            get
            {
                GameManager manager;
                manager = MonoSingleton<GameManager>.Instance;
                return (((manager.AudienceMode != null) ? 1 : manager.IsVSCpuBattle) == 0);
            }
        }

        public int DisplayMultiPlayInputTimeLimit
        {
            [CompilerGenerated]
            get
            {
                return this.<DisplayMultiPlayInputTimeLimit>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<DisplayMultiPlayInputTimeLimit>k__BackingField = value;
                return;
            }
        }

        public JSON_MyPhotonPlayerParam CurrentNotifyDisconnectedPlayer
        {
            [CompilerGenerated]
            get
            {
                return this.<CurrentNotifyDisconnectedPlayer>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<CurrentNotifyDisconnectedPlayer>k__BackingField = value;
                return;
            }
        }

        public JSON_MyPhotonPlayerParam CurrentResumePlayer
        {
            [CompilerGenerated]
            get
            {
                return this.<CurrentResumePlayer>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<CurrentResumePlayer>k__BackingField = value;
                return;
            }
        }

        public ENotifyDisconnectedPlayerType CurrentNotifyDisconnectedPlayerType
        {
            [CompilerGenerated]
            get
            {
                return this.<CurrentNotifyDisconnectedPlayerType>k__BackingField;
            }
            [CompilerGenerated]
            set
            {
                this.<CurrentNotifyDisconnectedPlayerType>k__BackingField = value;
                return;
            }
        }

        public string PhotonErrorString
        {
            get
            {
                return this.mPhotonErrString;
            }
        }

        public MoveInput VirtualStickMoveInput
        {
            get
            {
                return this.mMoveInput;
            }
        }

        public SRPG.EventScript EventScript
        {
            get
            {
                return this.mEventScript;
            }
        }

        public GameObject continueWindowRes
        {
            get
            {
                return this.mContinueWindowRes;
            }
        }

        private TutorialButtonImage[] TutorialButtonImages
        {
            get
            {
                if (this.mTutorialButtonImages != null)
                {
                    goto Label_002E;
                }
                if ((this.mBattleUI != null) == null)
                {
                    goto Label_002E;
                }
                this.mTutorialButtonImages = this.mBattleUI.GetComponentsInChildren<TutorialButtonImage>(1);
            Label_002E:
                return this.mTutorialButtonImages;
            }
        }

        public GameObject KnockBackEffect
        {
            get
            {
                return this.mKnockBackEffect;
            }
        }

        public GameObject TrickMarker
        {
            get
            {
                return this.mTrickMarker;
            }
        }

        public Dictionary<string, GameObject> TrickMarkerDics
        {
            get
            {
                return this.mTrickMarkerDics;
            }
        }

        public GameObject JumpFallEffect
        {
            get
            {
                return this.mJumpFallEffect;
            }
        }

        private Canvas OverlayCanvas
        {
            get
            {
                return (((this.mTouchController != null) == null) ? null : this.mTouchController.GetComponent<Canvas>());
            }
        }

        private bool IsHPGaugeChanging
        {
            get
            {
                int num;
                num = 0;
                goto Label_0023;
            Label_0007:
                if (this.mTacticsUnits[num].IsHPGaugeChanging == null)
                {
                    goto Label_001F;
                }
                return 1;
            Label_001F:
                num += 1;
            Label_0023:
                if (num < this.mTacticsUnits.Count)
                {
                    goto Label_0007;
                }
                return 0;
            }
        }

        public bool HasMissPopup
        {
            get
            {
                return (this.mMissPopup != null);
            }
        }

        public bool HasPerfectAvoidPopup
        {
            get
            {
                return (this.mPerfectAvoidPopup != null);
            }
        }

        public bool HasGuardPopup
        {
            get
            {
                return (this.mGuardPopup != null);
            }
        }

        public bool HasAbsorbPopup
        {
            get
            {
                return (this.mAbsorbPopup != null);
            }
        }

        public bool HasCriticalPopup
        {
            get
            {
                return (this.mCriticalPopup != null);
            }
        }

        public bool HasBackstabPopup
        {
            get
            {
                return (this.mBackstabPopup != null);
            }
        }

        public bool HasWeakPopup
        {
            get
            {
                return (this.mWeakPopup != null);
            }
        }

        public bool HasResistPopup
        {
            get
            {
                return (this.mResistPopup != null);
            }
        }

        public bool HasGutsPopup
        {
            get
            {
                return (this.mGutsPopup != null);
            }
        }

        public bool UISignal
        {
            get
            {
                return this.mUISignal;
            }
            set
            {
                this.mUISignal = value;
                return;
            }
        }

        [CompilerGenerated]
        private sealed class <BeginMultiPlayer>c__AnonStorey1D2
        {
            internal Unit unit;

            public <BeginMultiPlayer>c__AnonStorey1D2()
            {
                base..ctor();
                return;
            }

            internal bool <>m__7E(Unit u)
            {
                return (u == this.unit);
            }

            internal bool <>m__7F(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.unit.OwnerPlayerIndex);
            }

            internal bool <>m__80(SceneBattle.MultiPlayerUnit u)
            {
                return (u.Unit == this.unit);
            }
        }

        [CompilerGenerated]
        private sealed class <CheckResumeSync>c__AnonStorey1E2
        {
            internal MyPhoton.MyPlayer player;

            public <CheckResumeSync>c__AnonStorey1E2()
            {
                base..ctor();
                return;
            }

            internal bool <>m__AC(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.player.playerID);
            }
        }

        [CompilerGenerated]
        private sealed class <CheckStart>c__AnonStorey1DE
        {
            internal int playerID;

            public <CheckStart>c__AnonStorey1DE()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A6(MyPhoton.MyPlayer p)
            {
                return (p.playerID == this.playerID);
            }
        }

        [CompilerGenerated]
        private sealed class <CheckSync>c__AnonStorey1E1
        {
            internal MyPhoton.MyPlayer player;

            public <CheckSync>c__AnonStorey1E1()
            {
                base..ctor();
                return;
            }

            internal bool <>m__AB(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.player.playerID);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateAudiencePlayer>c__AnonStorey1D0
        {
            internal int playerIndex;

            public <CreateAudiencePlayer>c__AnonStorey1D0()
            {
                base..ctor();
                return;
            }

            internal bool <>m__7C(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.playerIndex);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateCpuBattlePlayer>c__AnonStorey1D1
        {
            internal int playerIndex;

            public <CreateCpuBattlePlayer>c__AnonStorey1D1()
            {
                base..ctor();
                return;
            }

            internal bool <>m__7D(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.playerIndex);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateMultiPlayer>c__AnonStorey1CF
        {
            internal int playerIndex;

            public <CreateMultiPlayer>c__AnonStorey1CF()
            {
                base..ctor();
                return;
            }

            internal bool <>m__7B(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.playerIndex);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateMultiPlayInputList>c__AnonStorey1D5
        {
            internal SceneBattle.MultiPlayInput input;

            public <CreateMultiPlayInputList>c__AnonStorey1D5()
            {
                base..ctor();
                return;
            }

            internal bool <>m__8D(SceneBattle.MultiPlayInput d)
            {
                return (d.c == this.input.c);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateMultiPlayInputList>c__AnonStorey1D6
        {
            internal SceneBattle.MultiPlayInput def;

            public <CreateMultiPlayInputList>c__AnonStorey1D6()
            {
                base..ctor();
                return;
            }

            internal bool <>m__8E(SceneBattle.MultiPlayInput s)
            {
                return ((s.c == this.def.c) == 0);
            }

            internal bool <>m__8F(SceneBattle.MultiPlayInput s)
            {
                return ((s.u == this.def.u) == 0);
            }

            internal bool <>m__90(SceneBattle.MultiPlayInput s)
            {
                return (s.s.Equals(this.def.s) == 0);
            }

            internal bool <>m__91(SceneBattle.MultiPlayInput s)
            {
                return (s.i.Equals(this.def.i) == 0);
            }

            internal bool <>m__92(SceneBattle.MultiPlayInput s)
            {
                return ((s.gx == this.def.gx) == 0);
            }

            internal bool <>m__93(SceneBattle.MultiPlayInput s)
            {
                return ((s.gy == this.def.gy) == 0);
            }

            internal bool <>m__94(SceneBattle.MultiPlayInput s)
            {
                return ((s.ul == this.def.ul) == 0);
            }

            internal bool <>m__95(SceneBattle.MultiPlayInput s)
            {
                return ((s.d == this.def.d) == 0);
            }

            internal bool <>m__96(SceneBattle.MultiPlayInput s)
            {
                return ((s.x == this.def.x) == 0);
            }

            internal bool <>m__97(SceneBattle.MultiPlayInput s)
            {
                return ((s.z == this.def.z) == 0);
            }

            internal bool <>m__98(SceneBattle.MultiPlayInput s)
            {
                return ((s.r == this.def.r) == 0);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateSendBinary>c__AnonStorey1D3
        {
            internal SceneBattle.MultiPlayInput input;

            public <CreateSendBinary>c__AnonStorey1D3()
            {
                base..ctor();
                return;
            }

            internal bool <>m__81(SceneBattle.MultiPlayInput d)
            {
                return (d.c == this.input.c);
            }
        }

        [CompilerGenerated]
        private sealed class <CreateSendBinary>c__AnonStorey1D4
        {
            internal SceneBattle.MultiPlayInput def;

            public <CreateSendBinary>c__AnonStorey1D4()
            {
                base..ctor();
                return;
            }

            internal bool <>m__82(SceneBattle.MultiPlayInput s)
            {
                return ((s.c == this.def.c) == 0);
            }

            internal bool <>m__83(SceneBattle.MultiPlayInput s)
            {
                return ((s.u == this.def.u) == 0);
            }

            internal bool <>m__84(SceneBattle.MultiPlayInput s)
            {
                return (s.s.Equals(this.def.s) == 0);
            }

            internal bool <>m__85(SceneBattle.MultiPlayInput s)
            {
                return (s.i.Equals(this.def.i) == 0);
            }

            internal bool <>m__86(SceneBattle.MultiPlayInput s)
            {
                return ((s.gx == this.def.gx) == 0);
            }

            internal bool <>m__87(SceneBattle.MultiPlayInput s)
            {
                return ((s.gy == this.def.gy) == 0);
            }

            internal bool <>m__88(SceneBattle.MultiPlayInput s)
            {
                return ((s.ul == this.def.ul) == 0);
            }

            internal bool <>m__89(SceneBattle.MultiPlayInput s)
            {
                return ((s.d == this.def.d) == 0);
            }

            internal bool <>m__8A(SceneBattle.MultiPlayInput s)
            {
                return ((s.x == this.def.x) == 0);
            }

            internal bool <>m__8B(SceneBattle.MultiPlayInput s)
            {
                return ((s.z == this.def.z) == 0);
            }

            internal bool <>m__8C(SceneBattle.MultiPlayInput s)
            {
                return ((s.r == this.def.r) == 0);
            }
        }

        [CompilerGenerated]
        private sealed class <DownloadNextQuestAsync>c__Iterator2D : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal QuestParam[] <quests>__0;
            internal int <i>__1;
            internal bool <isIncluded>__2;
            internal int $PC;
            internal object $current;
            internal SceneBattle <>f__this;

            public <DownloadNextQuestAsync>c__Iterator2D()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0025;

                    case 1:
                        goto Label_00F4;

                    case 2:
                        goto Label_0134;
                }
                goto Label_013B;
            Label_0025:
                if (GameUtility.Config_UseAssetBundles.Value == null)
                {
                    goto Label_013B;
                }
                if (AssetManager.AssetRevision > 0)
                {
                    goto Label_0044;
                }
                goto Label_013B;
            Label_0044:
                this.<quests>__0 = MonoSingleton<GameManager>.Instance.Quests;
                this.<i>__1 = 0;
                goto Label_0102;
            Label_0060:
                if (this.<quests>__0[this.<i>__1].cond_quests != null)
                {
                    goto Label_007C;
                }
                goto Label_00F4;
            Label_007C:
                this.<isIncluded>__2 = (Array.IndexOf<string>(this.<quests>__0[this.<i>__1].cond_quests, this.<>f__this.mCurrentQuest.iname) < 0) == 0;
                if (this.<isIncluded>__2 != null)
                {
                    goto Label_00BF;
                }
                goto Label_00F4;
            Label_00BF:
                this.$current = this.<>f__this.StartCoroutine(this.<>f__this.DownloadQuestAsync(this.<quests>__0[this.<i>__1]));
                this.$PC = 1;
                goto Label_013D;
            Label_00F4:
                this.<i>__1 += 1;
            Label_0102:
                if (this.<i>__1 < ((int) this.<quests>__0.Length))
                {
                    goto Label_0060;
                }
                this.<>f__this.mDownloadTutorialAssets = 1;
                this.$current = null;
                this.$PC = 2;
                goto Label_013D;
            Label_0134:
                this.$PC = -1;
            Label_013B:
                return 0;
            Label_013D:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <DownloadQuestAsync>c__Iterator2E : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal QuestParam quest;
            internal bool <downloadCurrentQuest>__0;
            internal ThreadPriority <priority>__1;
            internal int $PC;
            internal object $current;
            internal QuestParam <$>quest;
            internal SceneBattle <>f__this;

            public <DownloadQuestAsync>c__Iterator2E()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_002D;

                    case 1:
                        goto Label_0080;

                    case 2:
                        goto Label_00C4;

                    case 3:
                        goto Label_0108;

                    case 4:
                        goto Label_0125;
                }
                goto Label_012C;
            Label_002D:
                this.<downloadCurrentQuest>__0 = this.quest == this.<>f__this.mCurrentQuest;
                if (this.<downloadCurrentQuest>__0 == null)
                {
                    goto Label_005D;
                }
                this.<priority>__1 = 2;
                goto Label_0064;
            Label_005D:
                this.<priority>__1 = 0;
            Label_0064:
                goto Label_0080;
            Label_0069:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 1;
                goto Label_012E;
            Label_0080:
                if (AssetDownloader.isDone == null)
                {
                    goto Label_0069;
                }
                DownloadUtility.DownloadQuestBase(this.quest);
                AssetDownloader.StartDownload(0, this.<downloadCurrentQuest>__0, this.<priority>__1);
                goto Label_00C4;
            Label_00AD:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 2;
                goto Label_012E;
            Label_00C4:
                if (AssetDownloader.isDone == null)
                {
                    goto Label_00AD;
                }
                DownloadUtility.DownloadQuestMaps(this.quest);
                AssetDownloader.StartDownload(0, this.<downloadCurrentQuest>__0, this.<priority>__1);
                goto Label_0108;
            Label_00F1:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 3;
                goto Label_012E;
            Label_0108:
                if (AssetDownloader.isDone == null)
                {
                    goto Label_00F1;
                }
                this.$current = null;
                this.$PC = 4;
                goto Label_012E;
            Label_0125:
                this.$PC = -1;
            Label_012C:
                return 0;
            Label_012E:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <EnableControlBattleUI>c__AnonStorey1EB
        {
            internal SceneBattle.eMaskBattleUI emask;

            public <EnableControlBattleUI>c__AnonStorey1EB()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B5(TutorialButtonImage tbi)
            {
                return (tbi.MaskType == this.emask);
            }
        }

        [CompilerGenerated]
        private sealed class <InternalShowCastSkill>c__AnonStorey1CC
        {
            internal Unit unit;

            public <InternalShowCastSkill>c__AnonStorey1CC()
            {
                base..ctor();
                return;
            }

            internal bool <>m__75(SceneBattle.ChargeTarget ctl)
            {
                return (ctl.mUnit == this.unit.UnitTarget);
            }
        }

        [CompilerGenerated]
        private sealed class <LoadMapAsync>c__Iterator30 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal int <i>__0;
            internal Unit <aft_unit>__1;
            internal SceneRequest <req>__2;
            internal bool <isSuspend>__3;
            internal List<Unit>.Enumerator <$s_231>__4;
            internal Unit <unit>__5;
            internal GameObject <newUnit>__6;
            internal TacticsUnitController <controller>__7;
            internal JSON_MyPhotonPlayerParam <param>__8;
            internal GameObject <VersusCursor>__9;
            internal float <progress>__10;
            internal int <i>__11;
            internal bool <unitsReady>__12;
            internal int <i>__13;
            internal List<TacticsUnitController>.Enumerator <$s_232>__14;
            internal TacticsUnitController <tuc>__15;
            internal int <job_idx>__16;
            internal List<string> <sceneNames>__17;
            internal List<LoadRequest> <loadRequests>__18;
            internal int <i>__19;
            internal Unit <unit>__20;
            internal int <j>__21;
            internal SkillParam <skill>__22;
            internal int <i>__23;
            internal LoadRequest <req>__24;
            internal int <i>__25;
            internal GameObject <src>__26;
            internal GameObject <go>__27;
            internal BattleSceneSettings <settings>__28;
            internal int <i>__29;
            internal TacticsUnitController <controller>__30;
            internal bool <unitVisible>__31;
            internal SkillData <castSkill>__32;
            internal int <idx>__33;
            internal BattleLog <log>__34;
            internal LogFailCondition <log_lfc>__35;
            internal TacticsUnitController <tuc>__36;
            internal GameObject <questStatus>__37;
            internal WeatherData <wth_data>__38;
            internal int <idx>__39;
            internal BattleLog <log>__40;
            internal LogWeather <log_wth>__41;
            internal List<TacticsUnitController>.Enumerator <$s_233>__42;
            internal TacticsUnitController <tuc>__43;
            internal List<TrickData> <td_lists>__44;
            internal LoadRequest <req>__45;
            internal int <idx>__46;
            internal int $PC;
            internal object $current;
            internal SceneBattle <>f__this;

            public <LoadMapAsync>c__Iterator30()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B7(JSON_MyPhotonPlayerParam p)
            {
                return (p.playerIndex == this.<unit>__5.OwnerPlayerIndex);
            }

            [DebuggerHidden]
            public void Dispose()
            {
                uint num;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_006B;

                    case 1:
                        goto Label_006B;

                    case 2:
                        goto Label_006B;

                    case 3:
                        goto Label_006B;

                    case 4:
                        goto Label_006B;

                    case 5:
                        goto Label_006B;

                    case 6:
                        goto Label_006B;

                    case 7:
                        goto Label_006B;

                    case 8:
                        goto Label_0055;

                    case 9:
                        goto Label_006B;

                    case 10:
                        goto Label_006B;

                    case 11:
                        goto Label_006B;

                    case 12:
                        goto Label_006B;

                    case 13:
                        goto Label_006B;

                    case 14:
                        goto Label_006B;
                }
                goto Label_006B;
            Label_0055:
                try
                {
                    goto Label_006B;
                }
                finally
                {
                Label_005A:
                    ((List<TacticsUnitController>.Enumerator) this.<$s_232>__14).Dispose();
                }
            Label_006B:
                return;
            }

            public unsafe bool MoveNext()
            {
                uint num;
                bool flag;
                int num2;
                bool flag2;
                num = this.$PC;
                this.$PC = -1;
                flag = 0;
                switch (num)
                {
                    case 0:
                        goto Label_0057;

                    case 1:
                        goto Label_0082;

                    case 2:
                        goto Label_009A;

                    case 3:
                        goto Label_019B;

                    case 4:
                        goto Label_0260;

                    case 5:
                        goto Label_0298;

                    case 6:
                        goto Label_02F1;

                    case 7:
                        goto Label_068C;

                    case 8:
                        goto Label_07BA;

                    case 9:
                        goto Label_0A5F;

                    case 10:
                        goto Label_0B5D;

                    case 11:
                        goto Label_0F4A;

                    case 12:
                        goto Label_0F90;

                    case 13:
                        goto Label_1037;

                    case 14:
                        goto Label_116E;
                }
                goto Label_1181;
            Label_0057:
                DebugUtility.Log("////////////////////////////////////////////////////////");
                GC.Collect();
                this.$current = new WaitForSeconds(0.5f);
                this.$PC = 1;
                goto Label_1183;
            Label_0082:
                goto Label_009A;
            Label_0087:
                this.$current = null;
                this.$PC = 2;
                goto Label_1183;
            Label_009A:
                if (AssetDownloader.isDone == null)
                {
                    goto Label_0087;
                }
                DownloadUtility.PrepareInventoryAssets();
                this.<i>__0 = 0;
                goto Label_0150;
            Label_00B5:
                DownloadUtility.DownloadUnit(this.<>f__this.mBattle.Units[this.<i>__0], 1, MonoSingleton<GameManager>.Instance.AudienceMode);
                this.<aft_unit>__1 = this.<>f__this.mBattle.SearchTransformUnit(this.<>f__this.mBattle.Units[this.<i>__0]);
                if (this.<aft_unit>__1 == null)
                {
                    goto Label_0142;
                }
                DownloadUtility.DownloadTransformAnimation(this.<aft_unit>__1, this.<>f__this.mBattle.Units[this.<i>__0]);
            Label_0142:
                this.<i>__0 += 1;
            Label_0150:
                if (this.<i>__0 < this.<>f__this.mBattle.Units.Count)
                {
                    goto Label_00B5;
                }
                if (AssetDownloader.isDone != null)
                {
                    goto Label_01A5;
                }
                AssetDownloader.StartDownload(0, 1, 2);
                goto Label_019B;
            Label_0188:
                this.$current = null;
                this.$PC = 3;
                goto Label_1183;
            Label_019B:
                if (AssetDownloader.isDone == null)
                {
                    goto Label_0188;
                }
            Label_01A5:
                TacticsSceneSettings.AutoDeactivateScene = 1;
                this.<>f__this.mTacticsSceneRoot = null;
                CriticalSection.Enter(4);
                SceneAwakeObserver.AddListener(new SceneAwakeObserver.SceneEvent(this.<>f__this.OnLoadTacticsScene));
                this.<req>__2 = null;
            Label_01DA:
                try
                {
                    this.<req>__2 = AssetManager.LoadSceneAsync(this.<>f__this.mBattle.CurrentMap.MapSceneName, 1);
                    goto Label_0244;
                }
                catch (Exception)
                {
                Label_0200:
                    DebugUtility.LogError("シーンのロードに失敗しました : QuestIname = " + this.<>f__this.Battle.GetQuest().iname + ",QuestScene = " + this.<>f__this.mBattle.CurrentMap.MapSceneName);
                    goto Label_0244;
                }
            Label_0244:
                goto Label_0260;
            Label_0249:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 4;
                goto Label_1183;
            Label_0260:
                if (this.<req>__2.canBeActivated == null)
                {
                    goto Label_0249;
                }
                this.<req>__2.ActivateScene();
                goto Label_02B9;
            Label_0281:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 5;
                goto Label_1183;
            Label_0298:
                this.<>f__this.mLoadProgress_Scene = this.<req>__2.progress;
                this.<>f__this.UpdateLoadProgress();
            Label_02B9:
                if (this.<req>__2.isDone == null)
                {
                    goto Label_0281;
                }
                this.<req>__2.ActivateScene();
                goto Label_02F1;
            Label_02DA:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 6;
                goto Label_1183;
            Label_02F1:
                if ((this.<>f__this.mTacticsSceneRoot == null) != null)
                {
                    goto Label_02DA;
                }
                this.<>f__this.mTacticsSceneRoot.GenerateGridMesh(this.<>f__this.mBattle.CurrentMap.Width, this.<>f__this.mBattle.CurrentMap.Height);
                TacticsSceneSettings.SetScenesActive(1);
                this.<>f__this.SetCameraTarget(((float) this.<>f__this.mBattle.CurrentMap.Width) / 2f, ((float) this.<>f__this.mBattle.CurrentMap.Height) / 2f);
                this.<>f__this.CalcGridHeights();
                this.<isSuspend>__3 = this.<>f__this.Battle.CheckEnableSuspendStart();
                this.<$s_231>__4 = this.<>f__this.mBattle.Units.GetEnumerator();
            Label_03C6:
                try
                {
                    goto Label_064F;
                Label_03CB:
                    this.<unit>__5 = &this.<$s_231>__4.Current;
                    if (this.<unit>__5.IsEntry == null)
                    {
                        goto Label_064F;
                    }
                    if (this.<unit>__5.IsSub == null)
                    {
                        goto Label_0401;
                    }
                    goto Label_064F;
                Label_0401:
                    if (((this.<unit>__5.IsGimmick != null) && (this.<unit>__5.IsBreakObj == null)) || (this.<unit>__5.IsDead == null))
                    {
                        goto Label_0436;
                    }
                    goto Label_064F;
                Label_0436:
                    if ((this.<isSuspend>__3 != null) || (this.<unit>__5.IsUnitFlag(0x400000) == null))
                    {
                        goto Label_045B;
                    }
                    goto Label_064F;
                Label_045B:
                    this.<newUnit>__6 = new GameObject(this.<unit>__5.UnitName);
                    this.<controller>__7 = this.<newUnit>__6.AddComponent<TacticsUnitController>();
                    this.<controller>__7.SetupUnit(this.<unit>__5);
                    this.<controller>__7.KeepUnitHidden = 1;
                    this.<controller>__7.InitHPGauge(this.<>f__this.OverlayCanvas, this.<>f__this.GetGaugeTemplateFor(this.<unit>__5));
                    this.<unit>__5.LoadBattleVoice();
                    if (this.<>f__this.Battle.IsMultiPlay == null)
                    {
                        goto Label_05E8;
                    }
                    this.<param>__8 = PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted().Find(new Predicate<JSON_MyPhotonPlayerParam>(this.<>m__B7));
                    this.<controller>__7.CreateOwnerIndexUI(this.<>f__this.OverlayCanvas, this.<>f__this.mUnitOwnerIndex, this.<param>__8);
                    this.<controller>__7.ShowOwnerIndexUI(0);
                    if ((this.<>f__this.Battle.IsMultiVersus == null) || (this.<unit>__5.Side == 2))
                    {
                        goto Label_05E8;
                    }
                    this.<VersusCursor>__9 = (this.<unit>__5.Side != null) ? this.<>f__this.mVersusEnemyTarget : this.<>f__this.mVersusPlayerTarget;
                    this.<>f__this.mVersusPlayerTarget.get_gameObject().SetActive(0);
                    this.<>f__this.mVersusEnemyTarget.get_gameObject().SetActive(0);
                    this.<controller>__7.CreateVersusCursor(this.<VersusCursor>__9);
                    this.<controller>__7.ShowVersusCursor(1);
                    this.<controller>__7.PlayVersusCursor(0);
                Label_05E8:
                    this.<newUnit>__6.get_transform().set_parent(this.<>f__this.mTacticsSceneRoot.get_transform());
                    this.<newUnit>__6.get_transform().set_position(this.<>f__this.CalcGridCenter(this.<>f__this.mBattle.GetUnitGridPosition(this.<unit>__5)));
                    this.<>f__this.mTacticsUnits.Add(this.<controller>__7);
                Label_064F:
                    if (&this.<$s_231>__4.MoveNext() != null)
                    {
                        goto Label_03CB;
                    }
                    goto Label_0675;
                }
                finally
                {
                Label_0664:
                    ((List<Unit>.Enumerator) this.<$s_231>__4).Dispose();
                }
            Label_0675:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 7;
                goto Label_1183;
            Label_068C:
                this.<progress>__10 = 0f;
                this.<i>__11 = 0;
                goto Label_06D9;
            Label_06A3:
                this.<progress>__10 += this.<>f__this.mTacticsUnits[this.<i>__11].LoadProgress;
                this.<i>__11 += 1;
            Label_06D9:
                if (this.<i>__11 < this.<>f__this.mTacticsUnits.Count)
                {
                    goto Label_06A3;
                }
                this.<progress>__10 /= (float) this.<>f__this.mTacticsUnits.Count;
                this.<>f__this.mLoadProgress_Animation = this.<progress>__10;
                this.<>f__this.UpdateLoadProgress();
                this.<unitsReady>__12 = 1;
                this.<i>__13 = 0;
                goto Label_077B;
            Label_0741:
                if (this.<>f__this.mTacticsUnits[this.<i>__13].IsLoadedPartially != null)
                {
                    goto Label_076D;
                }
                this.<unitsReady>__12 = 0;
                goto Label_0796;
            Label_076D:
                this.<i>__13 += 1;
            Label_077B:
                if (this.<i>__13 < this.<>f__this.mTacticsUnits.Count)
                {
                    goto Label_0741;
                }
            Label_0796:
                if (this.<unitsReady>__12 == null)
                {
                    goto Label_0675;
                }
                this.<$s_232>__14 = this.<>f__this.mTacticsUnits.GetEnumerator();
                num = -3;
            Label_07BA:
                try
                {
                    switch ((num - 8))
                    {
                        case 0:
                            goto Label_0832;
                    }
                    goto Label_087B;
                Label_07CB:
                    this.<tuc>__15 = &this.<$s_232>__14.Current;
                    if (this.<tuc>__15.Unit.IsBreakObj != null)
                    {
                        goto Label_07F6;
                    }
                    goto Label_087B;
                Label_07F6:
                    this.<job_idx>__16 = 1;
                    goto Label_0850;
                Label_0802:
                    if (this.<tuc>__15.LoadAddModels(this.<job_idx>__16) == null)
                    {
                        goto Label_0842;
                    }
                    goto Label_0832;
                Label_081D:
                    this.$current = null;
                    this.$PC = 8;
                    flag = 1;
                    goto Label_1183;
                Label_0832:
                    if (this.<tuc>__15.IsLoading != null)
                    {
                        goto Label_081D;
                    }
                Label_0842:
                    this.<job_idx>__16 += 1;
                Label_0850:
                    if (this.<job_idx>__16 < this.<tuc>__15.Unit.UnitParam.search)
                    {
                        goto Label_0802;
                    }
                    this.<tuc>__15.ReflectDispModel();
                Label_087B:
                    if (&this.<$s_232>__14.MoveNext() != null)
                    {
                        goto Label_07CB;
                    }
                    goto Label_08A5;
                }
                finally
                {
                Label_0890:
                    if (flag == null)
                    {
                        goto Label_0894;
                    }
                Label_0894:
                    ((List<TacticsUnitController>.Enumerator) this.<$s_232>__14).Dispose();
                }
            Label_08A5:
                this.<sceneNames>__17 = new List<string>();
                this.<loadRequests>__18 = new List<LoadRequest>();
                this.<i>__19 = 0;
                goto Label_0992;
            Label_08C7:
                this.<unit>__20 = this.<>f__this.mBattle.Units[this.<i>__19];
                this.<j>__21 = 0;
                goto Label_0969;
            Label_08F4:
                this.<skill>__22 = this.<unit>__20.BattleSkills[this.<j>__21].SkillParam;
                if (string.IsNullOrEmpty(this.<skill>__22.SceneName) != null)
                {
                    goto Label_095B;
                }
                if (this.<sceneNames>__17.Contains(this.<skill>__22.SceneName) != null)
                {
                    goto Label_095B;
                }
                this.<sceneNames>__17.Add(this.<skill>__22.SceneName);
            Label_095B:
                this.<j>__21 += 1;
            Label_0969:
                if (this.<j>__21 < this.<unit>__20.BattleSkills.Count)
                {
                    goto Label_08F4;
                }
                this.<i>__19 += 1;
            Label_0992:
                if (this.<i>__19 < this.<>f__this.mBattle.Units.Count)
                {
                    goto Label_08C7;
                }
                this.<i>__23 = 0;
                goto Label_09FE;
            Label_09BE:
                this.<req>__24 = AssetManager.LoadAsync<GameObject>(AssetPath.SkillScene(this.<sceneNames>__17[this.<i>__23]));
                this.<loadRequests>__18.Add(this.<req>__24);
                this.<i>__23 += 1;
            Label_09FE:
                if (this.<i>__23 < this.<sceneNames>__17.Count)
                {
                    goto Label_09BE;
                }
                this.<i>__25 = 0;
                goto Label_0B2F;
            Label_0A20:
                if (this.<loadRequests>__18[this.<i>__25].isDone != null)
                {
                    goto Label_0A5F;
                }
                this.$current = this.<loadRequests>__18[this.<i>__25];
                this.$PC = 9;
                goto Label_1183;
            Label_0A5F:
                if ((this.<loadRequests>__18[this.<i>__25].asset != null) == null)
                {
                    goto Label_0B21;
                }
                this.<src>__26 = this.<loadRequests>__18[this.<i>__25].asset as GameObject;
                this.<go>__27 = Object.Instantiate<GameObject>(this.<src>__26);
                this.<go>__27.SetActive(0);
                this.<settings>__28 = this.<go>__27.GetComponent<BattleSceneSettings>();
                if ((this.<settings>__28 != null) == null)
                {
                    goto Label_0B11;
                }
                this.<settings>__28.set_name(this.<src>__26.get_name());
                this.<>f__this.mBattleScenes.Add(this.<settings>__28);
                goto Label_0B21;
            Label_0B11:
                Object.Destroy(this.<go>__27.get_gameObject());
            Label_0B21:
                this.<i>__25 += 1;
            Label_0B2F:
                if (this.<i>__25 < this.<loadRequests>__18.Count)
                {
                    goto Label_0A20;
                }
                this.$current = new WaitForEndOfFrame();
                this.$PC = 10;
                goto Label_1183;
            Label_0B5D:
                this.<i>__29 = 0;
                goto Label_0C82;
            Label_0B69:
                this.<controller>__30 = this.<>f__this.mTacticsUnits[this.<i>__29];
                this.<unitVisible>__31 = 1;
                if (this.<isSuspend>__3 == null)
                {
                    goto Label_0C57;
                }
                if (this.<controller>__30.Unit.IsGimmick == null)
                {
                    goto Label_0BD2;
                }
                if (this.<controller>__30.Unit.IsDisableGimmick() == null)
                {
                    goto Label_0BD2;
                }
                this.<controller>__30.get_gameObject().SetActive(0);
            Label_0BD2:
                if (this.<controller>__30.Unit.IsGimmick != null)
                {
                    goto Label_0C4B;
                }
                this.<controller>__30.UpdateBadStatus();
                this.<castSkill>__32 = this.<controller>__30.Unit.CastSkill;
                if (this.<castSkill>__32 == null)
                {
                    goto Label_0C4B;
                }
                if (this.<castSkill>__32.CastType != 2)
                {
                    goto Label_0C3B;
                }
                this.<unitVisible>__31 = 0;
                this.<controller>__30.SetCastJump();
                goto Label_0C4B;
            Label_0C3B:
                this.<controller>__30.ChargeIcon.Open();
            Label_0C4B:
                this.<controller>__30.UpdateShields(1);
            Label_0C57:
                this.<controller>__30.SetVisible(this.<unitVisible>__31);
                this.<controller>__30.ShowHPGauge(0);
                this.<i>__29 += 1;
            Label_0C82:
                if (this.<i>__29 < this.<>f__this.mTacticsUnits.Count)
                {
                    goto Label_0B69;
                }
                this.<idx>__33 = 0;
                goto Label_0D58;
            Label_0CA9:
                this.<log>__34 = this.<>f__this.mBattle.Logs[this.<idx>__33];
                if (this.<log>__34 != null)
                {
                    goto Label_0CDA;
                }
                goto Label_0D68;
            Label_0CDA:
                if ((this.<log>__34 as LogFailCondition) == null)
                {
                    goto Label_0D4A;
                }
                this.<log_lfc>__35 = this.<log>__34 as LogFailCondition;
                this.<tuc>__36 = this.<>f__this.FindUnitController(this.<log_lfc>__35.self);
                if ((this.<tuc>__36 != null) == null)
                {
                    goto Label_0D4A;
                }
                this.<tuc>__36.LockUpdateBadStatus(this.<log_lfc>__35.condition, 1);
                this.<tuc>__36.UpdateBadStatus();
            Label_0D4A:
                this.<idx>__33 += 1;
            Label_0D58:
                if (this.<idx>__33 < BattleLogServer.MAX_REGISTER_BATTLE_LOG)
                {
                    goto Label_0CA9;
                }
            Label_0D68:
                this.<>f__this.RefreshJumpSpots();
                this.<questStatus>__37 = GameObjectID.FindGameObject(this.<>f__this.mBattleUI.QuestStatusID);
                if ((this.<questStatus>__37 != null) == null)
                {
                    goto Label_0DAA;
                }
                GameParameter.UpdateAll(this.<questStatus>__37);
            Label_0DAA:
                if (this.<isSuspend>__3 == null)
                {
                    goto Label_0DC0;
                }
                this.<>f__this.OnGimmickUpdate();
            Label_0DC0:
                this.<>f__this.ReflectWeatherInfo(null);
                this.<wth_data>__38 = null;
                if (this.<isSuspend>__3 == null)
                {
                    goto Label_0DE9;
                }
                this.<wth_data>__38 = WeatherData.CurrentWeatherData;
            Label_0DE9:
                this.<idx>__39 = 0;
                goto Label_0E8C;
            Label_0DF5:
                this.<log>__40 = this.<>f__this.mBattle.Logs[this.<idx>__39];
                if (this.<log>__40 != null)
                {
                    goto Label_0E26;
                }
                goto Label_0E9C;
            Label_0E26:
                if ((this.<log>__40 as LogWeather) == null)
                {
                    goto Label_0E7E;
                }
                this.<log_wth>__41 = this.<log>__40 as LogWeather;
                this.<wth_data>__38 = this.<log_wth>__41.WeatherData;
                this.<>f__this.mBattle.Logs.RemoveLogOffs(this.<idx>__39--);
            Label_0E7E:
                this.<idx>__39 += 1;
            Label_0E8C:
                if (this.<idx>__39 < BattleLogServer.MAX_REGISTER_BATTLE_LOG)
                {
                    goto Label_0DF5;
                }
            Label_0E9C:
                if (this.<wth_data>__38 == null)
                {
                    goto Label_0FA0;
                }
                if (this.<wth_data>__38.CondEffectLists.Count == null)
                {
                    goto Label_0F19;
                }
                this.<$s_233>__42 = this.<>f__this.mTacticsUnits.GetEnumerator();
            Label_0ED2:
                try
                {
                    goto Label_0EF3;
                Label_0ED7:
                    this.<tuc>__43 = &this.<$s_233>__42.Current;
                    this.<tuc>__43.UpdateBadStatus();
                Label_0EF3:
                    if (&this.<$s_233>__42.MoveNext() != null)
                    {
                        goto Label_0ED7;
                    }
                    goto Label_0F19;
                }
                finally
                {
                Label_0F08:
                    ((List<TacticsUnitController>.Enumerator) this.<$s_233>__42).Dispose();
                }
            Label_0F19:
                this.<>f__this.StartCoroutine(this.<>f__this.StopWeatherEffect(1));
                goto Label_0F4A;
            Label_0F36:
                this.$current = null;
                this.$PC = 11;
                goto Label_1183;
            Label_0F4A:
                if (this.<>f__this.IsStoppedWeatherEffect == null)
                {
                    goto Label_0F36;
                }
                this.<>f__this.StartCoroutine(this.<>f__this.SetWeatherEffect(this.<wth_data>__38));
                goto Label_0F90;
            Label_0F7C:
                this.$current = null;
                this.$PC = 12;
                goto Label_1183;
            Label_0F90:
                if (this.<>f__this.IsSetWeatherEffect == null)
                {
                    goto Label_0F7C;
                }
            Label_0FA0:
                this.<td_lists>__44 = TrickData.GetEffectAll();
                if (this.<td_lists>__44.Count == null)
                {
                    goto Label_0FC0;
                }
                TrickData.UpdateMarker();
            Label_0FC0:
                if (string.IsNullOrEmpty(this.<>f__this.mBattle.CurrentMap.EventSceneName) != null)
                {
                    goto Label_1156;
                }
                this.<req>__45 = GameUtility.LoadResourceAsyncChecked<EventScript>("Events/" + this.<>f__this.mBattle.CurrentMap.EventSceneName);
                if (this.<req>__45.isDone != null)
                {
                    goto Label_1037;
                }
                this.$current = this.<req>__45.StartCoroutine();
                this.$PC = 13;
                goto Label_1183;
            Label_1037:
                this.<>f__this.mEventScript = this.<req>__45.asset as EventScript;
                if ((this.<req>__45.asset != null) == null)
                {
                    goto Label_1078;
                }
                this.<>f__this.mEventScript.ResetTriggers();
            Label_1078:
                if (this.<isSuspend>__3 == null)
                {
                    goto Label_1156;
                }
                if ((this.<>f__this.mEventScript != null) == null)
                {
                    goto Label_1156;
                }
                if (this.<>f__this.mEventScript.mSequences == null)
                {
                    goto Label_1156;
                }
                if (this.<>f__this.mBattle.EventTriggers == null)
                {
                    goto Label_1156;
                }
                if (((int) this.<>f__this.mBattle.EventTriggers.Length) != ((int) this.<>f__this.mEventScript.mSequences.Length))
                {
                    goto Label_1156;
                }
                this.<idx>__46 = 0;
                goto Label_1139;
            Label_10F8:
                this.<>f__this.mEventScript.mSequences[this.<idx>__46].Triggered = this.<>f__this.mBattle.EventTriggers[this.<idx>__46];
                this.<idx>__46 += 1;
            Label_1139:
                if (this.<idx>__46 < ((int) this.<>f__this.mBattle.EventTriggers.Length))
                {
                    goto Label_10F8;
                }
            Label_1156:
                this.$current = AssetManager.UnloadUnusedAssets();
                this.$PC = 14;
                goto Label_1183;
            Label_116E:
                this.<>f__this.mMapReady = 1;
                this.$PC = -1;
            Label_1181:
                return 0;
            Label_1183:
                return 1;
                return flag2;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <LoadShieldEffectsAsync>c__Iterator37 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal int <i>__0;
            internal List<SkillParam> skills;
            internal LoadRequest <req>__1;
            internal int $PC;
            internal object $current;
            internal List<SkillParam> <$>skills;
            internal SceneBattle <>f__this;

            public <LoadShieldEffectsAsync>c__Iterator37()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0021;

                    case 1:
                        goto Label_0075;
                }
                goto Label_00DD;
            Label_0021:
                this.<i>__0 = 0;
                goto Label_00B4;
            Label_002D:
                this.<req>__1 = GameUtility.LoadResourceAsyncChecked<GameObject>("Effects/" + this.skills[this.<i>__0].defend_effect);
                this.$current = this.<req>__1.StartCoroutine();
                this.$PC = 1;
                goto Label_00DF;
            Label_0075:
                this.<>f__this.mShieldEffects[this.skills[this.<i>__0]] = this.<req>__1.asset as GameObject;
                this.<i>__0 += 1;
            Label_00B4:
                if (this.<i>__0 < this.skills.Count)
                {
                    goto Label_002D;
                }
                this.<>f__this.mLoadingShieldEffects = 0;
                this.$PC = -1;
            Label_00DD:
                return 0;
            Label_00DF:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <LoadUIAsync>c__Iterator36 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal LoadRequest <loadReq>__0;
            internal QuestAssets <assets>__1;
            internal int <idx>__2;
            internal int <i>__3;
            internal int <i>__4;
            internal int <i>__5;
            internal MyPhoton <pt>__6;
            internal GameManager <gm>__7;
            internal LoadRequest <reqOwnerIndex>__8;
            internal LoadRequest <req>__9;
            internal LoadRequest <reqEnemyCursor>__10;
            internal LoadRequest <reqPlayerCursor>__11;
            internal int $PC;
            internal object $current;
            internal SceneBattle <>f__this;

            public <LoadUIAsync>c__Iterator36()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0035;

                    case 1:
                        goto Label_006B;

                    case 2:
                        goto Label_0793;

                    case 3:
                        goto Label_0836;

                    case 4:
                        goto Label_0893;

                    case 5:
                        goto Label_0925;

                    case 6:
                        goto Label_0962;
                }
                goto Label_0AB7;
            Label_0035:
                this.<loadReq>__0 = AssetManager.LoadAsync("UI/QuestAssets", typeof(QuestAssets));
                goto Label_008C;
            Label_0054:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 1;
                goto Label_0AB9;
            Label_006B:
                this.<>f__this.mLoadProgress_UI = this.<loadReq>__0.progress;
                this.<>f__this.UpdateLoadProgress();
            Label_008C:
                if (this.<loadReq>__0.isDone == null)
                {
                    goto Label_0054;
                }
                this.<assets>__1 = (QuestAssets) this.<loadReq>__0.asset;
                this.<>f__this.mRenkeiAuraEffect = this.<assets>__1.RenkeiAura;
                this.<>f__this.mRenkeiAssistEffect = this.<assets>__1.RenkeiAssist;
                this.<>f__this.mRenkeiChargeEffect = this.<assets>__1.RenkeiCharge;
                this.<>f__this.mRenkeiHitEffect = this.<assets>__1.RenkeiHit;
                this.<>f__this.mChargeGrnTargetUnitEffect = this.<assets>__1.ChargeGrnTargetUnit;
                this.<>f__this.mChargeRedTargetUnitEffect = this.<assets>__1.ChargeRedTargetUnit;
                this.<>f__this.mKnockBackEffect = this.<assets>__1.KnockBackEffect;
                this.<>f__this.mJumpFallEffect = this.<assets>__1.JumpFallEffect;
                this.<>f__this.mTrickMarker = this.<assets>__1.TrickMarker;
                this.<>f__this.mTrickMarkerDics.Clear();
                if (this.<assets>__1.TrickMarkerGos == null)
                {
                    goto Label_022D;
                }
                if (this.<assets>__1.TrickMarkerIds == null)
                {
                    goto Label_022D;
                }
                if (((int) this.<assets>__1.TrickMarkerGos.Length) != ((int) this.<assets>__1.TrickMarkerIds.Length))
                {
                    goto Label_022D;
                }
                this.<idx>__2 = 0;
                goto Label_0215;
            Label_01D3:
                this.<>f__this.mTrickMarkerDics.Add(this.<assets>__1.TrickMarkerIds[this.<idx>__2], this.<assets>__1.TrickMarkerGos[this.<idx>__2]);
                this.<idx>__2 += 1;
            Label_0215:
                if (this.<idx>__2 < ((int) this.<assets>__1.TrickMarkerGos.Length))
                {
                    goto Label_01D3;
                }
            Label_022D:
                this.<>f__this.mDamageTemplate = this.<assets>__1.DamagePopup;
                this.<>f__this.mDamageDsgTemplate = this.<assets>__1.DamageDsgPopup;
                this.<>f__this.mHpHealTemplate = this.<assets>__1.HealPopup;
                this.<>f__this.mMpHealTemplate = this.<assets>__1.MpHealPopup;
                this.<>f__this.mGuardPopup = this.<assets>__1.GuardPopup;
                this.<>f__this.mAbsorbPopup = this.<assets>__1.AbsorbPopup;
                this.<>f__this.mCriticalPopup = this.<assets>__1.CriticalPopup;
                this.<>f__this.mBackstabPopup = this.<assets>__1.BackstabPopup;
                this.<>f__this.mMissPopup = this.<assets>__1.MissPopup;
                this.<>f__this.mPerfectAvoidPopup = this.<assets>__1.PerfectAvoidPopup;
                this.<>f__this.mWeakPopup = this.<assets>__1.WeakPopup;
                this.<>f__this.mResistPopup = this.<assets>__1.ResistPopup;
                this.<>f__this.mGutsPopup = this.<assets>__1.GutsPopup;
                this.<>f__this.mParamChangeEffectTemplate = this.<assets>__1.ParamChangeEffect;
                this.<>f__this.mConditionChangeEffectTemplate = this.<assets>__1.ConditionChangeEffect;
                this.<>f__this.mSummonUnitEffect = this.<assets>__1.SummonEffect;
                this.<>f__this.mUnitChangeEffect = this.<assets>__1.UnitChangeEffect;
                this.<>f__this.mWithdrawUnitEffect = this.<assets>__1.WithdrawUnitEffect;
                this.<>f__this.mJumpSpotEffectTemplate = this.<assets>__1.JumpSpotEffect;
                this.<>f__this.mAutoHealEffectTemplate = this.<assets>__1.AutoHealEffect;
                this.<>f__this.mDrainHpEffectTemplate = this.<assets>__1.DrainHpEffectTemplate;
                this.<>f__this.mDrainMpEffectTemplate = this.<assets>__1.DrainMpEffectTemplate;
                this.<>f__this.mSkillNamePlate = Object.Instantiate<SkillNamePlate>(this.<assets>__1.SkillNamePlate);
                this.<>f__this.mBlockedGridMarker = this.<>f__this.InstantiateSafe<GameObject>(this.<assets>__1.GridBlocked);
                GameUtility.ToggleGraphic(this.<>f__this.mBlockedGridMarker, 0);
                this.<i>__3 = 0;
                goto Label_0501;
            Label_046A:
                this.<>f__this.mGemDrainEffect_Front[this.<i>__3] = Object.Instantiate<GemParticle>(this.<assets>__1.GemDrainEffect_Front);
                this.<>f__this.mGemDrainEffect_Front[this.<i>__3].Prefab = this.<assets>__1.GemDrainEffect_Front;
                this.<>f__this.mGemDrainEffect_Front[this.<i>__3].get_gameObject().SetActive(0);
                this.<>f__this.mGemDrainEffect_Front[this.<i>__3].get_transform().SetParent(this.<>f__this.get_transform(), 0);
                this.<i>__3 += 1;
            Label_0501:
                if (this.<i>__3 < ((int) this.<>f__this.mGemDrainEffect_Front.Length))
                {
                    goto Label_046A;
                }
                this.<i>__4 = 0;
                goto Label_05BC;
            Label_0525:
                this.<>f__this.mGemDrainEffect_Side[this.<i>__4] = Object.Instantiate<GemParticle>(this.<assets>__1.GemDrainEffect_Side);
                this.<>f__this.mGemDrainEffect_Side[this.<i>__4].Prefab = this.<assets>__1.GemDrainEffect_Front;
                this.<>f__this.mGemDrainEffect_Side[this.<i>__4].get_gameObject().SetActive(0);
                this.<>f__this.mGemDrainEffect_Side[this.<i>__4].get_transform().SetParent(this.<>f__this.get_transform(), 0);
                this.<i>__4 += 1;
            Label_05BC:
                if (this.<i>__4 < ((int) this.<>f__this.mGemDrainEffect_Side.Length))
                {
                    goto Label_0525;
                }
                this.<i>__5 = 0;
                goto Label_0677;
            Label_05E0:
                this.<>f__this.mGemDrainEffect_Back[this.<i>__5] = Object.Instantiate<GemParticle>(this.<assets>__1.GemDrainEffect_Back);
                this.<>f__this.mGemDrainEffect_Back[this.<i>__5].Prefab = this.<assets>__1.GemDrainEffect_Front;
                this.<>f__this.mGemDrainEffect_Back[this.<i>__5].get_gameObject().SetActive(0);
                this.<>f__this.mGemDrainEffect_Back[this.<i>__5].get_transform().SetParent(this.<>f__this.get_transform(), 0);
                this.<i>__5 += 1;
            Label_0677:
                if (this.<i>__5 < ((int) this.<>f__this.mGemDrainEffect_Back.Length))
                {
                    goto Label_05E0;
                }
                this.<>f__this.mGemDrainHitEffect = this.<assets>__1.GemDrainHitEffect;
                this.<>f__this.mTreasureDropTemplate = this.<assets>__1.DropItemEffect;
                this.<>f__this.mTreasureGoldTemplate = this.<assets>__1.DropGoldEffect;
                this.<>f__this.mTreasureBoxTemplate = this.<assets>__1.TreasureBox;
                this.<>f__this.mMapAddGemEffectTemplate = this.<assets>__1.GemEffect;
                this.<>f__this.UnitCursor = this.<assets>__1.UnitCursor;
                this.<>f__this.TargetMarkerTemplate = this.<assets>__1.TargetMarker;
                this.<>f__this.DirectionArrowTemplate = this.<assets>__1.DirectionArrow;
                this.<>f__this.GaugeOverlayTemplate = this.<assets>__1.PlayerHPGauge;
                this.<>f__this.EnemyGaugeOverlayTemplate = this.<assets>__1.EnemyHPGauge;
                this.$current = this.<>f__this.StartCoroutine(BadStatusEffects.LoadEffects(this.<assets>__1));
                this.$PC = 2;
                goto Label_0AB9;
            Label_0793:
                this.<>f__this.mBattleUI = Object.Instantiate<GameObject>(this.<assets>__1.UI).GetComponent<FlowNode_BattleUI>();
                this.<pt>__6 = PunMonoSingleton<MyPhoton>.Instance;
                this.<gm>__7 = MonoSingleton<GameManager>.Instance;
                if (this.<pt>__6.IsMultiPlay != null)
                {
                    goto Label_07F9;
                }
                if (this.<gm>__7.AudienceMode != null)
                {
                    goto Label_07F9;
                }
                if (this.<gm>__7.IsVSCpuBattle == null)
                {
                    goto Label_09A2;
                }
            Label_07F9:
                this.<reqOwnerIndex>__8 = GameUtility.LoadResourceAsyncChecked<GameObject>("Effects/UnitOwnerIndex");
                if (this.<reqOwnerIndex>__8.isDone != null)
                {
                    goto Label_0836;
                }
                this.$current = this.<reqOwnerIndex>__8.StartCoroutine();
                this.$PC = 3;
                goto Label_0AB9;
            Label_0836:
                this.<>f__this.mUnitOwnerIndex = Object.Instantiate<GameObject>(this.<reqOwnerIndex>__8.asset as GameObject);
                this.<req>__9 = GameUtility.LoadResourceAsyncChecked<GameObject>("UI/BattleUI_MultiPlay");
                if (this.<req>__9.isDone != null)
                {
                    goto Label_0893;
                }
                this.$current = this.<req>__9.StartCoroutine();
                this.$PC = 4;
                goto Label_0AB9;
            Label_0893:
                this.<>f__this.mBattleUI_MultiPlay = Object.Instantiate<GameObject>(this.<req>__9.asset as GameObject).GetComponent<FlowNode_BattleUI_MultiPlay>();
                if (this.<pt>__6.IsMultiVersus != null)
                {
                    goto Label_08E8;
                }
                if (this.<gm>__7.AudienceMode != null)
                {
                    goto Label_08E8;
                }
                if (this.<gm>__7.IsVSCpuBattle == null)
                {
                    goto Label_09A2;
                }
            Label_08E8:
                this.<reqEnemyCursor>__10 = GameUtility.LoadResourceAsyncChecked<GameObject>("UI/Versus_EnemyTarget");
                if (this.<reqEnemyCursor>__10.isDone != null)
                {
                    goto Label_0925;
                }
                this.$current = this.<reqEnemyCursor>__10.StartCoroutine();
                this.$PC = 5;
                goto Label_0AB9;
            Label_0925:
                this.<reqPlayerCursor>__11 = GameUtility.LoadResourceAsyncChecked<GameObject>("UI/Versus_PlayerTarget");
                if (this.<reqPlayerCursor>__11.isDone != null)
                {
                    goto Label_0962;
                }
                this.$current = this.<reqPlayerCursor>__11.StartCoroutine();
                this.$PC = 6;
                goto Label_0AB9;
            Label_0962:
                this.<>f__this.mVersusEnemyTarget = Object.Instantiate<GameObject>(this.<reqEnemyCursor>__10.asset as GameObject);
                this.<>f__this.mVersusPlayerTarget = Object.Instantiate<GameObject>(this.<reqPlayerCursor>__11.asset as GameObject);
            Label_09A2:
                if ((this.<assets>__1.BattleScene != null) == null)
                {
                    goto Label_09FF;
                }
                this.<>f__this.mBattleSceneRoot = Object.Instantiate<BattleSceneSettings>(this.<assets>__1.BattleScene);
                this.<>f__this.mBattleSceneRoot.get_gameObject().SetActive(0);
                this.<>f__this.mDefaultBattleScene = this.<>f__this.mBattleSceneRoot;
            Label_09FF:
                this.<>f__this.InitTouchArea();
                this.<>f__this.mUnitMarkerTemplates[0] = this.<>f__this.TargetMarkerTemplate;
                if ((this.<>f__this.mBlockedGridMarker != null) == null)
                {
                    goto Label_0A5E;
                }
                this.<>f__this.mBlockedGridMarker.get_transform().SetParent(this.<>f__this.mTouchController.get_transform(), 0);
            Label_0A5E:
                if ((this.<assets>__1.Prefab_SkillTargetWindow != null) == null)
                {
                    goto Label_0A8F;
                }
                this.<>f__this.mSkillTargetWindow = Object.Instantiate<SkillTargetWindow>(this.<assets>__1.Prefab_SkillTargetWindow);
            Label_0A8F:
                this.<>f__this.mContinueWindowRes = this.<assets>__1.ContinueWindow;
                this.<>f__this.GotoQuestStart();
                this.$PC = -1;
            Label_0AB7:
                return 0;
            Label_0AB9:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <OnGoodJobClickUnit>c__AnonStorey1E8
        {
            internal Unit unit;

            public <OnGoodJobClickUnit>c__AnonStorey1E8()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B2(Unit u)
            {
                return (u == this.unit);
            }
        }

        [CompilerGenerated]
        private sealed class <OtherPlayerDisconnect>c__AnonStorey1DA
        {
            internal SceneBattle.MultiPlayer mp;

            public <OtherPlayerDisconnect>c__AnonStorey1DA()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A1(SceneBattle.MultiPlayRecvData r)
            {
                return (r.pid == this.mp.PlayerID);
            }

            internal bool <>m__A2(JSON_MyPhotonPlayerParam sp)
            {
                return (sp.playerIndex == this.mp.PlayerIndex);
            }
        }

        [CompilerGenerated]
        private sealed class <OtherPlayerDisconnect>c__AnonStorey1DB
        {
            internal JSON_MyPhotonPlayerParam sp;

            public <OtherPlayerDisconnect>c__AnonStorey1DB()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A3(SceneBattle.MultiPlayer t)
            {
                return (t.PlayerIndex == this.sp.playerIndex);
            }
        }

        [CompilerGenerated]
        private sealed class <OtherPlayerDisconnect>c__AnonStorey1DC
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <OtherPlayerDisconnect>c__AnonStorey1DC()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A4(MyPhoton.MyPlayer p)
            {
                return (p.playerID == this.data.pid);
            }
        }

        [CompilerGenerated]
        private sealed class <OtherPlayerResume>c__AnonStorey1DD
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <OtherPlayerResume>c__AnonStorey1DD()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A5(JSON_MyPhotonPlayerParam sp)
            {
                return (sp.playerIndex == this.data.pidx);
            }
        }

        [CompilerGenerated]
        private sealed class <RecvEvent>c__AnonStorey1D8
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <RecvEvent>c__AnonStorey1D8()
            {
                base..ctor();
                return;
            }

            internal bool <>m__9B(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.data.pid);
            }

            internal bool <>m__9C(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.data.pidx);
            }
        }

        [CompilerGenerated]
        private sealed class <RecvEvent>c__AnonStorey1D9
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <RecvEvent>c__AnonStorey1D9()
            {
                base..ctor();
                return;
            }

            internal bool <>m__9D(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.data.pid);
            }

            internal bool <>m__9E(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.data.pidx);
            }

            internal bool <>m__9F(SceneBattle.MultiPlayRecvData p)
            {
                return (p.pidx == this.data.pidx);
            }

            internal bool <>m__A0(SceneBattle.MultiPlayRecvData d)
            {
                return (d.pidx == this.data.pidx);
            }
        }

        [CompilerGenerated]
        private sealed class <RecvEventAudience>c__AnonStorey1E3
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <RecvEventAudience>c__AnonStorey1E3()
            {
                base..ctor();
                return;
            }

            internal bool <>m__AD(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.data.pid);
            }
        }

        [CompilerGenerated]
        private sealed class <RecvReinforcementUnit>c__Iterator34 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal int <i>__0;
            internal Unit <unit>__1;
            internal GameObject <newUnit>__2;
            internal TacticsUnitController <controller>__3;
            internal JSON_MyPhotonPlayerParam <playerparam>__4;
            internal GameObject <VersusCursor>__5;
            internal int $PC;
            internal object $current;
            internal SceneBattle <>f__this;

            public <RecvReinforcementUnit>c__Iterator34()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B9(JSON_MyPhotonPlayerParam p)
            {
                return (p.playerIndex == this.<unit>__1.OwnerPlayerIndex);
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0021;

                    case 1:
                        goto Label_00FA;
                }
                goto Label_02EF;
            Label_0021:
                this.<i>__0 = 0;
                goto Label_02C3;
            Label_002D:
                this.<unit>__1 = this.<>f__this.Battle.Units[this.<i>__0];
                if ((this.<unit>__1.IsUnitFlag(0x400000) == null) || (this.<unit>__1.IsDead != null))
                {
                    goto Label_02B5;
                }
                this.<newUnit>__2 = new GameObject(this.<unit>__1.UnitName);
                this.<controller>__3 = this.<newUnit>__2.AddComponent<TacticsUnitController>();
                this.<controller>__3.SetupUnit(this.<unit>__1);
                this.<controller>__3.KeepUnitHidden = 1;
                this.<controller>__3.InitHPGauge(this.<>f__this.OverlayCanvas, this.<>f__this.GetGaugeTemplateFor(this.<unit>__1));
                goto Label_00FA;
            Label_00E3:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 1;
                goto Label_02F1;
            Label_00FA:
                if (this.<controller>__3.IsLoading != null)
                {
                    goto Label_00E3;
                }
                this.<unit>__1.LoadBattleVoice();
                if (this.<>f__this.Battle.IsMultiPlay == null)
                {
                    goto Label_022C;
                }
                this.<playerparam>__4 = PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted().Find(new Predicate<JSON_MyPhotonPlayerParam>(this.<>m__B9));
                this.<controller>__3.CreateOwnerIndexUI(this.<>f__this.OverlayCanvas, this.<>f__this.mUnitOwnerIndex, this.<playerparam>__4);
                this.<controller>__3.ShowOwnerIndexUI(0);
                if ((this.<>f__this.Battle.IsMultiVersus == null) || (this.<unit>__1.Side == 2))
                {
                    goto Label_022C;
                }
                this.<VersusCursor>__5 = (this.<unit>__1.Side != null) ? this.<>f__this.mVersusEnemyTarget : this.<>f__this.mVersusPlayerTarget;
                this.<>f__this.mVersusPlayerTarget.get_gameObject().SetActive(0);
                this.<>f__this.mVersusEnemyTarget.get_gameObject().SetActive(0);
                this.<controller>__3.CreateVersusCursor(this.<VersusCursor>__5);
                this.<controller>__3.ShowVersusCursor(1);
                this.<controller>__3.PlayVersusCursor(0);
            Label_022C:
                this.<newUnit>__2.get_transform().set_parent(this.<>f__this.mTacticsSceneRoot.get_transform());
                this.<newUnit>__2.get_transform().set_position(this.<>f__this.CalcGridCenter(this.<>f__this.mBattle.GetUnitGridPosition(this.<unit>__1)));
                this.<controller>__3.SetVisible(1);
                this.<controller>__3.ClearBadStatusLocks();
                this.<controller>__3.UpdateBadStatus();
                this.<>f__this.mTacticsUnits.Add(this.<controller>__3);
            Label_02B5:
                this.<i>__0 += 1;
            Label_02C3:
                if (this.<i>__0 < this.<>f__this.Battle.Units.Count)
                {
                    goto Label_002D;
                }
                goto Label_02EF;
            Label_02EF:
                return 0;
            Label_02F1:
                return 1;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <RecvResume>c__Iterator33 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal MyPhoton <pt>__0;
            internal MultiPlayResumeParam <param>__1;
            internal byte[] resumedata;
            internal List<MultiPlayResumeSkillData> <buff>__2;
            internal List<MultiPlayResumeSkillData> <cond>__3;
            internal Unit <target>__4;
            internal Unit <rage>__5;
            internal Unit <casttarget>__6;
            internal int <idx>__7;
            internal MultiPlayResumeUnitData <mpr_unit>__8;
            internal Unit <unit>__9;
            internal int <i>__10;
            internal TacticsUnitController <controller>__11;
            internal int <i>__12;
            internal int <i>__13;
            internal int <i>__14;
            internal int <i>__15;
            internal Unit <unit>__16;
            internal int <idx>__17;
            internal MultiPlayResumeParam.WeatherInfo <wi>__18;
            internal Unit <modify_unit>__19;
            internal GameObject <obj>__20;
            internal WeatherData <wth_data>__21;
            internal int <i>__22;
            internal SceneBattle.MultiPlayRecvData <data>__23;
            internal int $PC;
            internal object $current;
            internal byte[] <$>resumedata;
            internal SceneBattle <>f__this;

            public <RecvResume>c__Iterator33()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B8(SceneBattle.MultiPlayRecvData d)
            {
                return (d.pidx == this.<data>__23.pidx);
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public unsafe bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0025;

                    case 1:
                        goto Label_09B2;

                    case 2:
                        goto Label_0B84;
                }
                goto Label_0B8B;
            Label_0025:
                this.<pt>__0 = PunMonoSingleton<MyPhoton>.Instance;
                this.<param>__1 = null;
                if (GameUtility.Binary2Object<MultiPlayResumeParam>(&this.<param>__1, this.resumedata) != null)
                {
                    goto Label_0052;
                }
                goto Label_0B8B;
            Label_0052:
                if (this.<param>__1.resumeID == this.<pt>__0.MyPlayerIndex)
                {
                    goto Label_0072;
                }
                goto Label_0B8B;
            Label_0072:
                this.<buff>__2 = new List<MultiPlayResumeSkillData>();
                this.<cond>__3 = new List<MultiPlayResumeSkillData>();
                this.<target>__4 = null;
                this.<rage>__5 = null;
                this.<casttarget>__6 = null;
                this.<idx>__7 = this.<>f__this.Battle.AllUnits.Count;
                goto Label_0159;
            Label_00BD:
                this.<mpr_unit>__8 = this.<param>__1.unit[this.<idx>__7];
                if (string.IsNullOrEmpty(this.<mpr_unit>__8.boi) == null)
                {
                    goto Label_00EF;
                }
                goto Label_014B;
            Label_00EF:
                this.<unit>__9 = this.<>f__this.Battle.BreakObjCreate(this.<mpr_unit>__8.boi, this.<mpr_unit>__8.x, this.<mpr_unit>__8.y, null, null, this.<mpr_unit>__8.own);
                if (this.<unit>__9 == null)
                {
                    goto Label_014B;
                }
                this.<unit>__9.SetUnitFlag(1, 0);
            Label_014B:
                this.<idx>__7 += 1;
            Label_0159:
                if (this.<idx>__7 < ((int) this.<param>__1.unit.Length))
                {
                    goto Label_00BD;
                }
                this.<i>__10 = 0;
                goto Label_03BF;
            Label_017D:
                if (this.<param>__1.unit[this.<i>__10] == null)
                {
                    goto Label_03B1;
                }
                if (this.<>f__this.Battle.AllUnits[this.<i>__10] != null)
                {
                    goto Label_01B9;
                }
                goto Label_03B1;
            Label_01B9:
                this.<target>__4 = (this.<param>__1.unit[this.<i>__10].target == -1) ? null : this.<>f__this.Battle.AllUnits[this.<param>__1.unit[this.<i>__10].target];
                this.<rage>__5 = (this.<param>__1.unit[this.<i>__10].ragetarget == -1) ? null : this.<>f__this.Battle.AllUnits[this.<param>__1.unit[this.<i>__10].ragetarget];
                this.<casttarget>__6 = (this.<param>__1.unit[this.<i>__10].casttarget == -1) ? null : this.<>f__this.Battle.AllUnits[this.<param>__1.unit[this.<i>__10].casttarget];
                this.<>f__this.RecvBuildBuffAndCond(&this.<buff>__2, &this.<cond>__3, this.<param>__1.unit[this.<i>__10]);
                this.<>f__this.Battle.AllUnits[this.<i>__10].SetupResume(this.<param>__1.unit[this.<i>__10], this.<target>__4, this.<rage>__5, this.<casttarget>__6, this.<buff>__2, this.<cond>__3);
                this.<controller>__11 = this.<>f__this.FindUnitController(this.<>f__this.Battle.AllUnits[this.<i>__10]);
                this.<>f__this.RecvUnitDead(this.<controller>__11, this.<>f__this.Battle.AllUnits[this.<i>__10]);
                this.<>f__this.ResetMultiPlayerTransform(this.<>f__this.Battle.AllUnits[this.<i>__10]);
            Label_03B1:
                this.<i>__10 += 1;
            Label_03BF:
                if (this.<i>__10 < ((int) this.<param>__1.unit.Length))
                {
                    goto Label_017D;
                }
                Unit.UNIT_CAST_INDEX = this.<param>__1.unitcastindex;
                this.<i>__12 = 0;
                goto Label_042E;
            Label_03F8:
                this.<>f__this.Battle.SetRandSeed(this.<i>__12, this.<param>__1.rndseed[this.<i>__12]);
                this.<i>__12 += 1;
            Label_042E:
                if (this.<i>__12 < ((int) this.<param>__1.rndseed.Length))
                {
                    goto Label_03F8;
                }
                this.<i>__13 = 0;
                goto Label_0488;
            Label_0452:
                this.<>f__this.Battle.SetRandDamageSeed(this.<i>__13, this.<param>__1.dmgrndseed[this.<i>__13]);
                this.<i>__13 += 1;
            Label_0488:
                if (this.<i>__13 < ((int) this.<param>__1.dmgrndseed.Length))
                {
                    goto Label_0452;
                }
                this.<>f__this.Battle.DamageSeed = this.<param>__1.damageseed;
                this.<>f__this.Battle.Seed = this.<param>__1.seed;
                this.<>f__this.mUnitStartCountTotal = this.<param>__1.unitstartcount;
                this.<>f__this.RestoreTreasureCount(this.<param>__1.treasurecount);
                this.<>f__this.Battle.VersusTurnCount = this.<param>__1.versusturn;
                if (this.<>f__this.Battle.IsMultiVersus == null)
                {
                    goto Label_054D;
                }
                this.<>f__this.ArenaActionCountSet(this.<>f__this.Battle.RemainVersusTurnCount);
            Label_054D:
                if ((this.<param>__1.gimmick == null) || (((int) this.<param>__1.gimmick.Length) != this.<>f__this.Battle.GimmickEventList.Count))
                {
                    goto Label_0627;
                }
                this.<i>__14 = 0;
                goto Label_060F;
            Label_0590:
                this.<>f__this.Battle.GimmickEventList[this.<i>__14].count = this.<param>__1.gimmick[this.<i>__14].count;
                this.<>f__this.Battle.GimmickEventList[this.<i>__14].IsCompleted = this.<param>__1.gimmick[this.<i>__14].completed == 1;
                this.<i>__14 += 1;
            Label_060F:
                if (this.<i>__14 < ((int) this.<param>__1.gimmick.Length))
                {
                    goto Label_0590;
                }
            Label_0627:
                if (this.<param>__1.trick == null)
                {
                    goto Label_07B3;
                }
                TrickData.ClearEffect();
                this.<i>__15 = 0;
                goto Label_076F;
            Label_0648:
                this.<unit>__16 = (this.<param>__1.trick[this.<i>__15].cun == -1) ? null : this.<>f__this.Battle.AllUnits[this.<param>__1.trick[this.<i>__15].cun];
                TrickData.SuspendEffect(this.<param>__1.trick[this.<i>__15].tid, this.<param>__1.trick[this.<i>__15].grx, this.<param>__1.trick[this.<i>__15].gry, this.<param>__1.trick[this.<i>__15].tag, this.<unit>__16, this.<param>__1.trick[this.<i>__15].ccl, this.<param>__1.trick[this.<i>__15].rnk, this.<param>__1.trick[this.<i>__15].rcp, this.<param>__1.trick[this.<i>__15].rac);
                this.<i>__15 += 1;
            Label_076F:
                if (this.<i>__15 < ((int) this.<param>__1.trick.Length))
                {
                    goto Label_0648;
                }
                if (((int) this.<param>__1.trick.Length) == null)
                {
                    goto Label_07A9;
                }
                this.<>f__this.Battle.RelinkTrickGimmickEvents();
            Label_07A9:
                TrickData.UpdateMarker();
                goto Label_07BD;
            Label_07B3:
                TrickData.ClearEffect();
                TrickData.UpdateMarker();
            Label_07BD:
                if (((this.<param>__1.scr_ev_trg == null) || ((this.<>f__this.mEventScript != null) == null)) || ((this.<>f__this.mEventScript.mSequences == null) || (((int) this.<>f__this.mEventScript.mSequences.Length) != ((int) this.<param>__1.scr_ev_trg.Length))))
                {
                    goto Label_087C;
                }
                this.<idx>__17 = 0;
                goto Label_0864;
            Label_0828:
                this.<>f__this.mEventScript.mSequences[this.<idx>__17].Triggered = this.<param>__1.scr_ev_trg[this.<idx>__17];
                this.<idx>__17 += 1;
            Label_0864:
                if (this.<idx>__17 < ((int) this.<param>__1.scr_ev_trg.Length))
                {
                    goto Label_0828;
                }
            Label_087C:
                this.<wi>__18 = this.<param>__1.wti;
                if (string.IsNullOrEmpty(this.<wi>__18.wid) != null)
                {
                    goto Label_094B;
                }
                this.<modify_unit>__19 = ((0 > this.<wi>__18.mun) || (this.<wi>__18.mun >= this.<>f__this.Battle.Units.Count)) ? null : this.<>f__this.Battle.Units[this.<wi>__18.mun];
                WeatherData.SuspendWeather(this.<wi>__18.wid, this.<>f__this.Battle.Units, this.<modify_unit>__19, this.<wi>__18.rnk, this.<wi>__18.rcp, this.<wi>__18.ccl);
            Label_094B:
                this.<obj>__20 = GameObjectID.FindGameObject("UI_TREASURE");
                if ((this.<obj>__20 != null) == null)
                {
                    goto Label_0977;
                }
                GameParameter.UpdateAll(this.<obj>__20);
            Label_0977:
                this.<>f__this.Battle.StartOrder(1, 1, 0);
                this.$current = this.<>f__this.StartCoroutine(this.<>f__this.RecvReinforcementUnit());
                this.$PC = 1;
                goto Label_0B8D;
            Label_09B2:
                this.<>f__this.Battle.StartOrder(1, 1, 0);
                this.<>f__this.RefreshJumpSpots();
                this.<>f__this.Battle.ClockTime = this.<param>__1.ctm;
                this.<>f__this.Battle.ClockTimeTotal = this.<param>__1.ctt;
                this.<>f__this.ReflectWeatherInfo(null);
                this.<wth_data>__21 = WeatherData.CurrentWeatherData;
                if (this.<wth_data>__21 == null)
                {
                    goto Label_0A45;
                }
                this.<>f__this.StartCoroutine(this.<>f__this.RestoreWeather(this.<wth_data>__21));
            Label_0A45:
                if (this.<param>__1.otherresume == null)
                {
                    goto Label_0B16;
                }
                this.<i>__22 = 0;
                goto Label_0AED;
            Label_0A61:
                this.<data>__23 = new SceneBattle.MultiPlayRecvData();
                this.<data>__23.pidx = this.<param>__1.otherresume[this.<i>__22];
                if (this.<>f__this.mRecvResumeRequest.Find(new Predicate<SceneBattle.MultiPlayRecvData>(this.<>m__B8)) != null)
                {
                    goto Label_0ADF;
                }
                this.<>f__this.mRecvResumeRequest.Add(this.<data>__23);
                Debug.Log("OtherPlayerResume:" + ((int) this.<data>__23.pidx));
            Label_0ADF:
                this.<i>__22 += 1;
            Label_0AED:
                if (this.<i>__22 < ((int) this.<param>__1.otherresume.Length))
                {
                    goto Label_0A61;
                }
                this.<>f__this.Battle.ResumeState = 1;
            Label_0B16:
                this.<>f__this.mResumeMultiPlay = 0;
                this.<>f__this.mResumeSend = 0;
                this.<>f__this.ResumeSuccess = 1;
                this.<>f__this.Battle.SyncStart = 1;
                this.<pt>__0.AddMyPlayerParam("BattleStart", (bool) 1);
                this.<>f__this.mBattleUI_MultiPlay.OnMyPlayerResume();
                this.$current = null;
                this.$PC = 2;
                goto Label_0B8D;
            Label_0B84:
                this.$PC = -1;
            Label_0B8B:
                return 0;
            Label_0B8D:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <RecvResumeSuccess>c__AnonStorey1D7
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <RecvResumeSuccess>c__AnonStorey1D7()
            {
                base..ctor();
                return;
            }

            internal bool <>m__99(SceneBattle.MultiPlayRecvData p)
            {
                return (p.pidx == this.data.pidx);
            }

            internal bool <>m__9A(SceneBattle.MultiPlayRecvData d)
            {
                return (d.pidx == this.data.pidx);
            }
        }

        [CompilerGenerated]
        private sealed class <RestoreWeather>c__Iterator35 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal WeatherData wth_data;
            internal List<TacticsUnitController>.Enumerator <$s_258>__0;
            internal TacticsUnitController <tuc>__1;
            internal int $PC;
            internal object $current;
            internal WeatherData <$>wth_data;
            internal SceneBattle <>f__this;

            public <RestoreWeather>c__Iterator35()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public unsafe bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0025;

                    case 1:
                        goto Label_00D7;

                    case 2:
                        goto Label_011C;
                }
                goto Label_0133;
            Label_0025:
                if (this.wth_data != null)
                {
                    goto Label_0035;
                }
                goto Label_0133;
            Label_0035:
                if (this.wth_data.CondEffectLists.Count == null)
                {
                    goto Label_00A7;
                }
                this.<$s_258>__0 = this.<>f__this.mTacticsUnits.GetEnumerator();
            Label_0060:
                try
                {
                    goto Label_0081;
                Label_0065:
                    this.<tuc>__1 = &this.<$s_258>__0.Current;
                    this.<tuc>__1.UpdateBadStatus();
                Label_0081:
                    if (&this.<$s_258>__0.MoveNext() != null)
                    {
                        goto Label_0065;
                    }
                    goto Label_00A7;
                }
                finally
                {
                Label_0096:
                    ((List<TacticsUnitController>.Enumerator) this.<$s_258>__0).Dispose();
                }
            Label_00A7:
                this.<>f__this.StartCoroutine(this.<>f__this.StopWeatherEffect(1));
                goto Label_00D7;
            Label_00C4:
                this.$current = null;
                this.$PC = 1;
                goto Label_0135;
            Label_00D7:
                if (this.<>f__this.IsStoppedWeatherEffect == null)
                {
                    goto Label_00C4;
                }
                this.<>f__this.StartCoroutine(this.<>f__this.SetWeatherEffect(this.wth_data));
                goto Label_011C;
            Label_0109:
                this.$current = null;
                this.$PC = 2;
                goto Label_0135;
            Label_011C:
                if (this.<>f__this.IsSetWeatherEffect == null)
                {
                    goto Label_0109;
                }
                this.$PC = -1;
            Label_0133:
                return 0;
            Label_0135:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <SendCheckMultiPlay>c__AnonStorey1E7
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <SendCheckMultiPlay>c__AnonStorey1E7()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B1(SceneBattle.MultiPlayRecvData p)
            {
                return (p.pidx == this.data.pidx);
            }
        }

        [CompilerGenerated]
        private sealed class <SendFinishLoad>c__AnonStorey1E9
        {
            internal MyPhoton.MyPlayer me;

            public <SendFinishLoad>c__AnonStorey1E9()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B3(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.me.playerID);
            }
        }

        [CompilerGenerated]
        private sealed class <SendInputEntryBattle>c__AnonStorey1E6
        {
            internal Unit enemy;

            public <SendInputEntryBattle>c__AnonStorey1E6()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B0(Unit u)
            {
                return (u == this.enemy);
            }
        }

        [CompilerGenerated]
        private sealed class <SendRequestResume>c__AnonStorey1EA
        {
            internal MyPhoton.MyPlayer player;

            public <SendRequestResume>c__AnonStorey1EA()
            {
                base..ctor();
                return;
            }

            internal bool <>m__B4(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerID == this.player.playerID);
            }
        }

        [CompilerGenerated]
        private sealed class <SetWeatherEffect>c__Iterator31 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal WeatherData wd;
            internal LoadRequest <req>__0;
            internal GameObject <go>__1;
            internal GameObject <go_parent>__2;
            internal CanvasGroup <cg>__3;
            internal int $PC;
            internal object $current;
            internal WeatherData <$>wd;
            internal SceneBattle <>f__this;

            public <SetWeatherEffect>c__Iterator31()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0021;

                    case 1:
                        goto Label_00AA;
                }
                goto Label_01B4;
            Label_0021:
                this.<>f__this.IsSetWeatherEffect = 0;
                if (this.wd == null)
                {
                    goto Label_01A1;
                }
                if (string.IsNullOrEmpty(this.wd.WeatherParam.Effect) != null)
                {
                    goto Label_01A1;
                }
                this.<req>__0 = AssetManager.LoadAsync<GameObject>(AssetPath.WeatherEffect(this.wd.WeatherParam.Effect));
                if (this.<req>__0 == null)
                {
                    goto Label_01A1;
                }
                if (this.<req>__0.isDone != null)
                {
                    goto Label_00AA;
                }
                this.$current = this.<req>__0.StartCoroutine();
                this.$PC = 1;
                goto Label_01B6;
            Label_00AA:
                this.<go>__1 = this.<req>__0.asset as GameObject;
                if (this.<go>__1 == null)
                {
                    goto Label_019A;
                }
                this.<>f__this.GoWeatherEffect = Object.Instantiate<GameObject>(this.<go>__1);
                if (this.<>f__this.GoWeatherEffect == null)
                {
                    goto Label_019A;
                }
                this.<go_parent>__2 = this.<>f__this.GetWeatherEffectAttach();
                if (this.<go_parent>__2 != null)
                {
                    goto Label_0132;
                }
                this.<go_parent>__2 = this.<>f__this.OverlayCanvas.get_gameObject();
            Label_0132:
                this.<>f__this.GoWeatherEffect.get_transform().SetParent(this.<go_parent>__2.get_transform(), 0);
                this.<>f__this.GoWeatherEffect.SetActive(1);
                this.<cg>__3 = this.<>f__this.GoWeatherEffect.GetComponent<CanvasGroup>();
                if (this.<cg>__3 == null)
                {
                    goto Label_019A;
                }
                this.<cg>__3.set_alpha(1f);
            Label_019A:
                this.<req>__0 = null;
            Label_01A1:
                this.<>f__this.IsSetWeatherEffect = 1;
                this.$PC = -1;
            Label_01B4:
                return 0;
            Label_01B6:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <SkipLog>c__AnonStorey1E4
        {
            internal TacticsUnitController tuc;

            public <SkipLog>c__AnonStorey1E4()
            {
                base..ctor();
                return;
            }

            internal bool <>m__AE(Unit unit)
            {
                return (unit == this.tuc.Unit);
            }
        }

        [CompilerGenerated]
        private sealed class <SkipLog>c__AnonStorey1E5
        {
            internal SceneBattle.ReqCreateBreakObjUc rcb;
            internal SceneBattle <>f__this;

            public <SkipLog>c__AnonStorey1E5()
            {
                base..ctor();
                return;
            }

            internal void <>m__AF()
            {
                TacticsUnitController controller;
                controller = this.<>f__this.FindUnitController(this.rcb.mTargetUnit);
                if ((controller != null) == null)
                {
                    goto Label_002A;
                }
                controller.SetVisible(1);
            Label_002A:
                this.rcb.mIsLoad = 0;
                this.<>f__this.ReqCreateBreakObjUcLists.Remove(this.rcb);
                return;
            }
        }

        [CompilerGenerated]
        private sealed class <StartQuestAsync>c__Iterator2F : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal GameManager <gm>__0;
            internal bool <Audience>__1;
            internal string questID;
            internal BattleCore.Json_Battle jsonBtl;
            internal PlayerData <player>__2;
            internal QuestParam <questParam>__3;
            internal string <title>__4;
            internal PlayerPartyTypes <party_type>__5;
            internal int <party_idx>__6;
            internal PartyData <party_data>__7;
            internal int <idx>__8;
            internal PartyData <partydata>__9;
            internal int <partyNum>__10;
            internal int <i>__11;
            internal int <count>__12;
            internal SupportData <guest>__13;
            internal Json_Unit <friend>__14;
            internal int <i>__15;
            internal AbilityData <tobiraMasterAbility>__16;
            internal JobData[] <jobs>__17;
            internal int <i>__18;
            internal JobData <job>__19;
            internal Json_Job <jsonjob>__20;
            internal int <j>__21;
            internal int <j>__22;
            internal int <j>__23;
            internal int <j>__24;
            internal int <team_id>__25;
            internal BattleCore.Json_BtlOrdeal <ordeal>__26;
            internal PartyData <party_data>__27;
            internal int <ictr>__28;
            internal int <myPlayerIndex>__29;
            internal UnitData[] <units>__30;
            internal int[] <ownerPlayerIndex>__31;
            internal int[] <placementIdx>__32;
            internal bool[] <subFlag>__33;
            internal MyPhoton <pt>__34;
            internal MyPhoton.MyRoom <r>__35;
            internal JSON_MyPhotonRoomParam <rp>__36;
            internal List<JSON_MyPhotonPlayerParam> <startedPlayers>__37;
            internal int <partyUnitNum>__38;
            internal int <unitID>__39;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_217>__40;
            internal JSON_MyPhotonPlayerParam <member>__41;
            internal VS_MODE <mode>__42;
            internal int <unitcnt>__43;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_218>__44;
            internal JSON_MyPhotonPlayerParam <member>__45;
            internal JSON_MyPhotonPlayerParam.UnitDataElem[] <$s_219>__46;
            internal int <$s_220>__47;
            internal JSON_MyPhotonPlayerParam.UnitDataElem <elem>__48;
            internal int <unitIDBaseNext>__49;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_221>__50;
            internal JSON_MyPhotonPlayerParam <startedPlayer>__51;
            internal int <unitSlotNum>__52;
            internal int <unitIDBase>__53;
            internal JSON_MyPhotonPlayerParam.UnitDataElem[] <$s_222>__54;
            internal int <$s_223>__55;
            internal JSON_MyPhotonPlayerParam.UnitDataElem <elem>__56;
            internal int <unitID>__57;
            internal int <unitIDBaseNext>__58;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_224>__59;
            internal JSON_MyPhotonPlayerParam <startedPlayer>__60;
            internal int <unitSlotNum>__61;
            internal int <unitIDBase>__62;
            internal JSON_MyPhotonPlayerParam.UnitDataElem[] <$s_225>__63;
            internal int <$s_226>__64;
            internal JSON_MyPhotonPlayerParam.UnitDataElem <elem>__65;
            internal int <unitID>__66;
            internal AudienceStartParam <startedParam>__67;
            internal JSON_MyPhotonRoomParam <rp>__68;
            internal int <i>__69;
            internal int <partyUnitNum>__70;
            internal int <unitID>__71;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_227>__72;
            internal JSON_MyPhotonPlayerParam <member>__73;
            internal VS_MODE <mode>__74;
            internal int <unitcnt>__75;
            internal List<JSON_MyPhotonPlayerParam>.Enumerator <$s_228>__76;
            internal JSON_MyPhotonPlayerParam <member>__77;
            internal JSON_MyPhotonPlayerParam.UnitDataElem[] <$s_229>__78;
            internal int <$s_230>__79;
            internal JSON_MyPhotonPlayerParam.UnitDataElem <elem>__80;
            internal PartyData <party>__81;
            internal VersusCpuData <cpu>__82;
            internal int <unitID>__83;
            internal int <partyUnitNum>__84;
            internal int <i>__85;
            internal long <uniqueID>__86;
            internal int <i>__87;
            internal GameObject <nav>__88;
            internal int $PC;
            internal object $current;
            internal string <$>questID;
            internal BattleCore.Json_Battle <$>jsonBtl;
            internal SceneBattle <>f__this;
            private static Predicate<SupportData> <>f__am$cache60;

            public <StartQuestAsync>c__Iterator2F()
            {
                base..ctor();
                return;
            }

            private static bool <>m__B6(SupportData f)
            {
                return (f.FUID == GlobalVars.SelectedFriendID);
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public unsafe bool MoveNext()
            {
                uint num;
                int num2;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0025;

                    case 1:
                        goto Label_0041;

                    case 2:
                        goto Label_1B35;
                }
                goto Label_1D5E;
            Label_0025:
                goto Label_0041;
            Label_002A:
                this.$current = new WaitForEndOfFrame();
                this.$PC = 1;
                goto Label_1D60;
            Label_0041:
                if (this.<>f__this.mStartCalled == null)
                {
                    goto Label_002A;
                }
                this.<gm>__0 = MonoSingleton<GameManager>.Instance;
                this.<Audience>__1 = this.<gm>__0.AudienceMode;
                this.<>f__this.mStartPlayerLevel = MonoSingleton<GameManager>.Instance.Player.Lv;
                MonoSingleton<GameManager>.Instance.Player.ResetMissionClearAt();
                GlobalVars.SelectedQuestID = this.questID;
                if (this.<>f__this.mCurrentQuest == null)
                {
                    goto Label_00CB;
                }
                GlobalVars.LastQuestState.Set(this.<>f__this.mCurrentQuest.state);
            Label_00CB:
                GlobalVars.LastPlayedQuest.Set(this.questID);
                if (((this.jsonBtl == null) || (this.jsonBtl.btlinfo == null)) || (this.jsonBtl.btlinfo.quest_ranking == null))
                {
                    goto Label_0145;
                }
                GlobalVars.SelectedRankingQuestParam = RankingQuestParam.FindRankingQuestParam(this.questID, this.jsonBtl.btlinfo.quest_ranking.schedule_id, this.jsonBtl.btlinfo.quest_ranking.type);
            Label_0145:
                this.<player>__2 = MonoSingleton<GameManager>.Instance.Player;
                this.<>f__this.mCurrentQuest = MonoSingleton<GameManager>.Instance.FindQuest(this.questID);
                this.<>f__this.mIsFirstPlay = this.<>f__this.mCurrentQuest.state == 0;
                this.<>f__this.mIsFirstWin = (this.<>f__this.mCurrentQuest.state == 2) == 0;
                this.<>f__this.mRevertQuestNewIfRetire = this.<>f__this.mIsFirstPlay;
                this.<questParam>__3 = this.<>f__this.mCurrentQuest;
                this.<player>__2.ConsumeStamina(this.<questParam>__3.RequiredApWithPlayerLv(this.<player>__2.Lv, 1));
                this.<title>__4 = this.<questParam>__3.name;
                if (this.<questParam>__3.type != 7)
                {
                    goto Label_0241;
                }
                this.<title>__4 = this.<questParam>__3.title + " " + this.<questParam>__3.name;
            Label_0241:
                ProgressWindow.SetTexts(this.<title>__4, LocalizedText.Get(this.<questParam>__3.storyTextID));
                GlobalVars.IsSkipQuestDemo = 0;
                this.<player>__2.MarkQuestChallenged(this.<>f__this.mCurrentQuest.iname);
                this.<>f__this.mStartQuestState = this.<>f__this.mCurrentQuest.state;
                if (this.<>f__this.IsPlayingArenaQuest == null)
                {
                    goto Label_0417;
                }
                this.<party_type>__5 = 3;
                this.<party_idx>__6 = this.<party_type>__5;
                GlobalVars.SelectedPartyIndex.Set(this.<party_idx>__6);
                this.<player>__2.SetPartyCurrentIndex(this.<party_idx>__6);
                this.jsonBtl = new BattleCore.Json_Battle();
                this.jsonBtl.btlinfo = new BattleCore.Json_BtlInfo();
                this.jsonBtl.btlid = 1L;
                this.jsonBtl.btlinfo.qid = this.questID;
                if (this.<party_idx>__6 >= this.<player>__2.Partys.Count)
                {
                    goto Label_03FC;
                }
                this.<party_data>__7 = this.<player>__2.Partys[this.<party_idx>__6];
                if (this.<party_data>__7.Num <= 0)
                {
                    goto Label_03FC;
                }
                this.jsonBtl.btlinfo.units = new BattleCore.Json_BtlUnit[this.<party_data>__7.MAX_UNIT];
                this.<idx>__8 = 0;
                goto Label_03E6;
            Label_038E:
                this.jsonBtl.btlinfo.units[this.<idx>__8] = new BattleCore.Json_BtlUnit();
                this.jsonBtl.btlinfo.units[this.<idx>__8].iid = (int) this.<party_data>__7.GetUnitUniqueID(this.<idx>__8);
                this.<idx>__8 += 1;
            Label_03E6:
                if (this.<idx>__8 < this.<party_data>__7.MAX_UNIT)
                {
                    goto Label_038E;
                }
            Label_03FC:
                this.jsonBtl.btlinfo.seed = this.<player>__2.ArenaSeed;
            Label_0417:
                if ((this.jsonBtl != null) || (string.IsNullOrEmpty(this.questID) != null))
                {
                    goto Label_0FA1;
                }
                this.jsonBtl = new BattleCore.Json_Battle();
                this.jsonBtl.btlinfo = new BattleCore.Json_BtlInfo();
                this.<partydata>__9 = this.<player>__2.Partys[GlobalVars.SelectedPartyIndex];
                this.<partyNum>__10 = this.<partydata>__9.Num;
                if (this.<partyNum>__10 <= 0)
                {
                    goto Label_0539;
                }
                this.jsonBtl.btlinfo.units = new BattleCore.Json_BtlUnit[this.<partydata>__9.MAX_UNIT];
                this.<i>__11 = 0;
                this.<count>__12 = 0;
                goto Label_0523;
            Label_04BD:
                this.jsonBtl.btlinfo.units[this.<i>__11] = new BattleCore.Json_BtlUnit();
                this.jsonBtl.btlinfo.units[this.<i>__11].iid = (int) this.<partydata>__9.GetUnitUniqueID(this.<i>__11);
                this.<count>__12 += 1;
                this.<i>__11 += 1;
            Label_0523:
                if (this.<i>__11 < this.<partydata>__9.MAX_UNIT)
                {
                    goto Label_04BD;
                }
            Label_0539:
                if (<>f__am$cache60 != null)
                {
                    goto Label_055D;
                }
                <>f__am$cache60 = new Predicate<SupportData>(SceneBattle.<StartQuestAsync>c__Iterator2F.<>m__B6);
            Label_055D:
                this.<guest>__13 = this.<player>__2.Supports.Find(<>f__am$cache60);
                if (this.<guest>__13 == null)
                {
                    goto Label_0DB2;
                }
                this.jsonBtl.btlinfo.help.unit = new Json_Unit();
                this.<friend>__14 = new Json_Unit();
                this.<friend>__14.iid = this.<guest>__13.Unit.UniqueID;
                this.<friend>__14.iname = this.<guest>__13.UnitID;
                this.<friend>__14.exp = MonoSingleton<GameManager>.Instance.MasterParam.GetUnitLevelExp(this.<guest>__13.UnitLevel);
                this.<friend>__14.lv = this.<guest>__13.UnitLevel;
                if (this.<guest>__13.Unit.MasterAbility == null)
                {
                    goto Label_06A1;
                }
                this.<friend>__14.abil = new Json_MasterAbility();
                this.<friend>__14.abil.iid = this.<guest>__13.Unit.MasterAbility.UniqueID;
                this.<friend>__14.abil.iname = this.<guest>__13.Unit.MasterAbility.Param.iname;
                this.<friend>__14.abil.exp = this.<guest>__13.Unit.MasterAbility.Exp;
            Label_06A1:
                if (this.<guest>__13.Unit.TobiraMasterAbilitys == null)
                {
                    goto Label_07E3;
                }
                if (this.<guest>__13.Unit.TobiraMasterAbilitys.Count <= 0)
                {
                    goto Label_06F6;
                }
                this.<friend>__14.door_abils = new Json_Ability[this.<guest>__13.Unit.TobiraMasterAbilitys.Count];
            Label_06F6:
                this.<i>__15 = 0;
                goto Label_07C3;
            Label_0702:
                this.<tobiraMasterAbility>__16 = this.<guest>__13.Unit.TobiraMasterAbilitys[this.<i>__15];
                if (this.<tobiraMasterAbility>__16 != null)
                {
                    goto Label_0733;
                }
                goto Label_07B5;
            Label_0733:
                this.<friend>__14.door_abils[this.<i>__15] = new Json_Ability();
                this.<friend>__14.door_abils[this.<i>__15].iid = this.<tobiraMasterAbility>__16.UniqueID;
                this.<friend>__14.door_abils[this.<i>__15].iname = this.<tobiraMasterAbility>__16.Param.iname;
                this.<friend>__14.door_abils[this.<i>__15].exp = this.<tobiraMasterAbility>__16.Exp;
            Label_07B5:
                this.<i>__15 += 1;
            Label_07C3:
                if (this.<i>__15 < this.<guest>__13.Unit.TobiraMasterAbilitys.Count)
                {
                    goto Label_0702;
                }
            Label_07E3:
                this.<friend>__14.plus = this.<guest>__13.Unit.AwakeLv;
                this.<friend>__14.rare = this.<guest>__13.UnitRarity;
                this.<friend>__14.select = new Json_UnitSelectable();
                this.<friend>__14.select.job = this.<guest>__13.Unit.CurrentJob.UniqueID;
                this.<jobs>__17 = this.<guest>__13.Unit.Jobs;
                if (((int) this.<jobs>__17.Length) <= 0)
                {
                    goto Label_0D97;
                }
                this.<friend>__14.jobs = new Json_Job[(int) this.<jobs>__17.Length];
                this.<i>__18 = 0;
                goto Label_0D84;
            Label_0891:
                this.<job>__19 = this.<jobs>__17[this.<i>__18];
                this.<jsonjob>__20 = new Json_Job();
                this.<jsonjob>__20.iid = this.<job>__19.UniqueID;
                this.<jsonjob>__20.iname = this.<job>__19.JobID;
                this.<jsonjob>__20.rank = this.<job>__19.Rank;
                this.<jsonjob>__20.equips = new Json_Equip[(int) this.<job>__19.Equips.Length];
                this.<j>__21 = 0;
                goto Label_09C9;
            Label_091A:
                this.<jsonjob>__20.equips[this.<j>__21] = new Json_Equip();
                this.<jsonjob>__20.equips[this.<j>__21].iid = this.<job>__19.Equips[this.<j>__21].UniqueID;
                this.<jsonjob>__20.equips[this.<j>__21].iname = this.<job>__19.Equips[this.<j>__21].ItemID;
                this.<jsonjob>__20.equips[this.<j>__21].exp = this.<job>__19.Equips[this.<j>__21].Exp;
                this.<j>__21 += 1;
            Label_09C9:
                if (this.<j>__21 < ((int) this.<jsonjob>__20.equips.Length))
                {
                    goto Label_091A;
                }
                if ((this.<job>__19.LearnAbilitys == null) || (this.<job>__19.LearnAbilitys.Count <= 0))
                {
                    goto Label_0B0E;
                }
                this.<jsonjob>__20.abils = new Json_Ability[this.<job>__19.LearnAbilitys.Count];
                this.<j>__22 = 0;
                goto Label_0AF3;
            Label_0A33:
                this.<jsonjob>__20.abils[this.<j>__22] = new Json_Ability();
                this.<jsonjob>__20.abils[this.<j>__22].iid = this.<job>__19.LearnAbilitys[this.<j>__22].UniqueID;
                this.<jsonjob>__20.abils[this.<j>__22].iname = this.<job>__19.LearnAbilitys[this.<j>__22].Param.iname;
                this.<jsonjob>__20.abils[this.<j>__22].exp = this.<job>__19.LearnAbilitys[this.<j>__22].Exp;
                this.<j>__22 += 1;
            Label_0AF3:
                if (this.<j>__22 < this.<job>__19.LearnAbilitys.Count)
                {
                    goto Label_0A33;
                }
            Label_0B0E:
                if (this.<job>__19.ArtifactDatas == null)
                {
                    goto Label_0CA1;
                }
                this.<jsonjob>__20.artis = new Json_Artifact[(int) this.<job>__19.ArtifactDatas.Length];
                this.<j>__23 = 0;
                goto Label_0C89;
            Label_0B47:
                if (this.<job>__19.ArtifactDatas[this.<j>__23] != null)
                {
                    goto Label_0B63;
                }
                goto Label_0C7B;
            Label_0B63:
                this.<jsonjob>__20.artis[this.<j>__23] = new Json_Artifact();
                this.<jsonjob>__20.artis[this.<j>__23].iid = this.<job>__19.ArtifactDatas[this.<j>__23].UniqueID;
                this.<jsonjob>__20.artis[this.<j>__23].iname = this.<job>__19.ArtifactDatas[this.<j>__23].ArtifactParam.iname;
                this.<jsonjob>__20.artis[this.<j>__23].exp = this.<job>__19.ArtifactDatas[this.<j>__23].Exp;
                this.<jsonjob>__20.artis[this.<j>__23].rare = this.<job>__19.ArtifactDatas[this.<j>__23].Rarity;
                this.<jsonjob>__20.artis[this.<j>__23].fav = (this.<job>__19.ArtifactDatas[this.<j>__23].IsFavorite == null) ? 0 : 1;
            Label_0C7B:
                this.<j>__23 += 1;
            Label_0C89:
                if (this.<j>__23 < ((int) this.<job>__19.ArtifactDatas.Length))
                {
                    goto Label_0B47;
                }
            Label_0CA1:
                if (string.IsNullOrEmpty(this.<job>__19.SelectedSkin) != null)
                {
                    goto Label_0CCC;
                }
                this.<jsonjob>__20.cur_skin = this.<job>__19.SelectedSkin;
            Label_0CCC:
                this.<jsonjob>__20.select = new Json_JobSelectable();
                this.<jsonjob>__20.select.abils = new long[(int) this.<job>__19.AbilitySlots.Length];
                this.<j>__24 = 0;
                goto Label_0D41;
            Label_0D0A:
                this.<jsonjob>__20.select.abils[this.<j>__24] = this.<job>__19.AbilitySlots[this.<j>__24];
                this.<j>__24 += 1;
            Label_0D41:
                if (this.<j>__24 < ((int) this.<jsonjob>__20.select.abils.Length))
                {
                    goto Label_0D0A;
                }
                this.<friend>__14.jobs[this.<i>__18] = this.<jsonjob>__20;
                this.<i>__18 += 1;
            Label_0D84:
                if (this.<i>__18 < ((int) this.<jobs>__17.Length))
                {
                    goto Label_0891;
                }
            Label_0D97:
                this.jsonBtl.btlinfo.help.unit = this.<friend>__14;
            Label_0DB2:
                if (this.<>f__this.mCurrentQuest.type != 15)
                {
                    goto Label_0F7F;
                }
                this.jsonBtl.btlinfo.ordeals = new BattleCore.Json_BtlOrdeal[3];
                this.jsonBtl.btlinfo.ordeals[0] = new BattleCore.Json_BtlOrdeal();
                this.jsonBtl.btlinfo.ordeals[0].units = this.jsonBtl.btlinfo.units;
                this.jsonBtl.btlinfo.ordeals[0].help = this.jsonBtl.btlinfo.help;
                this.<team_id>__25 = 1;
                goto Label_0F73;
            Label_0E50:
                this.jsonBtl.btlinfo.ordeals[this.<team_id>__25] = new BattleCore.Json_BtlOrdeal();
                this.<ordeal>__26 = this.jsonBtl.btlinfo.ordeals[this.<team_id>__25];
                this.<party_data>__27 = this.<player>__2.Partys[(GlobalVars.SelectedPartyIndex + 1) + this.<team_id>__25];
                if ((this.<party_data>__27 == null) || (this.<party_data>__27.Num <= 0))
                {
                    goto Label_0F59;
                }
                this.<ordeal>__26.units = new BattleCore.Json_BtlUnit[this.<party_data>__27.MAX_UNIT];
                this.<ictr>__28 = 0;
                goto Label_0F43;
            Label_0EF5:
                this.<ordeal>__26.units[this.<ictr>__28] = new BattleCore.Json_BtlUnit();
                this.<ordeal>__26.units[this.<ictr>__28].iid = (int) this.<party_data>__27.GetUnitUniqueID(this.<ictr>__28);
                this.<ictr>__28 += 1;
            Label_0F43:
                if (this.<ictr>__28 < this.<party_data>__27.MAX_UNIT)
                {
                    goto Label_0EF5;
                }
            Label_0F59:
                this.<ordeal>__26.help = null;
                this.<team_id>__25 += 1;
            Label_0F73:
                if (this.<team_id>__25 < 3)
                {
                    goto Label_0E50;
                }
            Label_0F7F:
                this.jsonBtl.btlinfo.key = null;
                this.jsonBtl.btlinfo.seed = 0;
            Label_0FA1:
                if (((this.<>f__this.mCurrentQuest.type != 15) || (this.jsonBtl.btlinfo.ordeals == null)) || (((int) this.jsonBtl.btlinfo.ordeals.Length) == null))
                {
                    goto Label_1032;
                }
                this.jsonBtl.btlinfo.units = this.jsonBtl.btlinfo.ordeals[0].units;
                this.jsonBtl.btlinfo.help = this.jsonBtl.btlinfo.ordeals[0].help;
            Label_1032:
                this.<myPlayerIndex>__29 = 0;
                this.<units>__30 = null;
                this.<ownerPlayerIndex>__31 = null;
                this.<placementIdx>__32 = null;
                this.<subFlag>__33 = null;
                this.<pt>__34 = PunMonoSingleton<MyPhoton>.Instance;
                if (this.<pt>__34.IsMultiPlay == null)
                {
                    goto Label_162F;
                }
                this.<myPlayerIndex>__29 = this.<pt>__34.MyPlayerIndex;
                this.<r>__35 = this.<pt>__34.GetCurrentRoom();
                this.<rp>__36 = (this.<r>__35 != null) ? JSON_MyPhotonRoomParam.Parse(this.<r>__35.json) : null;
                this.<startedPlayers>__37 = this.<pt>__34.GetMyPlayersStarted();
                this.<partyUnitNum>__38 = 0;
                if (this.<pt>__34.IsMultiVersus == null)
                {
                    goto Label_12C5;
                }
                this.<unitID>__39 = 0;
                this.<$s_217>__40 = this.<startedPlayers>__37.GetEnumerator();
            Label_10F9:
                try
                {
                    goto Label_1129;
                Label_10FE:
                    this.<member>__41 = &this.<$s_217>__40.Current;
                    this.<partyUnitNum>__38 += (int) this.<member>__41.units.Length;
                Label_1129:
                    if (&this.<$s_217>__40.MoveNext() != null)
                    {
                        goto Label_10FE;
                    }
                    goto Label_114F;
                }
                finally
                {
                Label_113E:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_217>__40).Dispose();
                }
            Label_114F:
                this.<units>__30 = new UnitData[this.<partyUnitNum>__38];
                this.<ownerPlayerIndex>__31 = new int[this.<partyUnitNum>__38];
                this.<placementIdx>__32 = new int[this.<partyUnitNum>__38];
                this.<mode>__42 = this.<rp>__36.vsmode;
                this.<unitcnt>__43 = 0;
                this.<$s_218>__44 = this.<startedPlayers>__37.GetEnumerator();
            Label_11AB:
                try
                {
                    goto Label_129A;
                Label_11B0:
                    this.<member>__45 = &this.<$s_218>__44.Current;
                    this.<unitcnt>__43 = 0;
                    this.<$s_219>__46 = this.<member>__45.units;
                    this.<$s_220>__47 = 0;
                    goto Label_1287;
                Label_11E5:
                    this.<elem>__48 = this.<$s_219>__46[this.<$s_220>__47];
                    this.<units>__30[this.<unitID>__39] = this.<elem>__48.unit;
                    this.<ownerPlayerIndex>__31[this.<unitID>__39] = this.<member>__45.playerIndex;
                    this.<placementIdx>__32[this.<unitID>__39] = this.<elem>__48.place;
                    this.<unitID>__39 += 1;
                    if (this.<mode>__42 != null)
                    {
                        goto Label_1279;
                    }
                    if ((this.<unitcnt>__43 += 1) < VersusRuleParam.THREE_ON_THREE)
                    {
                        goto Label_1279;
                    }
                    goto Label_129A;
                Label_1279:
                    this.<$s_220>__47 += 1;
                Label_1287:
                    if (this.<$s_220>__47 < ((int) this.<$s_219>__46.Length))
                    {
                        goto Label_11E5;
                    }
                Label_129A:
                    if (&this.<$s_218>__44.MoveNext() != null)
                    {
                        goto Label_11B0;
                    }
                    goto Label_12C0;
                }
                finally
                {
                Label_12AF:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_218>__44).Dispose();
                }
            Label_12C0:
                goto Label_162A;
            Label_12C5:
                this.<partyUnitNum>__38 = JSON_MyPhotonRoomParam.GetTotalUnitNum(this.<questParam>__3);
                this.<units>__30 = new UnitData[this.<partyUnitNum>__38];
                this.<ownerPlayerIndex>__31 = new int[this.<partyUnitNum>__38];
                this.<subFlag>__33 = new bool[this.<partyUnitNum>__38];
                this.<placementIdx>__32 = new int[this.<partyUnitNum>__38];
                if (GlobalVars.SelectedMultiPlayRoomType != 2)
                {
                    goto Label_14C5;
                }
                this.<unitIDBaseNext>__49 = 0;
                this.<$s_221>__50 = this.<startedPlayers>__37.GetEnumerator();
            Label_133D:
                try
                {
                    goto Label_149A;
                Label_1342:
                    this.<startedPlayer>__51 = &this.<$s_221>__50.Current;
                    this.<unitSlotNum>__52 = (this.<rp>__36 != null) ? this.<rp>__36.GetUnitSlotNum(this.<startedPlayer>__51.playerIndex) : 0;
                    this.<unitIDBase>__53 = this.<unitIDBaseNext>__49;
                    this.<unitIDBaseNext>__49 += this.<unitSlotNum>__52;
                    this.<$s_222>__54 = this.<startedPlayer>__51.units;
                    this.<$s_223>__55 = 0;
                    goto Label_1487;
                Label_13BC:
                    this.<elem>__56 = this.<$s_222>__54[this.<$s_223>__55];
                    if (this.<elem>__56.slotID < 0)
                    {
                        goto Label_1479;
                    }
                    if (this.<elem>__56.slotID < this.<unitSlotNum>__52)
                    {
                        goto Label_13FB;
                    }
                    goto Label_1479;
                Label_13FB:
                    this.<unitID>__57 = this.<unitIDBase>__53 + this.<elem>__56.slotID;
                    this.<units>__30[this.<unitID>__57] = this.<elem>__56.unit;
                    this.<ownerPlayerIndex>__31[this.<unitID>__57] = this.<startedPlayer>__51.playerIndex;
                    this.<subFlag>__33[this.<unitID>__57] = (this.<elem>__56.sub == 0) == 0;
                    this.<placementIdx>__32[this.<unitID>__57] = this.<elem>__56.place;
                Label_1479:
                    this.<$s_223>__55 += 1;
                Label_1487:
                    if (this.<$s_223>__55 < ((int) this.<$s_222>__54.Length))
                    {
                        goto Label_13BC;
                    }
                Label_149A:
                    if (&this.<$s_221>__50.MoveNext() != null)
                    {
                        goto Label_1342;
                    }
                    goto Label_14C0;
                }
                finally
                {
                Label_14AF:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_221>__50).Dispose();
                }
            Label_14C0:
                goto Label_162A;
            Label_14C5:
                this.<unitIDBaseNext>__58 = 0;
                this.<$s_224>__59 = this.<startedPlayers>__37.GetEnumerator();
            Label_14DD:
                try
                {
                    goto Label_1604;
                Label_14E2:
                    this.<startedPlayer>__60 = &this.<$s_224>__59.Current;
                    this.<unitSlotNum>__61 = (this.<rp>__36 != null) ? this.<rp>__36.GetUnitSlotNum(this.<startedPlayer>__60.playerIndex) : 0;
                    this.<unitIDBase>__62 = this.<unitIDBaseNext>__58;
                    this.<unitIDBaseNext>__58 += this.<unitSlotNum>__61;
                    this.<$s_225>__63 = this.<startedPlayer>__60.units;
                    this.<$s_226>__64 = 0;
                    goto Label_15F1;
                Label_155C:
                    this.<elem>__65 = this.<$s_225>__63[this.<$s_226>__64];
                    if (this.<elem>__65.slotID < 0)
                    {
                        goto Label_15E3;
                    }
                    if (this.<elem>__65.slotID < this.<unitSlotNum>__61)
                    {
                        goto Label_159B;
                    }
                    goto Label_15E3;
                Label_159B:
                    this.<unitID>__66 = this.<unitIDBase>__62 + this.<elem>__65.slotID;
                    this.<units>__30[this.<unitID>__66] = this.<elem>__65.unit;
                    this.<ownerPlayerIndex>__31[this.<unitID>__66] = this.<startedPlayer>__60.playerIndex;
                Label_15E3:
                    this.<$s_226>__64 += 1;
                Label_15F1:
                    if (this.<$s_226>__64 < ((int) this.<$s_225>__63.Length))
                    {
                        goto Label_155C;
                    }
                Label_1604:
                    if (&this.<$s_224>__59.MoveNext() != null)
                    {
                        goto Label_14E2;
                    }
                    goto Label_162A;
                }
                finally
                {
                Label_1619:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_224>__59).Dispose();
                }
            Label_162A:
                goto Label_1AED;
            Label_162F:
                if (this.<Audience>__1 == null)
                {
                    goto Label_18E8;
                }
                this.<startedParam>__67 = this.<gm>__0.AudienceManager.GetStartedParam();
                this.<rp>__68 = this.<gm>__0.AudienceManager.GetRoomParam();
                if (this.<startedParam>__67 == null)
                {
                    goto Label_1AED;
                }
                this.<>f__this.mAudiencePlayers = new List<JSON_MyPhotonPlayerParam>();
                this.<i>__69 = 0;
                goto Label_16D4;
            Label_168D:
                this.<startedParam>__67.players[this.<i>__69].SetupUnits();
                this.<>f__this.mAudiencePlayers.Add(this.<startedParam>__67.players[this.<i>__69]);
                this.<i>__69 += 1;
            Label_16D4:
                if (this.<i>__69 < ((int) this.<startedParam>__67.players.Length))
                {
                    goto Label_168D;
                }
                this.<myPlayerIndex>__29 = -1;
                this.<partyUnitNum>__70 = 0;
                this.<unitID>__71 = 0;
                this.<$s_227>__72 = this.<>f__this.mAudiencePlayers.GetEnumerator();
            Label_1717:
                try
                {
                    goto Label_1747;
                Label_171C:
                    this.<member>__73 = &this.<$s_227>__72.Current;
                    this.<partyUnitNum>__70 += (int) this.<member>__73.units.Length;
                Label_1747:
                    if (&this.<$s_227>__72.MoveNext() != null)
                    {
                        goto Label_171C;
                    }
                    goto Label_176D;
                }
                finally
                {
                Label_175C:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_227>__72).Dispose();
                }
            Label_176D:
                this.<units>__30 = new UnitData[this.<partyUnitNum>__70];
                this.<ownerPlayerIndex>__31 = new int[this.<partyUnitNum>__70];
                this.<placementIdx>__32 = new int[this.<partyUnitNum>__70];
                this.<mode>__74 = this.<rp>__68.vsmode;
                this.<unitcnt>__75 = 0;
                this.<$s_228>__76 = this.<>f__this.mAudiencePlayers.GetEnumerator();
            Label_17CE:
                try
                {
                    goto Label_18BD;
                Label_17D3:
                    this.<member>__77 = &this.<$s_228>__76.Current;
                    this.<unitcnt>__75 = 0;
                    this.<$s_229>__78 = this.<member>__77.units;
                    this.<$s_230>__79 = 0;
                    goto Label_18AA;
                Label_1808:
                    this.<elem>__80 = this.<$s_229>__78[this.<$s_230>__79];
                    this.<units>__30[this.<unitID>__71] = this.<elem>__80.unit;
                    this.<ownerPlayerIndex>__31[this.<unitID>__71] = this.<member>__77.playerIndex;
                    this.<placementIdx>__32[this.<unitID>__71] = this.<elem>__80.place;
                    this.<unitID>__71 += 1;
                    if (this.<mode>__74 != null)
                    {
                        goto Label_189C;
                    }
                    if ((this.<unitcnt>__75 += 1) < VersusRuleParam.THREE_ON_THREE)
                    {
                        goto Label_189C;
                    }
                    goto Label_18BD;
                Label_189C:
                    this.<$s_230>__79 += 1;
                Label_18AA:
                    if (this.<$s_230>__79 < ((int) this.<$s_229>__78.Length))
                    {
                        goto Label_1808;
                    }
                Label_18BD:
                    if (&this.<$s_228>__76.MoveNext() != null)
                    {
                        goto Label_17D3;
                    }
                    goto Label_18E3;
                }
                finally
                {
                Label_18D2:
                    ((List<JSON_MyPhotonPlayerParam>.Enumerator) this.<$s_228>__76).Dispose();
                }
            Label_18E3:
                goto Label_1AED;
            Label_18E8:
                if (this.<gm>__0.IsVSCpuBattle == null)
                {
                    goto Label_1AED;
                }
                this.<party>__81 = this.<gm>__0.Player.GetPartyCurrent();
                this.<cpu>__82 = GlobalVars.VersusCpu;
                this.<unitID>__83 = 0;
                this.<partyUnitNum>__84 = this.<party>__81.MAX_UNIT + ((int) this.<cpu>__82.Units.Length);
                this.<units>__30 = new UnitData[this.<partyUnitNum>__84];
                this.<ownerPlayerIndex>__31 = new int[this.<partyUnitNum>__84];
                this.<placementIdx>__32 = new int[this.<partyUnitNum>__84];
                this.<i>__85 = 0;
                goto Label_1A1C;
            Label_1983:
                this.<uniqueID>__86 = this.<party>__81.GetUnitUniqueID(this.<i>__85);
                if (this.<uniqueID>__86 > 0L)
                {
                    goto Label_19AC;
                }
                goto Label_1A0E;
            Label_19AC:
                this.<units>__30[this.<unitID>__83] = this.<player>__2.FindUnitDataByUniqueID(this.<uniqueID>__86);
                this.<ownerPlayerIndex>__31[this.<unitID>__83] = 1;
                this.<placementIdx>__32[this.<unitID>__83] = PlayerPrefsUtility.GetInt(PlayerPrefsUtility.VERSUS_ID_KEY + ((int) this.<i>__85), 0);
                this.<unitID>__83 += 1;
            Label_1A0E:
                this.<i>__85 += 1;
            Label_1A1C:
                if (this.<i>__85 < this.<party>__81.MAX_UNIT)
                {
                    goto Label_1983;
                }
                this.<i>__87 = 0;
                goto Label_1AC2;
            Label_1A3E:
                if (this.<cpu>__82.Units[this.<i>__87] != null)
                {
                    goto Label_1A5A;
                }
                goto Label_1AB4;
            Label_1A5A:
                this.<units>__30[this.<unitID>__83] = this.<cpu>__82.Units[this.<i>__87];
                this.<ownerPlayerIndex>__31[this.<unitID>__83] = 2;
                this.<placementIdx>__32[this.<unitID>__83] = this.<cpu>__82.Place[this.<i>__87];
                this.<unitID>__83 += 1;
            Label_1AB4:
                this.<i>__87 += 1;
            Label_1AC2:
                if (this.<i>__87 < ((int) this.<cpu>__82.Units.Length))
                {
                    goto Label_1A3E;
                }
                this.<>f__this.mExecDisconnected = 1;
                this.<myPlayerIndex>__29 = 1;
            Label_1AED:
                if (GameUtility.Config_UseAssetBundles.Value == null)
                {
                    goto Label_1B35;
                }
                if (AssetManager.AssetRevision <= 0)
                {
                    goto Label_1B35;
                }
                this.$current = this.<>f__this.StartCoroutine(this.<>f__this.DownloadQuestAsync(this.<questParam>__3));
                this.$PC = 2;
                goto Label_1D60;
            Label_1B35:
                if (this.<questParam>__3.IsScenario == null)
                {
                    goto Label_1B70;
                }
                this.<>f__this.Battle.SetBattleID(this.jsonBtl.btlid);
                this.<>f__this.GotoState<SceneBattle.State_Start>();
                goto Label_1D5E;
            Label_1B70:
                if ((this.<>f__this.mNavigation == null) == null)
                {
                    goto Label_1BE2;
                }
                if (string.IsNullOrEmpty(this.<questParam>__3.navigation) != null)
                {
                    goto Label_1BE2;
                }
                this.<nav>__88 = AssetManager.Load<GameObject>(AssetPath.Navigation(this.<questParam>__3));
                this.<>f__this.mNavigation = Object.Instantiate<GameObject>(this.<nav>__88);
                this.<>f__this.mTutorialTriggers = this.<>f__this.mNavigation.GetComponents<FlowNode_TutorialTrigger>();
            Label_1BE2:
                if (this.<>f__this.mCurrentQuest.CheckAllowedAutoBattle() == null)
                {
                    goto Label_1C5C;
                }
                if (this.<>f__this.mCurrentQuest.type != 3)
                {
                    goto Label_1C23;
                }
                this.<>f__this.mBattle.RequestAutoBattle = 0;
                goto Label_1C3D;
            Label_1C23:
                this.<>f__this.mBattle.RequestAutoBattle = GameUtility.Config_UseAutoPlay.Value;
            Label_1C3D:
                if (this.<>f__this.mBattle.RequestAutoBattle == null)
                {
                    goto Label_1C98;
                }
                GameUtility.SetNeverSleep();
                goto Label_1C98;
            Label_1C5C:
                if (this.<>f__this.IsPlayingArenaQuest == null)
                {
                    goto Label_1C98;
                }
                GameUtility.SetNeverSleep();
                this.<>f__this.mBattle.ArenaKeepQuestData(this.questID, this.jsonBtl, this.<player>__2.ArenaMaxActionNum);
            Label_1C98:
                if (this.<>f__this.mBattle.Deserialize(this.questID, this.jsonBtl, this.<myPlayerIndex>__29, this.<units>__30, this.<ownerPlayerIndex>__31, 0, this.<placementIdx>__32, this.<subFlag>__33) != null)
                {
                    goto Label_1CE7;
                }
                DebugUtility.LogError("BattleCore::Deserialize Failed");
                goto Label_1D5E;
            Label_1CE7:
                if (this.<pt>__34.IsMultiPlay == null)
                {
                    goto Label_1D07;
                }
                this.<>f__this.CreateMultiPlayer();
                goto Label_1D41;
            Label_1D07:
                if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
                {
                    goto Label_1D26;
                }
                this.<>f__this.CreateAudiencePlayer();
                goto Label_1D41;
            Label_1D26:
                if (this.<gm>__0.IsVSCpuBattle == null)
                {
                    goto Label_1D41;
                }
                this.<>f__this.CreateCpuBattlePlayer();
            Label_1D41:
                this.<>f__this.SetupGoodJob();
                this.<>f__this.GotoState<SceneBattle.State_Start>();
                this.$PC = -1;
            Label_1D5E:
                return 0;
            Label_1D60:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <StopWeatherEffect>c__Iterator32 : IEnumerator, IDisposable, IEnumerator<object>
        {
            internal bool is_immidiate;
            internal CanvasGroup <cg>__0;
            internal float <chg_time>__1;
            internal int $PC;
            internal object $current;
            internal bool <$>is_immidiate;
            internal SceneBattle <>f__this;

            public <StopWeatherEffect>c__Iterator32()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            public void Dispose()
            {
                this.$PC = -1;
                return;
            }

            public unsafe bool MoveNext()
            {
                uint num;
                bool flag;
                num = this.$PC;
                this.$PC = -1;
                switch (num)
                {
                    case 0:
                        goto Label_0021;

                    case 1:
                        goto Label_00E3;
                }
                goto Label_0163;
            Label_0021:
                this.<>f__this.IsStoppedWeatherEffect = 1;
                if (this.<>f__this.GoWeatherEffect != null)
                {
                    goto Label_0053;
                }
                this.<>f__this.GoWeatherEffect = null;
                goto Label_0163;
            Label_0053:
                if (this.is_immidiate == null)
                {
                    goto Label_0084;
                }
                Object.Destroy(this.<>f__this.GoWeatherEffect.get_gameObject());
                this.<>f__this.GoWeatherEffect = null;
                goto Label_015C;
            Label_0084:
                this.<cg>__0 = this.<>f__this.GoWeatherEffect.GetComponent<CanvasGroup>();
                if (this.<cg>__0 == null)
                {
                    goto Label_015C;
                }
                this.<>f__this.IsStoppedWeatherEffect = 0;
                this.<chg_time>__1 = &GameSettings.Instance.Quest.WeatherEffectChangeTime;
                goto Label_0130;
            Label_00D0:
                this.$current = null;
                this.$PC = 1;
                goto Label_0165;
            Label_00E3:
                this.<chg_time>__1 -= Time.get_deltaTime();
                if (this.<chg_time>__1 >= 0f)
                {
                    goto Label_0110;
                }
                this.<chg_time>__1 = 0f;
            Label_0110:
                this.<cg>__0.set_alpha(Mathf.Lerp(0f, 1f, this.<chg_time>__1));
            Label_0130:
                if (this.<chg_time>__1 > 0f)
                {
                    goto Label_00D0;
                }
                this.<cg>__0.set_alpha(0f);
                this.<>f__this.IsStoppedWeatherEffect = 1;
            Label_015C:
                this.$PC = -1;
            Label_0163:
                return 0;
            Label_0165:
                return 1;
                return flag;
            }

            [DebuggerHidden]
            public void Reset()
            {
                throw new NotSupportedException();
            }

            object IEnumerator<object>.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }

            object IEnumerator.Current
            {
                [DebuggerHidden]
                get
                {
                    return this.$current;
                }
            }
        }

        [CompilerGenerated]
        private sealed class <SubmitBattleResult>c__AnonStorey1CD
        {
            internal MyPhoton pt;

            public <SubmitBattleResult>c__AnonStorey1CD()
            {
                base..ctor();
                return;
            }

            internal bool <>m__77(JSON_MyPhotonPlayerParam p)
            {
                return ((p.playerIndex == this.pt.MyPlayerIndex) == 0);
            }
        }

        [CompilerGenerated]
        private sealed class <SubmitBattleResult>c__AnonStorey1CE
        {
            internal MyPhoton pt;

            public <SubmitBattleResult>c__AnonStorey1CE()
            {
                base..ctor();
                return;
            }

            internal bool <>m__78(JSON_MyPhotonPlayerParam p)
            {
                return ((p.playerIndex == this.pt.MyPlayerIndex) == 0);
            }
        }

        [CompilerGenerated]
        private sealed class <UpdateMultiBattleInfo>c__AnonStorey1DF
        {
            internal SceneBattle.MultiPlayRecvData data;

            public <UpdateMultiBattleInfo>c__AnonStorey1DF()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A7(SceneBattle.MultiPlayRecvData r)
            {
                return (r.b < this.data.b);
            }

            internal bool <>m__A8(SceneBattle.MultiPlayerUnit p)
            {
                return (p.UnitID == this.data.uid);
            }
        }

        [CompilerGenerated]
        private sealed class <UpdateMultiBattleInfo>c__AnonStorey1E0
        {
            internal int i;
            internal SceneBattle <>f__this;

            public <UpdateMultiBattleInfo>c__AnonStorey1E0()
            {
                base..ctor();
                return;
            }

            internal bool <>m__A9(SceneBattle.MultiPlayer p)
            {
                return (p.PlayerIndex == this.<>f__this.mAudienceDisconnect[this.i].uid);
            }
        }

        public enum CameraMode
        {
            DEFAULT,
            UPVIEW
        }

        private delegate void CancelTargetSelectEvent();

        private class ChargeTarget
        {
            public Unit mUnit;
            public uint mAttr;

            public ChargeTarget(Unit unit, uint attr)
            {
                base..ctor();
                this.mUnit = unit;
                this.mAttr = attr;
                return;
            }

            public void AddAttr(uint attr)
            {
                this.mAttr |= attr;
                return;
            }
        }

        public enum CHEAT_TYPE
        {
            MOVE,
            MP,
            RANGE
        }

        public class CloseBattleUIWindow
        {
            public List<Win_Btn_Decide_Title_Flx> mMsgBox;
            public List<Win_Btn_DecideCancel_FL_C> mYesNoDlg;

            public CloseBattleUIWindow()
            {
                this.mMsgBox = new List<Win_Btn_Decide_Title_Flx>();
                this.mYesNoDlg = new List<Win_Btn_DecideCancel_FL_C>();
                base..ctor();
                return;
            }

            public void Add(GameObject go)
            {
                Win_Btn_Decide_Title_Flx flx;
                Win_Btn_DecideCancel_FL_C l_fl_c;
                if ((go == null) == null)
                {
                    goto Label_000D;
                }
                return;
            Label_000D:
                flx = go.GetComponent<Win_Btn_Decide_Title_Flx>();
                if ((flx != null) == null)
                {
                    goto Label_002C;
                }
                this.mMsgBox.Add(flx);
            Label_002C:
                l_fl_c = go.GetComponent<Win_Btn_DecideCancel_FL_C>();
                if ((l_fl_c != null) == null)
                {
                    goto Label_004B;
                }
                this.mYesNoDlg.Add(l_fl_c);
            Label_004B:
                return;
            }

            public unsafe void CloseAll()
            {
                Win_Btn_Decide_Title_Flx flx;
                List<Win_Btn_Decide_Title_Flx>.Enumerator enumerator;
                Win_Btn_DecideCancel_FL_C l_fl_c;
                List<Win_Btn_DecideCancel_FL_C>.Enumerator enumerator2;
                enumerator = this.mMsgBox.GetEnumerator();
            Label_000C:
                try
                {
                    goto Label_001F;
                Label_0011:
                    flx = &enumerator.Current;
                    flx.BeginClose();
                Label_001F:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0011;
                    }
                    goto Label_003C;
                }
                finally
                {
                Label_0030:
                    ((List<Win_Btn_Decide_Title_Flx>.Enumerator) enumerator).Dispose();
                }
            Label_003C:
                this.mMsgBox.Clear();
                enumerator2 = this.mYesNoDlg.GetEnumerator();
            Label_0053:
                try
                {
                    goto Label_0066;
                Label_0058:
                    l_fl_c = &enumerator2.Current;
                    l_fl_c.BeginClose();
                Label_0066:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_0058;
                    }
                    goto Label_0083;
                }
                finally
                {
                Label_0077:
                    ((List<Win_Btn_DecideCancel_FL_C>.Enumerator) enumerator2).Dispose();
                }
            Label_0083:
                this.mYesNoDlg.Clear();
                return;
            }
        }

        private enum eArenaSubmitMode
        {
            BUSY,
            SUCCESS,
            FAILED
        }

        private enum eCsImage
        {
            U2_MAIN,
            U2_SUB,
            UE_MAIN,
            UE_SUB,
            MAX
        }

        private enum EDisconnectType
        {
            DISCONNECTED,
            BAN,
            SEQUENCE_ERROR
        }

        public enum eMaskBattleUI
        {
            MENU = 1,
            MAP = 2,
            CAMERA = 4,
            CMD_ATTACK = 8,
            CMD_ABILITYS = 0x10,
            CMD_ITEM = 0x20,
            CMD_END = 0x40,
            VS_GRID_TAP = 0x80,
            VS_SWIPE = 0x100,
            BACK_KEY = 0x200
        }

        public enum EMultiPlayCommand
        {
            NOP,
            MOVE_START,
            MOVE,
            GRID_XY,
            MOVE_END,
            MOVE_CANCEL,
            ENTRY_BATTLE,
            GRID_EVENT,
            UNIT_END,
            UNIT_TIME_LIMIT,
            UNIT_XYDIR,
            NUM
        }

        public enum EMultiPlayRecvDataHeader
        {
            NOP,
            INPUT,
            CHECK,
            GOODJOB,
            CONTINUE,
            IGNORE_MY_DISCONNECT,
            FINISH_LOAD,
            REQUEST_RESUME,
            RESUME_INFO,
            RESUME_SUCCESS,
            SYNC,
            SYNC_RESUME,
            VS_RETIRE,
            VS_RETIRE_COMFIRM,
            CHEAT_MOVE,
            CHEAT_MP,
            CHEAT_RANGE,
            OTHERPLAYER_DISCONNECT,
            NUM
        }

        public enum ENotifyDisconnectedPlayerType
        {
            NORMAL,
            OWNER,
            OWNER_AND_I_AM_OWNER
        }

        private class EventRecvSkillUnit
        {
            public bool mValid;
            public eType mType;
            public TacticsUnitController mController;
            public EElement mElem;
            public EUnitCondition mCond;

            public EventRecvSkillUnit()
            {
                base..ctor();
                return;
            }

            public EventRecvSkillUnit(TacticsUnitController tuc, EElement elem)
            {
                base..ctor();
                this.mType = 1;
                this.mController = tuc;
                this.mElem = elem;
                this.mValid = 1;
                return;
            }

            public EventRecvSkillUnit(TacticsUnitController tuc, EUnitCondition cond)
            {
                base..ctor();
                this.mType = 2;
                this.mController = tuc;
                this.mCond = cond;
                this.mValid = 1;
                return;
            }

            public enum eType
            {
                UNKNOWN,
                ELEM,
                COND
            }
        }

        public enum ExitRequests
        {
            None,
            End,
            Restart
        }

        private class FindShield
        {
            public TacticsUnitController mTuc;
            public TacticsUnitController.ShieldState mShield;

            public FindShield(TacticsUnitController tuc, TacticsUnitController.ShieldState shield)
            {
                base..ctor();
                this.mTuc = tuc;
                this.mShield = shield;
                return;
            }
        }

        private delegate void FocusTargetEvent(Unit unit);

        private delegate void GridClickEvent(Grid grid);

        public class MoveInput
        {
            public SceneBattle SceneOwner;
            public TargetSelectEvent OnAttackTargetSelect;

            public MoveInput()
            {
                base..ctor();
                return;
            }

            public virtual void End()
            {
            }

            public virtual void MoveUnit(Vector3 target_screen_pos)
            {
            }

            public virtual void Reset()
            {
            }

            protected void SelectAttackTarget(Unit unit)
            {
                if (this.OnAttackTargetSelect == null)
                {
                    goto Label_0017;
                }
                this.OnAttackTargetSelect(unit);
            Label_0017:
                return;
            }

            public virtual void Start()
            {
            }

            public virtual void Update()
            {
            }

            public virtual bool IsBusy
            {
                get
                {
                    return 0;
                }
            }

            public delegate void TargetSelectEvent(Unit unit);
        }

        private class MultiPlayCheck
        {
            public int work;
            public int playerIndex;
            public int playerID;
            public int battleTurn;
            public int[] hp;
            public int[] gx;
            public int[] gy;
            public int[] dir;
            public string rnd;

            public MultiPlayCheck()
            {
                base..ctor();
                return;
            }

            private unsafe string GetIntListString(int[] a)
            {
                string str;
                int num;
                if (a != null)
                {
                    goto Label_000C;
                }
                return "[null]";
            Label_000C:
                str = string.Empty;
                num = 0;
                goto Label_0035;
            Label_0019:
                str = str + &(a[num]).ToString() + ",";
                num += 1;
            Label_0035:
                if (num < ((int) a.Length))
                {
                    goto Label_0019;
                }
                return str;
            }

            public bool IsEqual(SceneBattle.MultiPlayCheck dst)
            {
                if (this.battleTurn == dst.battleTurn)
                {
                    goto Label_001D;
                }
                DebugUtility.LogError("battleTurn not match");
                return 0;
            Label_001D:
                if (this.IsEqual(this.hp, dst.hp) != null)
                {
                    goto Label_0040;
                }
                DebugUtility.LogError("hp not match");
                return 0;
            Label_0040:
                if (this.IsEqual(this.gx, dst.gx) != null)
                {
                    goto Label_0063;
                }
                DebugUtility.LogError("gx not match");
                return 0;
            Label_0063:
                if (this.IsEqual(this.gy, dst.gy) != null)
                {
                    goto Label_0086;
                }
                DebugUtility.LogError("gy not match");
                return 0;
            Label_0086:
                if (this.IsEqual(this.dir, dst.dir) != null)
                {
                    goto Label_00A9;
                }
                DebugUtility.LogError("dir not match");
                return 0;
            Label_00A9:
                if (string.IsNullOrEmpty(this.rnd) != null)
                {
                    goto Label_00EB;
                }
                if (string.IsNullOrEmpty(dst.rnd) != null)
                {
                    goto Label_00EB;
                }
                if ((this.rnd != dst.rnd) == null)
                {
                    goto Label_00EB;
                }
                DebugUtility.LogError("rnd not match");
                return 0;
            Label_00EB:
                return 1;
            }

            private bool IsEqual(int[] s0, int[] s1)
            {
                if (s0 != null)
                {
                    goto Label_000E;
                }
                if (s1 != null)
                {
                    goto Label_000E;
                }
                return 1;
            Label_000E:
                if (s0 == null)
                {
                    goto Label_001F;
                }
                if (s1 == null)
                {
                    goto Label_001F;
                }
                goto Label_0021;
            Label_001F:
                return 0;
            Label_0021:
                return Enumerable.SequenceEqual<int>(s0, s1);
            }

            public override string ToString()
            {
                object[] objArray1;
                string str;
                string str2;
                str2 = string.Empty;
                objArray1 = new object[] { str2, "pid:", (int) this.playerID, "pidx:", (int) this.playerIndex, " bt:", (int) this.battleTurn, " gx:", this.GetIntListString(this.gx), " gy:", this.GetIntListString(this.gy), " hp:", this.GetIntListString(this.hp), " dir:", this.GetIntListString(this.dir) };
                str = string.Concat(objArray1);
                if (string.IsNullOrEmpty(this.rnd) != null)
                {
                    goto Label_00DF;
                }
                str = str + " rnd:" + this.rnd;
            Label_00DF:
                return str;
            }
        }

        private class MultiPlayer
        {
            [CompilerGenerated]
            private int <PlayerIndex>k__BackingField;
            [CompilerGenerated]
            private int <PlayerID>k__BackingField;
            [CompilerGenerated]
            private bool <NotifyDisconnected>k__BackingField;
            [CompilerGenerated]
            private bool <Disconnected>k__BackingField;
            [CompilerGenerated]
            private int <RecvInputNum>k__BackingField;
            [CompilerGenerated]
            private bool <FinishLoad>k__BackingField;
            [CompilerGenerated]
            private bool <SyncWait>k__BackingField;
            [CompilerGenerated]
            private bool <SyncResumeWait>k__BackingField;
            [CompilerGenerated]
            private bool <StartBegin>k__BackingField;

            public MultiPlayer(SceneBattle self, int playerIndex, int playerID)
            {
                object[] objArray1;
                base..ctor();
                this.PlayerIndex = playerIndex;
                this.PlayerID = playerID;
                this.NotifyDisconnected = 0;
                this.Disconnected = 0;
                objArray1 = new object[] { "[PUN] new MultiPlayer playerIndex:", (int) playerIndex, " playerID:", (int) playerID };
                self.MultiPlayLog(string.Concat(objArray1));
                return;
            }

            public void Begin(SceneBattle self)
            {
                this.StartBegin = 1;
                return;
            }

            public void End(SceneBattle self)
            {
                this.StartBegin = 0;
                return;
            }

            public void Update(SceneBattle self)
            {
            }

            public int PlayerIndex
            {
                [CompilerGenerated]
                get
                {
                    return this.<PlayerIndex>k__BackingField;
                }
                [CompilerGenerated]
                private set
                {
                    this.<PlayerIndex>k__BackingField = value;
                    return;
                }
            }

            public int PlayerID
            {
                [CompilerGenerated]
                get
                {
                    return this.<PlayerID>k__BackingField;
                }
                [CompilerGenerated]
                private set
                {
                    this.<PlayerID>k__BackingField = value;
                    return;
                }
            }

            public bool NotifyDisconnected
            {
                [CompilerGenerated]
                get
                {
                    return this.<NotifyDisconnected>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<NotifyDisconnected>k__BackingField = value;
                    return;
                }
            }

            public bool Disconnected
            {
                [CompilerGenerated]
                get
                {
                    return this.<Disconnected>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<Disconnected>k__BackingField = value;
                    return;
                }
            }

            public int RecvInputNum
            {
                [CompilerGenerated]
                get
                {
                    return this.<RecvInputNum>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<RecvInputNum>k__BackingField = value;
                    return;
                }
            }

            public bool FinishLoad
            {
                [CompilerGenerated]
                get
                {
                    return this.<FinishLoad>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<FinishLoad>k__BackingField = value;
                    return;
                }
            }

            public bool SyncWait
            {
                [CompilerGenerated]
                get
                {
                    return this.<SyncWait>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<SyncWait>k__BackingField = value;
                    return;
                }
            }

            public bool SyncResumeWait
            {
                [CompilerGenerated]
                get
                {
                    return this.<SyncResumeWait>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<SyncResumeWait>k__BackingField = value;
                    return;
                }
            }

            public bool StartBegin
            {
                [CompilerGenerated]
                get
                {
                    return this.<StartBegin>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<StartBegin>k__BackingField = value;
                    return;
                }
            }
        }

        private class MultiPlayerUnit
        {
            private SRPG.Unit mUnit;
            private EUnitDirection mDir;
            private int mGridX;
            private int mGridY;
            private int mTargetX;
            private int mTargetY;
            private EGridSnap mGridSnap;
            private bool mIsRunning;
            private List<SceneBattle.MultiPlayInput> mRecv;
            private int mRecvTurnNum;
            private int mCurrentTurn;
            private float mTurnSec;
            private int mTurnCmdNum;
            private int mTurnCmdDoneNum;
            private GridMap<int> mMoveGrid;
            private bool mBegin;
            [CompilerGenerated]
            private SceneBattle.MultiPlayer <Owner>k__BackingField;
            [CompilerGenerated]
            private int <UnitID>k__BackingField;

            public MultiPlayerUnit(SceneBattle self, int unitID, SRPG.Unit unit, SceneBattle.MultiPlayer owner)
            {
                object[] objArray1;
                this.mDir = 2;
                this.mRecv = new List<SceneBattle.MultiPlayInput>();
                base..ctor();
                this.Owner = owner;
                this.UnitID = unitID;
                this.mUnit = unit;
                objArray1 = new object[] { "[PUN] new MultiPlayerUnit unitID:", (int) unitID, " name:", unit.UnitName, " ownerPlayerIndex:", (int) ((owner != null) ? owner.PlayerIndex : 0) };
                self.MultiPlayLog(string.Concat(objArray1));
                return;
            }

            public void Begin(SceneBattle self)
            {
                object[] objArray1;
                TacticsUnitController controller;
                <Begin>c__AnonStorey1F3 storeyf;
                int num;
                storeyf = new <Begin>c__AnonStorey1F3();
                storeyf.self = self;
                if (this.mBegin == null)
                {
                    goto Label_0019;
                }
                return;
            Label_0019:
                this.mBegin = 1;
                this.mRecvTurnNum = 0;
                this.mCurrentTurn = 0;
                this.mTurnSec = 0f;
                this.mTurnCmdNum = -1;
                this.mTurnCmdDoneNum = 0;
                this.mRecv.RemoveAll(new Predicate<SceneBattle.MultiPlayInput>(storeyf.<>m__CA));
                controller = storeyf.self.FindUnitController(this.mUnit);
                objArray1 = new object[] { "[PUN]Begin MultiPlayer unitID: ", (int) this.UnitID, " name:", this.mUnit.UnitName, " ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y, " dir:", (EUnitDirection) this.mUnit.Direction, " sx:", (int) this.mUnit.startX, " sy:", (int) this.mUnit.startY };
                storeyf.self.MultiPlayLog(string.Concat(objArray1));
                if ((controller == null) != null)
                {
                    goto Label_015C;
                }
                if (this.mUnit.IsDead == null)
                {
                    goto Label_015D;
                }
            Label_015C:
                return;
            Label_015D:
                controller.AutoUpdateRotation = 0;
                this.mGridSnap = 2;
                this.mIsRunning = 0;
                this.mGridX = this.mTargetX = this.mUnit.x;
                this.mGridY = this.mTargetY = this.mUnit.y;
                controller.WalkableField = storeyf.self.CreateCurrentAccessMap();
                if (storeyf.self.Battle.IsMultiVersus != null)
                {
                    goto Label_01D3;
                }
                controller.ShowOwnerIndexUI(1);
            Label_01D3:
                this.mMoveGrid = storeyf.self.CreateCurrentAccessMap();
                return;
            }

            private bool CheckMoveable(int x, int y)
            {
                if (this.mMoveGrid == null)
                {
                    goto Label_001F;
                }
                return ((this.mMoveGrid.get(x, y) < 0) == 0);
            Label_001F:
                return 1;
            }

            public void End(SceneBattle self)
            {
                object[] objArray1;
                TacticsUnitController controller;
                if (this.mBegin != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                this.mBegin = 0;
                controller = self.FindUnitController(this.mUnit);
                if ((controller != null) == null)
                {
                    goto Label_0080;
                }
                if (this.mIsRunning == null)
                {
                    goto Label_0044;
                }
                this.mIsRunning = 0;
                controller.StopRunning();
            Label_0044:
                controller.get_transform().set_position(self.CalcGridCenter(this.mUnit.x, this.mUnit.y));
                controller.AutoUpdateRotation = 1;
                controller.WalkableField = null;
                controller.ShowOwnerIndexUI(0);
            Label_0080:
                objArray1 = new object[] { "MultiPlayerEnd. ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y, " gx:", (int) this.mGridX, " gy:", (int) this.mGridY };
                self.MultiPlayLog(string.Concat(objArray1));
                return;
            }

            private unsafe Vector3 GetPosition3D(SceneBattle self, float x, float z)
            {
                Vector3 vector;
                IntVector2 vector2;
                Vector3 vector3;
                &vector..ctor(x, 0f, z);
                vector2 = self.CalcCoord(vector);
                vector3 = self.CalcGridCenter(&vector2.x, &vector2.y);
                &vector.y = &vector3.y;
                return vector;
            }

            public unsafe bool IsMoveCompleted(SceneBattle self, int x, int y, TacticsUnitController controller)
            {
                IntVector2 vector;
                if (this.mBegin != null)
                {
                    goto Label_000D;
                }
                return 1;
            Label_000D:
                if (this.mGridSnap == 2)
                {
                    goto Label_001B;
                }
                return 0;
            Label_001B:
                if (this.mIsRunning == null)
                {
                    goto Label_0028;
                }
                return 0;
            Label_0028:
                vector = self.CalcCoord(controller.get_transform().get_position());
                if (&vector.x != x)
                {
                    goto Label_0055;
                }
                if (&vector.y == y)
                {
                    goto Label_0057;
                }
            Label_0055:
                return 0;
            Label_0057:
                return 1;
            }

            private void Move(SceneBattle self, int tx, int ty)
            {
                TacticsUnitController controller;
                Vector3[] vectorArray;
                if (tx != this.mGridX)
                {
                    goto Label_0018;
                }
                if (ty == this.mGridY)
                {
                    goto Label_0097;
                }
            Label_0018:
                this.mMoveGrid = self.CreateCurrentAccessMap();
                controller = self.FindUnitController(this.mUnit);
                vectorArray = self.FindPath(this.mGridX, this.mGridY, tx, ty, this.mUnit.DisableMoveGridHeight, this.mMoveGrid);
                if (vectorArray == null)
                {
                    goto Label_0089;
                }
                if ((controller != null) == null)
                {
                    goto Label_0089;
                }
                controller.StartMove(vectorArray, -1f);
                this.mGridX = tx;
                this.mGridY = ty;
                goto Label_0097;
            Label_0089:
                this.mGridX = tx;
                this.mGridY = ty;
            Label_0097:
                return;
            }

            public void RecvInput(SceneBattle self, SceneBattle.MultiPlayRecvData data)
            {
                object[] objArray1;
                int num;
                int num2;
                SceneBattle.MultiPlayInput input;
                num = 0;
                num = Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(Math.Max(num, (data.c != null) ? ((int) data.c.Length) : 0), (data.u != null) ? ((int) data.u.Length) : 0), (data.s != null) ? ((int) data.s.Length) : 0), (data.i != null) ? ((int) data.i.Length) : 0), (data.gx != null) ? ((int) data.gx.Length) : 0), (data.gy != null) ? ((int) data.gy.Length) : 0), (data.d != null) ? ((int) data.d.Length) : 0), (data.x != null) ? ((int) data.x.Length) : 0), (data.z != null) ? ((int) data.z.Length) : 0), (data.r != null) ? ((int) data.r.Length) : 0);
                num2 = 0;
                goto Label_0452;
            Label_0149:
                if (data.c[num2] != null)
                {
                    goto Label_015B;
                }
                goto Label_044E;
            Label_015B:
                input = new SceneBattle.MultiPlayInput();
                input.b = data.b;
                input.t = this.mRecvTurnNum;
                input.c = ((data.c != null) && (num2 < ((int) data.c.Length))) ? data.c[num2] : input.c;
                input.u = ((data.u != null) && (num2 < ((int) data.u.Length))) ? data.u[num2] : input.u;
                input.s = ((data.s != null) && (num2 < ((int) data.s.Length))) ? data.s[num2] : input.s;
                input.i = ((data.i != null) && (num2 < ((int) data.i.Length))) ? data.i[num2] : input.i;
                input.gx = ((data.gx != null) && (num2 < ((int) data.gx.Length))) ? data.gx[num2] : input.gx;
                input.gy = ((data.gy != null) && (num2 < ((int) data.gy.Length))) ? data.gy[num2] : input.gy;
                input.ul = ((data.ul != null) && (num2 < ((int) data.ul.Length))) ? data.ul[num2] : input.ul;
                input.d = ((data.d != null) && (num2 < ((int) data.d.Length))) ? data.d[num2] : input.d;
                input.x = ((data.x != null) && (num2 < ((int) data.x.Length))) ? data.x[num2] : input.x;
                input.z = ((data.z != null) && (num2 < ((int) data.z.Length))) ? data.z[num2] : input.z;
            Label_0387:
                input.r = ((data.r != null) && (num2 < ((int) data.r.Length))) ? data.r[num2] : input.r;
                if (input.IsValid(self) != null)
                {
                    goto Label_03BA;
                }
                DebugUtility.LogError("[PUN] illegal input recv.");
                goto Label_044E;
            Label_03BA:
                if (input.c != 4)
                {
                    goto Label_03D6;
                }
                self.MultiPlayLog("[PUN] recv MOVE_END");
                goto Label_0442;
            Label_03D6:
                if (input.c != 6)
                {
                    goto Label_03F2;
                }
                self.MultiPlayLog("[PUN] recv ENTRY_BATTLE");
                goto Label_0442;
            Label_03F2:
                if (input.c != 7)
                {
                    goto Label_040E;
                }
                self.MultiPlayLog("[PUN] recv GRID_EVENT");
                goto Label_0442;
            Label_040E:
                if (input.c != 8)
                {
                    goto Label_042A;
                }
                self.MultiPlayLog("[PUN] recv UNIT_END");
                goto Label_0442;
            Label_042A:
                if (input.c != 9)
                {
                    goto Label_0442;
                }
                self.MultiPlayLog("[PUN] recv TIME_LIMIT");
            Label_0442:
                this.mRecv.Add(input);
            Label_044E:
                num2 += 1;
            Label_0452:
                if (num2 < num)
                {
                    goto Label_0149;
                }
                this.mRecvTurnNum += 1;
                objArray1 = new object[] { "[PUN]RecvInput from unitID:", (int) this.UnitID, " ", (int) this.mRecvTurnNum, " sq:", (int) data.sq, " b:", (int) data.b, "/", (int) self.UnitStartCountTotal };
                self.MultiPlayLog(string.Concat(objArray1));
                return;
            }

            public unsafe void Update(SceneBattle self)
            {
                object[] objArray13;
                object[] objArray12;
                object[] objArray11;
                object[] objArray10;
                object[] objArray9;
                object[] objArray8;
                object[] objArray7;
                object[] objArray6;
                object[] objArray5;
                object[] objArray4;
                object[] objArray3;
                object[] objArray2;
                object[] objArray1;
                TacticsUnitController controller;
                GameManager manager;
                bool flag;
                MyPhoton photon;
                List<MyPhoton.MyPlayer> list;
                MyPhoton.MyPlayer player;
                int num;
                SceneBattle.MultiPlayInput input;
                int num2;
                int num3;
                SceneBattle.MultiPlayInput input2;
                IntVector2 vector;
                EBattleCommand command;
                SRPG.Unit unit;
                SkillData data;
                ItemData data2;
                int num4;
                int num5;
                bool flag2;
                IntVector2 vector2;
                GridMap<bool> map;
                int num6;
                EUnitDirection direction;
                if (this.mBegin != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                controller = self.FindUnitController(this.mUnit);
                if (((controller == null) == null) && (this.mUnit.IsDead == null))
                {
                    goto Label_0036;
                }
                return;
            Label_0036:
                if (((self.IsInState<SceneBattle.State_MapCommandMultiPlay>() != null) || (self.IsInState<SceneBattle.State_MapCommandVersus>() != null)) || (self.IsInState<SceneBattle.State_SelectTargetV2>() != null))
                {
                    goto Label_0058;
                }
                return;
            Label_0058:
                controller.AutoUpdateRotation = 0;
                if (controller.IsPlayingFieldAction == null)
                {
                    goto Label_006B;
                }
                return;
            Label_006B:
                manager = MonoSingleton<GameManager>.Instance;
                flag = manager.AudienceMode;
                if (((((this.mRecv.Count > 0) || (flag != null)) || (manager.IsVSCpuBattle != null)) && (((flag == null) || (this.Owner.Disconnected == null)) || (this.mRecv.Count > 0))) && ((manager.IsVSCpuBattle == null) || (controller.Unit.OwnerPlayerIndex != 2)))
                {
                    goto Label_01CE;
                }
                if ((this.Owner == null) || (this.IsMoveCompleted(self, this.mGridX, this.mGridY, controller) == null))
                {
                    goto Label_0F7D;
                }
                photon = PunMonoSingleton<MyPhoton>.Instance;
                list = photon.GetRoomPlayerList();
                player = photon.FindPlayer(list, this.Owner.PlayerID, this.Owner.PlayerIndex);
                if ((player != null) && ((player.start != null) || (this.Owner.Disconnected == null)))
                {
                    goto Label_0F7D;
                }
                controller.get_transform().set_position(self.CalcGridCenter(this.mUnit.x, this.mUnit.y));
                controller.CancelAction();
                controller.get_transform().set_rotation(SRPG_Extensions.ToRotation(this.mUnit.Direction));
                controller.AutoUpdateRotation = 1;
                self.Battle.EntryBattleMultiPlayTimeUp = 1;
                self.Battle.MultiPlayDisconnectAutoBattle = 1;
                self.GotoMapCommand();
                DebugUtility.LogWarning("[PUN] detect player disconnected");
                goto Label_0F7D;
            Label_01CE:
                if (this.Owner != null)
                {
                    goto Label_01DE;
                }
                goto Label_0F7D;
            Label_01DE:
                this.mTurnSec += Time.get_deltaTime();
                if ((this.mTurnCmdNum >= 0) || (this.mRecv.Count <= 0))
                {
                    goto Label_02F8;
                }
                this.mTurnCmdNum = 0;
                num = this.mRecv[0].t;
                goto Label_0260;
            Label_022C:
                input = this.mRecv[this.mTurnCmdNum];
                if (input.t == num)
                {
                    goto Label_0252;
                }
                goto Label_0276;
            Label_0252:
                this.mTurnCmdNum += 1;
            Label_0260:
                if (this.mTurnCmdNum < this.mRecv.Count)
                {
                    goto Label_022C;
                }
            Label_0276:
                objArray1 = new object[] { "[PUN] start send turn:", (int) num, "/", (int) this.mCurrentTurn, " cmdNum:", (int) this.mTurnCmdNum, " recvTurnNum:", (int) this.mRecvTurnNum, " recvCount:", (int) this.mRecv.Count };
                self.MultiPlayLog(string.Concat(objArray1));
            Label_02F8:
                num2 = Math.Min(this.mTurnCmdNum, ((int) (this.mTurnSec * ((float) this.mTurnCmdNum))) + 1);
                goto Label_0EB9;
            Label_031B:
                num3 = 0;
                input2 = this.mRecv[0];
                if (((input2.c != 4) && (input2.c != 3)) && ((input2.c != 7) && (input2.c != 8)))
                {
                    goto Label_0442;
                }
                if (((input2.c != 4) && (input2.c != 8)) || (controller.isMoving == null))
                {
                    goto Label_038A;
                }
                goto Label_0ED7;
            Label_038A:
                vector = self.CalcCoord(controller.get_transform().get_position());
                if ((this.mGridX == &vector.x) && (this.mGridY == &vector.y))
                {
                    goto Label_03DB;
                }
                this.mGridX = &vector.x;
                this.mGridY = &vector.y;
            Label_03DB:
                this.mTargetX = input2.gx;
                this.mTargetY = input2.gy;
                if ((this.mTargetX == this.mGridX) && (this.mTargetY == this.mGridY))
                {
                    goto Label_0442;
                }
                if (input2.c != 3)
                {
                    goto Label_0ED7;
                }
                this.mDir = input2.d;
                this.mRecv.RemoveAt(0);
                goto Label_0ED7;
            Label_0442:
                if (input2.c != null)
                {
                    goto Label_0453;
                }
                goto Label_0E5F;
            Label_0453:
                if (input2.c != 3)
                {
                    goto Label_04AF;
                }
                this.mDir = input2.d;
                objArray2 = new object[] { "recv GRID_XY:", (int) this.mGridX, " ", (int) this.mGridY };
                self.MultiPlayLog(string.Concat(objArray2));
                goto Label_0E5F;
            Label_04AF:
                if (input2.c != 1)
                {
                    goto Label_04C1;
                }
                goto Label_0E5F;
            Label_04C1:
                if (input2.c != 4)
                {
                    goto Label_05EB;
                }
                objArray3 = new object[] { "recv MOVE_END:", (int) this.mGridX, " ", (int) this.mGridY };
                self.MultiPlayLog(string.Concat(objArray3));
                if ((this.mGridX == input2.gx) && (this.mGridY == input2.gy))
                {
                    goto Label_0599;
                }
                objArray4 = new object[] { "move pos not match gx:", (int) this.mGridX, " gy:", (int) this.mGridY, " tx:", (int) input2.gx, " ty:", (int) input2.gy };
                DebugUtility.LogWarning(string.Concat(objArray4));
            Label_0599:
                self.Battle.MoveMultiPlayer(this.mUnit, this.mGridX, this.mGridY, this.mDir);
                if (this.CheckMoveable(this.mGridX, this.mGridY) != null)
                {
                    goto Label_0E5F;
                }
                self.SendCheat(0, this.Owner.PlayerIndex);
                goto Label_0E5F;
            Label_05EB:
                if (input2.c != 5)
                {
                    goto Label_06A6;
                }
                this.mGridX = this.mTargetX = this.mUnit.startX;
                this.mGridY = this.mTargetY = this.mUnit.startY;
                this.mDir = this.mUnit.startDir;
                self.ResetMultiPlayerTransform(this.mUnit);
                objArray5 = new object[] { "[PUN] recv MOVE_CANCEL (", (int) this.mGridX, ",", (int) this.mGridY, ")", (EUnitDirection) this.mDir };
                self.MultiPlayLog(string.Concat(objArray5));
                goto Label_0E5F;
            Label_06A6:
                if (input2.c != 2)
                {
                    goto Label_06B8;
                }
                goto Label_0E5F;
            Label_06B8:
                if (input2.c != 6)
                {
                    goto Label_0945;
                }
                command = input2.d;
                if (command != 4)
                {
                    goto Label_06EC;
                }
                self.Battle.MapCommandEnd(this.mUnit);
                goto Label_0940;
            Label_06EC:
                if (controller.isMoving == null)
                {
                    goto Label_06FC;
                }
                goto Label_0ED7;
            Label_06FC:
                unit = (input2.u >= 0) ? self.Battle.AllUnits[input2.u] : null;
                data = this.mUnit.GetSkillData(input2.s);
                if (data == null)
                {
                    goto Label_0768;
                }
                if (this.mUnit.CheckEnableUseSkill(data, 1) != null)
                {
                    goto Label_0768;
                }
                self.SendCheat(1, this.Owner.PlayerIndex);
            Label_0768:
                data2 = MonoSingleton<GameManager>.Instance.Player.FindInventoryByItemID(input2.i);
                num4 = input2.gx;
                num5 = input2.gy;
                flag2 = (input2.ul == 0) == 0;
                if (this.IsMoveCompleted(self, this.mUnit.x, this.mUnit.y, controller) != null)
                {
                    goto Label_0869;
                }
                objArray6 = new object[] { "[PUN]waiting move completed for ENTRY_BATTLE... SNAP:", (EGridSnap) this.mGridSnap, " RUN:", (bool) this.mIsRunning, " ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y };
                self.MultiPlayLog(string.Concat(objArray6));
                vector2 = self.CalcCoord(controller.get_transform().get_position());
                this.mGridX = &vector2.x;
                this.mGridY = &vector2.y;
                goto Label_0ED7;
            Label_0869:
                if (data == null)
                {
                    goto Label_08BD;
                }
                if (self.Battle.CreateSelectGridMap(this.mUnit, this.mUnit.x, this.mUnit.y, data).get(num4, num5) != null)
                {
                    goto Label_08BD;
                }
                self.SendCheat(2, this.Owner.PlayerIndex);
            Label_08BD:
                self.MultiPlayLog("[PUN]MultiPlayerUnit ENTRY_BATTLE");
                self.HideAllHPGauges();
                self.HideAllUnitOwnerIndex();
                self.Battle.EntryBattleMultiPlay(command, this.mUnit, unit, data, data2, num4, num5, flag2);
                num3 = 1;
                this.mDir = this.mUnit.Direction;
                this.mGridX = this.mTargetX = this.mUnit.x;
                this.mGridY = this.mTargetY = this.mUnit.y;
            Label_0940:
                goto Label_0E5F;
            Label_0945:
                if (input2.c != 7)
                {
                    goto Label_0AB9;
                }
                if (this.mGridX != input2.gx)
                {
                    goto Label_0976;
                }
                if (this.mGridY == input2.gy)
                {
                    goto Label_09E0;
                }
            Label_0976:
                objArray7 = new object[] { "GRID_EVENT move pos not match gx:", (int) this.mGridX, " gy:", (int) this.mGridY, " tx:", (int) input2.gx, " ty:", (int) input2.gy };
                DebugUtility.LogWarning(string.Concat(objArray7));
            Label_09E0:
                if (this.IsMoveCompleted(self, this.mUnit.x, this.mUnit.y, controller) != null)
                {
                    goto Label_0A93;
                }
                objArray8 = new object[] { "[PUN]waiting move completed for GRID_EVENT...begin:", (bool) this.mBegin, " run:", (bool) this.mIsRunning, " snap:", (EGridSnap) this.mGridSnap, " ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y };
                self.MultiPlayLog(string.Concat(objArray8));
                goto Label_0ED7;
            Label_0A93:
                self.MultiPlayLog("[PUN]MultiPlayerUnit GRID_EVENT");
                self.Battle.ExecuteEventTriggerOnGrid(this.mUnit, 3);
                num3 = 1;
                goto Label_0E5F;
            Label_0AB9:
                if (input2.c != 8)
                {
                    goto Label_0C4C;
                }
                if (this.mGridX != input2.gx)
                {
                    goto Label_0AEA;
                }
                if (this.mGridY == input2.gy)
                {
                    goto Label_0B73;
                }
            Label_0AEA:
                objArray9 = new object[] { "UNIT_END move pos not match gx:", (int) this.mGridX, " gy:", (int) this.mGridY, " tx:", (int) input2.gx, " ty:", (int) input2.gy };
                DebugUtility.LogWarning(string.Concat(objArray9));
                this.mGridX = input2.gx;
                this.mGridY = input2.gy;
                goto Label_0ED7;
            Label_0B73:
                if (this.IsMoveCompleted(self, this.mUnit.x, this.mUnit.y, controller) != null)
                {
                    goto Label_0C26;
                }
                objArray10 = new object[] { "[PUN]waiting move completed for UNIT_END...begin:", (bool) this.mBegin, " run:", (bool) this.mIsRunning, " snap:", (EGridSnap) this.mGridSnap, " ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y };
                self.MultiPlayLog(string.Concat(objArray10));
                goto Label_0ED7;
            Label_0C26:
                self.MultiPlayLog("[PUN]MultiPlayerUnit UNIT_END");
                self.Battle.CommandWait(input2.d);
                num3 = 1;
                goto Label_0E5F;
            Label_0C4C:
                if (input2.c != 9)
                {
                    goto Label_0DA7;
                }
                controller.StopRunning();
                this.mUnit.x = this.mGridX = this.mTargetX = input2.gx;
                this.mUnit.y = this.mGridY = this.mTargetY = input2.gy;
                controller.get_transform().set_position(self.CalcGridCenter(input2.gx, input2.gy));
                if (this.IsMoveCompleted(self, this.mUnit.x, this.mUnit.y, controller) != null)
                {
                    goto Label_0D82;
                }
                objArray11 = new object[] { "[PUN]waiting move completed for UNIT_TIME_LIMIT...begin:", (bool) this.mBegin, " run:", (bool) this.mIsRunning, " snap:", (EGridSnap) this.mGridSnap, " ux:", (int) this.mUnit.x, " uy:", (int) this.mUnit.y };
                self.MultiPlayLog(string.Concat(objArray11));
                goto Label_0ED7;
            Label_0D82:
                this.mUnit.Direction = input2.d;
                num3 = 2;
                self.MultiPlayLog("[PUN]UnitTimeUp!");
                goto Label_0E5F;
            Label_0DA7:
                if (input2.c != 10)
                {
                    goto Label_0E5F;
                }
                this.mUnit.x = this.mGridX = input2.gx;
                this.mUnit.y = this.mGridY = input2.gy;
                this.mUnit.Direction = this.mDir = input2.d;
                objArray12 = new object[] { "recv UNIT_XYDIR:", (int) this.mGridX, " ", (int) this.mGridY, " ", (EUnitDirection) this.mDir };
                self.MultiPlayLog(string.Concat(objArray12));
            Label_0E5F:
                this.mRecv.RemoveAt(0);
                this.mTurnCmdDoneNum += 1;
                if (num3 != 1)
                {
                    goto Label_0E93;
                }
                controller.AutoUpdateRotation = 1;
                self.GotoState<SceneBattle.State_WaitForLog>();
                goto Label_0ED7;
            Label_0E93:
                if (num3 != 2)
                {
                    goto Label_0EB9;
                }
                controller.AutoUpdateRotation = 1;
                self.Battle.EntryBattleMultiPlayTimeUp = 1;
                self.GotoMapCommand();
                goto Label_0ED7;
            Label_0EB9:
                if (this.mTurnCmdDoneNum >= num2)
                {
                    goto Label_0ED7;
                }
                if (this.mRecv.Count > 0)
                {
                    goto Label_031B;
                }
            Label_0ED7:
                if (this.mTurnCmdDoneNum < this.mTurnCmdNum)
                {
                    goto Label_0F7D;
                }
                objArray13 = new object[] { "[PUN] done send turn:", (int) this.mCurrentTurn, " cmdNum:", (int) this.mTurnCmdNum, " recvTurnNum:", (int) this.mRecvTurnNum, " recvCount:", (int) this.mRecv.Count };
                self.MultiPlayLog(string.Concat(objArray13));
                this.mCurrentTurn += 1;
                this.mTurnSec = 0f;
                this.mTurnCmdDoneNum = 0;
                this.mTurnCmdNum = -1;
            Label_0F7D:
                if (controller.AutoUpdateRotation == null)
                {
                    goto Label_0F89;
                }
                return;
            Label_0F89:
                this.Move(self, this.mTargetX, this.mTargetY);
                return;
            }

            public void UpdateSkip(SceneBattle self)
            {
                TacticsUnitController controller;
                SceneBattle.MultiPlayInput input;
                EBattleCommand command;
                SRPG.Unit unit;
                SkillData data;
                ItemData data2;
                int num;
                int num2;
                bool flag;
                SRPG.Unit unit2;
                int num3;
                EUnitDirection direction;
                if (this.mBegin != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                controller = self.FindUnitController(this.mUnit);
                if (((controller == null) == null) && (this.mUnit.IsDead == null))
                {
                    goto Label_0036;
                }
                return;
            Label_0036:
                controller.AutoUpdateRotation = 0;
                if (this.mRecv.Count > 0)
                {
                    goto Label_00AC;
                }
                if ((this.Owner.Disconnected == null) && (this.mUnit.IsControl != null))
                {
                    goto Label_00AB;
                }
            Label_0073:
                if (self.Battle.UpdateMapAI(0) != null)
                {
                    goto Label_0073;
                }
                controller.get_transform().set_position(self.CalcGridCenter(this.mUnit.x, this.mUnit.y));
            Label_00AB:
                return;
            Label_00AC:
                if (this.Owner != null)
                {
                    goto Label_00BC;
                }
                goto Label_056D;
            Label_00BC:
                if (this.mUnit.IsControl != null)
                {
                    goto Label_04FF;
                }
            Label_00D1:
                if ((self.Battle.UpdateMapAI(0) != null) && (this.mUnit.IsControl == null))
                {
                    goto Label_00D1;
                }
                controller.get_transform().set_position(self.CalcGridCenter(this.mUnit.x, this.mUnit.y));
                goto Label_04FF;
            Label_011E:
                input = this.mRecv[0];
                if (((input.c != 4) && (input.c != 3)) && ((input.c != 7) && (input.c != 8)))
                {
                    goto Label_01C6;
                }
                this.mUnit.x = this.mGridX = this.mTargetX = input.gx;
                this.mUnit.y = this.mGridY = this.mTargetY = input.gy;
                controller.get_transform().set_position(self.CalcGridCenter(input.gx, input.gy));
            Label_01C6:
                if (input.c != 3)
                {
                    goto Label_01E3;
                }
                this.mDir = input.d;
                goto Label_04F3;
            Label_01E3:
                if (input.c != 4)
                {
                    goto Label_0218;
                }
                self.Battle.MoveMultiPlayer(this.mUnit, this.mGridX, this.mGridY, this.mDir);
                goto Label_04F3;
            Label_0218:
                if (input.c != 5)
                {
                    goto Label_027F;
                }
                this.mGridX = this.mTargetX = this.mUnit.startX;
                this.mGridY = this.mTargetY = this.mUnit.startY;
                this.mDir = this.mUnit.startDir;
                self.ResetMultiPlayerTransform(this.mUnit);
                goto Label_04F3;
            Label_027F:
                if (input.c != 6)
                {
                    goto Label_03D8;
                }
                command = input.d;
                if (command != 4)
                {
                    goto Label_02AF;
                }
                self.Battle.MapCommandEnd(this.mUnit);
                goto Label_03D3;
            Label_02AF:
                unit = (input.u >= 0) ? self.Battle.AllUnits[input.u] : null;
                data = this.mUnit.GetSkillData(input.s);
                data2 = MonoSingleton<GameManager>.Instance.Player.FindInventoryByItemID(input.i);
                num = input.gx;
                num2 = input.gy;
                flag = (input.ul == 0) == 0;
                self.Battle.EntryBattleMultiPlay(command, this.mUnit, unit, data, data2, num, num2, flag);
                if (data == null)
                {
                    goto Label_038A;
                }
                if (data.IsSetBreakObjSkill() == null)
                {
                    goto Label_038A;
                }
                unit2 = self.Battle.FindGimmickAtGrid(num, num2, 0);
                if (unit2 == null)
                {
                    goto Label_038A;
                }
                if (unit2.IsBreakObj == null)
                {
                    goto Label_038A;
                }
                self.ReqCreateBreakObjUcLists.Add(new SceneBattle.ReqCreateBreakObjUc(data, unit2));
            Label_038A:
                this.mDir = this.mUnit.Direction;
                this.mGridX = this.mTargetX = this.mUnit.x;
                this.mGridY = this.mTargetY = this.mUnit.y;
            Label_03D3:
                goto Label_04F3;
            Label_03D8:
                if (input.c != 7)
                {
                    goto Label_03FC;
                }
                self.Battle.ExecuteEventTriggerOnGrid(this.mUnit, 3);
                goto Label_04F3;
            Label_03FC:
                if (input.c != 8)
                {
                    goto Label_041E;
                }
                this.mUnit.Direction = input.d;
                goto Label_04F3;
            Label_041E:
                if (input.c != 9)
                {
                    goto Label_0492;
                }
                controller.StopRunning();
                this.mGridX = this.mTargetX = input.gx;
                this.mGridY = this.mTargetY = input.gy;
                controller.get_transform().set_position(self.CalcGridCenter(input.gx, input.gy));
                this.mUnit.Direction = input.d;
                goto Label_04F3;
            Label_0492:
                if (input.c != 10)
                {
                    goto Label_04F3;
                }
                this.mUnit.x = this.mGridX = input.gx;
                this.mUnit.y = this.mGridY = input.gy;
                this.mUnit.Direction = this.mDir = input.d;
            Label_04F3:
                this.mRecv.RemoveAt(0);
            Label_04FF:
                if (this.mRecv.Count > 0)
                {
                    goto Label_011E;
                }
                if (this.Owner.Disconnected != null)
                {
                    goto Label_0535;
                }
                if (this.mUnit.IsControl != null)
                {
                    goto Label_056D;
                }
            Label_0535:
                if (self.Battle.UpdateMapAI(0) != null)
                {
                    goto Label_0535;
                }
                controller.get_transform().set_position(self.CalcGridCenter(this.mUnit.x, this.mUnit.y));
            Label_056D:
                return;
            }

            public SceneBattle.MultiPlayer Owner
            {
                [CompilerGenerated]
                get
                {
                    return this.<Owner>k__BackingField;
                }
                [CompilerGenerated]
                private set
                {
                    this.<Owner>k__BackingField = value;
                    return;
                }
            }

            public int UnitID
            {
                [CompilerGenerated]
                get
                {
                    return this.<UnitID>k__BackingField;
                }
                [CompilerGenerated]
                private set
                {
                    this.<UnitID>k__BackingField = value;
                    return;
                }
            }

            public SRPG.Unit Unit
            {
                get
                {
                    return this.mUnit;
                }
            }

            public bool IsExistRecvData
            {
                get
                {
                    return (this.mRecv.Count > 0);
                }
            }

            [CompilerGenerated]
            private sealed class <Begin>c__AnonStorey1F3
            {
                internal SceneBattle self;

                public <Begin>c__AnonStorey1F3()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__CA(SceneBattle.MultiPlayInput r)
                {
                    return (r.b < this.self.mUnitStartCountTotal);
                }
            }

            private enum EGridSnap
            {
                NOP,
                ACTIVE,
                DONE,
                NUM
            }
        }

        public class MultiPlayInput
        {
            public int b;
            public int t;
            public int c;
            public int u;
            public string s;
            public string i;
            public int gx;
            public int gy;
            public int ul;
            public int d;
            public float x;
            public float z;
            public float r;

            public MultiPlayInput()
            {
                this.u = -1;
                this.s = string.Empty;
                this.i = string.Empty;
                this.d = 1;
                base..ctor();
                return;
            }

            public bool IsValid(SceneBattle self)
            {
                if (this.b >= 0)
                {
                    goto Label_000E;
                }
                return 0;
            Label_000E:
                if (this.t >= 0)
                {
                    goto Label_001C;
                }
                return 0;
            Label_001C:
                if (this.c < 0)
                {
                    goto Label_0035;
                }
                if (this.c < 11)
                {
                    goto Label_0037;
                }
            Label_0035:
                return 0;
            Label_0037:
                if (this.u < -1)
                {
                    goto Label_005E;
                }
                if (this.u < self.Battle.AllUnits.Count)
                {
                    goto Label_0060;
                }
            Label_005E:
                return 0;
            Label_0060:
                if (this.s == null)
                {
                    goto Label_0095;
                }
                if ((this.s != string.Empty) == null)
                {
                    goto Label_0097;
                }
                if (MonoSingleton<GameManager>.Instance.GetSkillParam(this.s) != null)
                {
                    goto Label_0097;
                }
            Label_0095:
                return 0;
            Label_0097:
                if (this.i == null)
                {
                    goto Label_00CC;
                }
                if ((this.i != string.Empty) == null)
                {
                    goto Label_00CE;
                }
                if (MonoSingleton<GameManager>.Instance.GetItemParam(this.i) != null)
                {
                    goto Label_00CE;
                }
            Label_00CC:
                return 0;
            Label_00CE:
                if (this.gx < 0)
                {
                    goto Label_011C;
                }
                if (this.gx >= self.Battle.CurrentMap.Width)
                {
                    goto Label_011C;
                }
                if (this.gy < 0)
                {
                    goto Label_011C;
                }
                if (this.gy < self.Battle.CurrentMap.Height)
                {
                    goto Label_011E;
                }
            Label_011C:
                return 0;
            Label_011E:
                if (this.c != 6)
                {
                    goto Label_0161;
                }
                if (this.d == 1)
                {
                    goto Label_0192;
                }
                if (this.d == 2)
                {
                    goto Label_0192;
                }
                if (this.d == 3)
                {
                    goto Label_0192;
                }
                if (this.d == 4)
                {
                    goto Label_0192;
                }
                return 0;
                goto Label_0192;
            Label_0161:
                if (this.d == null)
                {
                    goto Label_0192;
                }
                if (this.d == 2)
                {
                    goto Label_0192;
                }
                if (this.d == 1)
                {
                    goto Label_0192;
                }
                if (this.d == 3)
                {
                    goto Label_0192;
                }
                return 0;
            Label_0192:
                if (this.x < 0f)
                {
                    goto Label_01EA;
                }
                if (this.x > ((float) self.Battle.CurrentMap.Width))
                {
                    goto Label_01EA;
                }
                if (this.z < 0f)
                {
                    goto Label_01EA;
                }
                if (this.z <= ((float) self.Battle.CurrentMap.Height))
                {
                    goto Label_01EC;
                }
            Label_01EA:
                return 0;
            Label_01EC:
                return 1;
            }
        }

        public class MultiPlayRecvBinData
        {
            public byte[] bin;

            public MultiPlayRecvBinData()
            {
                base..ctor();
                return;
            }
        }

        public class MultiPlayRecvData
        {
            public int sq;
            public int h;
            public int b;
            public int pidx;
            public int pid;
            public int uid;
            public int[] c;
            public int[] u;
            public string[] s;
            public string[] i;
            public int[] gx;
            public int[] gy;
            public int[] ul;
            public int[] d;
            public float[] x;
            public float[] z;
            public float[] r;

            public MultiPlayRecvData()
            {
                base..ctor();
                return;
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct PosRot
        {
            public Vector3 Position;
            public Quaternion Rotation;
            public void Apply(Transform target)
            {
                target.set_position(this.Position);
                target.set_rotation(this.Rotation);
                return;
            }

            public void Apply(Transform target, Vector3 deltaPosition)
            {
                target.set_position(this.Position + deltaPosition);
                target.set_rotation(this.Rotation);
                return;
            }

            public void AddPosition(Component component)
            {
                this.Position += component.get_transform().get_position();
                return;
            }
        }

        private class PupupData
        {
            public int priority;
            public Vector3 position;
            public float yOffset;

            public PupupData(Vector3 position, int priority, float yOffset)
            {
                base..ctor();
                this.priority = priority;
                this.position = position;
                this.yOffset = yOffset;
                return;
            }
        }

        public delegate void QuestEndEvent();

        public class ReqCreateBreakObjUc
        {
            public SkillData mSkill;
            public Unit mTargetUnit;
            public bool mIsLoad;

            public ReqCreateBreakObjUc(SkillData skill, Unit target_unit)
            {
                base..ctor();
                this.mSkill = skill;
                this.mTargetUnit = target_unit;
                this.mIsLoad = 0;
                return;
            }
        }

        private delegate void ScreenClickEvent(Vector2 position);

        private delegate void SelectTargetCallback();

        private delegate void SelectTargetEvent(Unit unit);

        private delegate void SelectTargetPositionWithItem(int x, int y, ItemData item);

        private delegate void SelectTargetPositionWithSkill(int x, int y, SkillData skill, bool bUnitTarget);

        public class SimpleEvent
        {
            private static Dictionary<int, Interface> m_Group;

            static SimpleEvent()
            {
                m_Group = new Dictionary<int, Interface>();
                return;
            }

            public SimpleEvent()
            {
                base..ctor();
                return;
            }

            public static void Add(int group, Interface inst)
            {
                if (HasGroup(group) != null)
                {
                    goto Label_0017;
                }
                m_Group.Add(group, inst);
            Label_0017:
                return;
            }

            public static void Clear()
            {
                m_Group.Clear();
                return;
            }

            public static bool HasGroup(int group)
            {
                return m_Group.ContainsKey(group);
            }

            public static void Remove(int group)
            {
                m_Group.Remove(group);
                return;
            }

            public static unsafe void Send(int group, string key, object obj)
            {
                Interface interface2;
                interface2 = null;
                if (m_Group.TryGetValue(group, &interface2) == null)
                {
                    goto Label_001C;
                }
                interface2.OnEvent(key, obj);
            Label_001C:
                return;
            }

            public interface Interface
            {
                void OnEvent(string key, object obj);
            }
        }

        private class State_AnimateMove : State<SceneBattle>
        {
            private Unit mMovingUnit;
            private TacticsUnitController mController;
            private bool mMoveUnit;
            private Vector3 mStartPosition;
            private Vector3 mEndPosition;
            private float mWaitCount;

            public State_AnimateMove()
            {
                this.mWaitCount = 1f;
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogMapMove move;
                IntVector2 vector;
                EUnitDirection direction;
                BattleCameraFukan fukan;
                LogMapMove move2;
                move = (LogMapMove) self.mBattle.Logs.Peek;
                this.mMovingUnit = move.self;
                this.mController = self.FindUnitController(this.mMovingUnit);
                this.mController.WalkableField = self.CreateCurrentAccessMap();
                this.mMoveUnit = (move.auto != null) ? 1 : this.mMovingUnit.IsUnitFlag(0x400);
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_00A6;
                }
                if (self.Battle.IsUnitAuto(this.mMovingUnit) != null)
                {
                    goto Label_00A6;
                }
                if (self.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_00A6;
                }
                this.mMoveUnit = 1;
            Label_00A6:
                vector = self.CalcCoord(this.mController.CenterPosition);
                direction = this.mController.CalcUnitDirectionFromRotation();
                if (&vector.x != this.mMovingUnit.x)
                {
                    goto Label_010A;
                }
                if (&vector.y != this.mMovingUnit.y)
                {
                    goto Label_010A;
                }
                if (direction != this.mMovingUnit.Direction)
                {
                    goto Label_010A;
                }
                this.mMoveUnit = 0;
            Label_010A:
                self.mUpdateCameraPosition = 0;
                fukan = GameObjectID.FindGameObject<BattleCameraFukan>(self.mBattleUI.FukanCameraID);
                if ((fukan != null) == null)
                {
                    goto Label_0140;
                }
                if (fukan.isDisp == null)
                {
                    goto Label_0140;
                }
                fukan.SetDisp(0);
            Label_0140:
                if (this.mMoveUnit == null)
                {
                    goto Label_0196;
                }
                self.ShowWalkableGrids(self.CreateCurrentAccessMap(), 0);
                goto Label_01C6;
                goto Label_0196;
            Label_0162:
                move2 = (LogMapMove) self.mBattle.Logs.Peek;
                if (move2.self == this.mMovingUnit)
                {
                    goto Label_0190;
                }
                goto Label_01C6;
            Label_0190:
                self.RemoveLog();
            Label_0196:
                if (self.mBattle.Logs.Num <= 0)
                {
                    goto Label_01C6;
                }
                if ((self.mBattle.Logs.Peek as LogMapMove) != null)
                {
                    goto Label_0162;
                }
            Label_01C6:
                return;
            }

            private unsafe void Move()
            {
                LogMapMove move;
                int num;
                int num2;
                LogMapMove move2;
                BattleMap map;
                Vector3[] vectorArray;
                int num3;
                LogMapMove move3;
                float num4;
                move = (LogMapMove) base.self.mBattle.Logs.Peek;
                num = 0;
                num2 = 0;
                goto Label_0089;
            Label_0024:
                if ((base.self.mBattle.Logs[num2] as LogMapMove) != null)
                {
                    goto Label_0049;
                }
                goto Label_00A4;
            Label_0049:
                move2 = (LogMapMove) base.self.mBattle.Logs[num2];
                if (move2 == null)
                {
                    goto Label_00A4;
                }
                if (move2.self == move.self)
                {
                    goto Label_0081;
                }
                goto Label_00A4;
            Label_0081:
                num += 1;
                num2 += 1;
            Label_0089:
                if (num2 < base.self.mBattle.Logs.Num)
                {
                    goto Label_0024;
                }
            Label_00A4:
                map = base.self.mBattle.CurrentMap;
                vectorArray = new Vector3[num];
                num3 = 0;
                goto Label_0121;
            Label_00C6:
                move3 = (LogMapMove) base.self.mBattle.Logs.Peek;
                *(&(vectorArray[num3])) = base.self.CalcGridCenter(map[move3.ex, move3.ey]);
                base.self.RemoveLog();
                num3 += 1;
            Label_0121:
                if (num3 < num)
                {
                    goto Label_00C6;
                }
                this.mStartPosition = *(&(vectorArray[0]));
                this.mEndPosition = *(&(vectorArray[((int) vectorArray.Length) - 1]));
                num4 = this.mController.StartMove(vectorArray, -1f);
                ObjectAnimator.Get(Camera.get_main().get_transform()).AnimateTo(Camera.get_main().get_transform().get_position() + (this.mEndPosition - this.mStartPosition), Camera.get_main().get_transform().get_rotation(), num4, 3);
                return;
            }

            public override void Update(SceneBattle self)
            {
                float num;
                float num2;
                float num3;
                BattleLog log;
                BattleCameraFukan fukan;
                if (this.mMoveUnit == null)
                {
                    goto Label_0055;
                }
                num2 = GameSettings.Instance.AiUnit_MoveWait * Time.get_deltaTime();
                num3 = this.mWaitCount;
                this.mWaitCount -= num2;
                if (0f >= this.mWaitCount)
                {
                    goto Label_0044;
                }
                return;
            Label_0044:
                if (0f >= num3)
                {
                    goto Label_0055;
                }
                this.Move();
            Label_0055:
                if (this.mController.isIdle != null)
                {
                    goto Label_006C;
                }
                self.OnGimmickUpdate();
                return;
            Label_006C:
                self.ResetCameraTarget();
                self.mUpdateCameraPosition = 1;
                log = self.mBattle.Logs.Peek;
                if (log == null)
                {
                    goto Label_009B;
                }
                if ((log as LogMapMove) != null)
                {
                    goto Label_00CE;
                }
            Label_009B:
                fukan = GameObjectID.FindGameObject<BattleCameraFukan>(self.mBattleUI.FukanCameraID);
                if ((fukan != null) == null)
                {
                    goto Label_00CE;
                }
                if (fukan.isDisp != null)
                {
                    goto Label_00CE;
                }
                fukan.SetDisp(1);
            Label_00CE:
                if (self.mBattle.Logs.Num <= 0)
                {
                    goto Label_00EB;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_00EB:
                self.GotoMapCommand();
                return;
            }
        }

        private class State_ArenaCalc : State<SceneBattle>
        {
            private GameObject mGoWin;

            public State_ArenaCalc()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.Battle.ArenaCalcStart();
                self.ArenaActionCountSet(self.Battle.ArenaActionCount);
                return;
            }

            [DebuggerHidden]
            private IEnumerator sendResultStartReplay(SceneBattle self)
            {
                <sendResultStartReplay>c__Iterator47 iterator;
                iterator = new <sendResultStartReplay>c__Iterator47();
                iterator.self = self;
                iterator.<$>self = self;
                return iterator;
            }

            public override void Update(SceneBattle self)
            {
                if (self.Battle.IsArenaCalc != null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                if (self.Battle.ArenaCalcStep() == null)
                {
                    goto Label_003A;
                }
                self.Battle.ArenaCalcFinish();
                self.StartCoroutine(this.sendResultStartReplay(self));
            Label_003A:
                return;
            }

            [CompilerGenerated]
            private sealed class <sendResultStartReplay>c__Iterator47 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal SceneBattle self;
                internal BattleCore.QuestResult <result>__0;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;

                public <sendResultStartReplay>c__Iterator47()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_00A6;

                        case 2:
                            goto Label_0109;
                    }
                    goto Label_012F;
                Label_0025:
                    this.<result>__0 = this.self.Battle.ArenaCalcResult;
                    this.self.SaveResult();
                    GlobalVars.LastQuestResult.Set(this.<result>__0);
                    this.self.mTacticsUnits.Clear();
                    this.self.Battle.ArenaResetQuestData();
                    this.self.mArenaSubmitMode = 0;
                    this.self.SubmitResult();
                    goto Label_00A6;
                Label_0093:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_0131;
                Label_00A6:
                    if (this.self.mArenaSubmitMode == null)
                    {
                        goto Label_0093;
                    }
                    if (this.self.mArenaSubmitMode != 1)
                    {
                        goto Label_00E7;
                    }
                    this.self.Battle.MapStart();
                    this.self.GotoState<SceneBattle.State_LoadMapV2>();
                    goto Label_0128;
                Label_00E7:
                    GameUtility.FadeOut(1f);
                    goto Label_0109;
                Label_00F6:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0131;
                Label_0109:
                    if (GameUtility.IsScreenFading != null)
                    {
                        goto Label_00F6;
                    }
                    ProgressWindow.Close();
                    GameUtility.ForceSetDefaultSleepSetting();
                    this.self.GotoState<SceneBattle.State_ExitQuest>();
                Label_0128:
                    this.$PC = -1;
                Label_012F:
                    return 0;
                Label_0131:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_ArenaSkipWait : State<SceneBattle>
        {
            public State_ArenaSkipWait()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                SRPG_TouchInputModule.UnlockInput(0);
                self.Battle.Logs.Reset();
                if ((self.mBattleUI != null) == null)
                {
                    goto Label_003D;
                }
                self.mBattleUI.OnQuestEnd();
                self.mBattleUI.OnMapEnd();
            Label_003D:
                self.GotoState_WaitSignal<SceneBattle.State_PreQuestResult>();
                return;
            }
        }

        private class State_AudienceEnd : State<SceneBattle>
        {
            public State_AudienceEnd()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                BattleCore.QuestResult result;
                result = self.CheckAudienceResult();
                if (result == 1)
                {
                    goto Label_0015;
                }
                if (result != 2)
                {
                    goto Label_0025;
                }
            Label_0015:
                self.mBattleUI.OnAudienceWin();
                goto Label_0030;
            Label_0025:
                self.mBattleUI.OnVersusDraw();
            Label_0030:
                self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
                Network.Abort();
                return;
            }
        }

        private class State_AudienceForceEnd : State<SceneBattle>
        {
            private bool mClose;

            public State_AudienceForceEnd()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                string str;
                str = LocalizedText.Get("sys.MULTI_VERSUS_AUDIENCE_END");
                this.mClose = 0;
                UIUtility.SystemMessage(string.Empty, str, new UIUtility.DialogResultEvent(this.ClickEvent), null, 0, 0);
                Network.ResetError();
                return;
            }

            public void ClickEvent(GameObject go)
            {
                this.mClose = 1;
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mClose == null)
                {
                    goto Label_0011;
                }
                self.GotoState<SceneBattle.State_ExitQuest>();
            Label_0011:
                return;
            }
        }

        private class State_AudienceRetire : State<SceneBattle>
        {
            private bool mClose;

            public State_AudienceRetire()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                BattleCore.QuestResult result;
                string str;
                result = self.CheckAudienceResult();
                str = string.Format(LocalizedText.Get("sys.MULTI_VERSUS_AUDIENCE_RETIRE"), (result != 1) ? "1P" : "2P");
                this.mClose = 0;
                UIUtility.SystemMessage(string.Empty, str, new UIUtility.DialogResultEvent(this.ClickEvent), null, 0, 0);
                return;
            }

            public void ClickEvent(GameObject go)
            {
                this.mClose = 1;
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mClose == null)
                {
                    goto Label_0011;
                }
                self.GotoState<SceneBattle.State_AudienceEnd>();
            Label_0011:
                return;
            }
        }

        private class State_AutoHeal : State<SceneBattle>
        {
            private GameObject mHealEffect;
            private TacticsUnitController mController;
            private LogAutoHeal mLog;
            private State mState;
            private int mHealdHp;
            private int mHealdMp;

            public State_AutoHeal()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mLog = self.Battle.Logs.Peek as LogAutoHeal;
                this.mController = self.FindUnitController(this.mLog.self);
                this.mHealdHp = this.mLog.self.CurrentStatus.param.hp;
                this.mHealdMp = this.mLog.self.CurrentStatus.param.mp;
                this.mLog.self.CurrentStatus.param.hp = this.mLog.beforeHp;
                if (this.mLog.type != null)
                {
                    goto Label_00C6;
                }
                this.mController.ResetHPGauge();
                goto Label_00D2;
            Label_00C6:
                this.mController.ShowHPGauge(0);
            Label_00D2:
                this.mState = 0;
                self.RemoveLog();
                return;
            }

            public override void End(SceneBattle self)
            {
                this.mLog.self.CurrentStatus.param.hp = this.mHealdHp;
                this.mLog.self.CurrentStatus.param.mp = this.mHealdMp;
                this.mController.ResetHPGauge();
                this.mController.ShowHPGauge(0);
                this.mController.ShowOwnerIndexUI(0);
                base.End(self);
                return;
            }

            private void StartEffect()
            {
                GameObject obj2;
                obj2 = null;
                if (this.mLog.type != null)
                {
                    goto Label_0023;
                }
                obj2 = base.self.mAutoHealEffectTemplate;
                goto Label_002F;
            Label_0023:
                obj2 = base.self.mMapAddGemEffectTemplate;
            Label_002F:
                if ((obj2 != null) == null)
                {
                    goto Label_0099;
                }
                this.mHealEffect = Object.Instantiate(obj2, this.mController.get_transform().get_position(), Quaternion.get_identity()) as GameObject;
                if ((this.mHealEffect != null) == null)
                {
                    goto Label_0099;
                }
                this.mHealEffect.get_transform().SetParent(this.mController.get_transform());
                SRPG_Extensions.RequireComponent<OneShotParticle>(this.mHealEffect);
            Label_0099:
                SceneBattle.Instance.PopupHpHealNumber(this.mController.CenterPosition, this.mLog.value);
                this.mController.ReflectDispModel();
                if (this.mLog.type == 1)
                {
                    goto Label_00F2;
                }
                this.mController.UpdateHPRelative(this.mLog.value, 0.5f, 0);
            Label_00F2:
                this.mState = 4;
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mState != null)
                {
                    goto Label_0025;
                }
                this.mState = 1;
                self.StartCoroutine(this.Wait(0.1f));
                return;
            Label_0025:
                if (this.mState != 1)
                {
                    goto Label_0032;
                }
                return;
            Label_0032:
                if (this.mState != 3)
                {
                    goto Label_0044;
                }
                this.StartEffect();
            Label_0044:
                if ((this.mHealEffect == null) == null)
                {
                    goto Label_0091;
                }
                if (this.mController.IsHPGaugeChanging != null)
                {
                    goto Label_0091;
                }
                if (this.mLog.type != 1)
                {
                    goto Label_008B;
                }
                UnitQueue.Instance.Refresh(this.mLog.self);
            Label_008B:
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_0091:
                return;
            }

            [DebuggerHidden]
            private IEnumerator Wait(float wait)
            {
                <Wait>c__Iterator3D iteratord;
                iteratord = new <Wait>c__Iterator3D();
                iteratord.wait = wait;
                iteratord.<$>wait = wait;
                iteratord.<>f__this = this;
                return iteratord;
            }

            [CompilerGenerated]
            private sealed class <Wait>c__Iterator3D : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal float wait;
                internal int $PC;
                internal object $current;
                internal float <$>wait;
                internal SceneBattle.State_AutoHeal <>f__this;

                public <Wait>c__Iterator3D()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0021;

                        case 1:
                            goto Label_003E;
                    }
                    goto Label_0051;
                Label_0021:
                    this.$current = new WaitForSeconds(this.wait);
                    this.$PC = 1;
                    goto Label_0053;
                Label_003E:
                    this.<>f__this.mState = 3;
                    this.$PC = -1;
                Label_0051:
                    return 0;
                Label_0053:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            private enum State
            {
                Start,
                Wait,
                End,
                EffectStart,
                Effect
            }
        }

        private class State_Battle_EndSkill : State<SceneBattle>
        {
            private bool mIsBusy;
            private SkillData mSkillData;
            private LogSkill mLogSkill;

            public State_Battle_EndSkill()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            private IEnumerator AsyncUpdate()
            {
                <AsyncUpdate>c__Iterator42 iterator;
                iterator = new <AsyncUpdate>c__Iterator42();
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Begin(SceneBattle self)
            {
                this.mIsBusy = 1;
                this.mLogSkill = self.mBattle.Logs.Peek as LogSkill;
                self.StartCoroutine(this.AsyncUpdate());
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                TacticsUnitController controller;
                LogSkill.Target target;
                List<LogSkill.Target>.Enumerator enumerator;
                TacticsUnitController controller2;
                TacticsUnitController controller3;
                List<TacticsUnitController> list;
                LogSkill.Target target2;
                List<LogSkill.Target>.Enumerator enumerator2;
                TacticsUnitController controller4;
                if (this.mIsBusy == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if (this.mSkillData == null)
                {
                    goto Label_003E;
                }
                if (this.mSkillData.IsTransformSkill() == null)
                {
                    goto Label_003E;
                }
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
                return;
            Label_003E:
                self.mIgnoreShieldEffect.Clear();
                if (this.mLogSkill == null)
                {
                    goto Label_01F9;
                }
                controller = self.FindUnitController(this.mLogSkill.self);
                if ((controller != null) == null)
                {
                    goto Label_007E;
                }
                self.mIgnoreShieldEffect.Add(controller);
            Label_007E:
                enumerator = this.mLogSkill.targets.GetEnumerator();
            Label_008F:
                try
                {
                    goto Label_00D1;
                Label_0094:
                    target = &enumerator.Current;
                    if (target.isProcShield == null)
                    {
                        goto Label_00AC;
                    }
                    goto Label_00D1;
                Label_00AC:
                    controller2 = self.FindUnitController(target.target);
                    if ((controller2 != null) == null)
                    {
                        goto Label_00D1;
                    }
                    self.mIgnoreShieldEffect.Add(controller2);
                Label_00D1:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0094;
                    }
                    goto Label_00EE;
                }
                finally
                {
                Label_00E2:
                    ((List<LogSkill.Target>.Enumerator) enumerator).Dispose();
                }
            Label_00EE:
                if ((self.mEventScript != null) == null)
                {
                    goto Label_01F9;
                }
                controller3 = self.FindUnitController(this.mLogSkill.self);
                if ((controller3 != null) == null)
                {
                    goto Label_01F9;
                }
                if (this.mLogSkill.targets == null)
                {
                    goto Label_01F9;
                }
                if (this.mLogSkill.targets.Count == null)
                {
                    goto Label_01F9;
                }
                list = new List<TacticsUnitController>();
                enumerator2 = this.mLogSkill.targets.GetEnumerator();
            Label_015D:
                try
                {
                    goto Label_0190;
                Label_0162:
                    target2 = &enumerator2.Current;
                    controller4 = self.FindUnitController(target2.target);
                    if ((controller4 != null) == null)
                    {
                        goto Label_0190;
                    }
                    list.Add(controller4);
                Label_0190:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_0162;
                    }
                    goto Label_01AE;
                }
                finally
                {
                Label_01A1:
                    ((List<LogSkill.Target>.Enumerator) enumerator2).Dispose();
                }
            Label_01AE:
                if (list.Count == null)
                {
                    goto Label_01F9;
                }
                self.mEventSequence = self.mEventScript.OnUseSkill(1, controller3, this.mLogSkill.skill, list, self.mIsFirstPlay);
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_01F9;
                }
                self.GotoState_WaitSignal<SceneBattle.State_WaitEvent<SceneBattle.State_SpawnShieldEffects>>();
                return;
            Label_01F9:
                self.GotoState_WaitSignal<SceneBattle.State_SpawnShieldEffects>();
                return;
            }

            private void UpdateHPGauges()
            {
                LogSkill skill;
                int num;
                int num2;
                TacticsUnitController controller;
                skill = base.self.mBattle.Logs.Peek as LogSkill;
                num = 0;
                goto Label_0087;
            Label_0022:
                num2 = -skill.targets[num].GetTotalHpDamage() + skill.targets[num].GetTotalHpHeal();
                if (num2 == null)
                {
                    goto Label_0083;
                }
                controller = base.self.FindUnitController(skill.targets[num].target);
                if ((controller != null) == null)
                {
                    goto Label_0083;
                }
                controller.UpdateHPRelative(num2, 0.5f, 0);
            Label_0083:
                num += 1;
            Label_0087:
                if (num < skill.targets.Count)
                {
                    goto Label_0022;
                }
                return;
            }

            [CompilerGenerated]
            private sealed class <AsyncUpdate>c__Iterator42 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal int <i>__0;
                internal TacticsUnitController <tuc>__1;
                internal LogSkill <act>__2;
                internal Unit <target_unit>__3;
                internal TacticsUnitController <tuc>__4;
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_Battle_EndSkill <>f__this;

                public <AsyncUpdate>c__Iterator42()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_0041;

                        case 2:
                            goto Label_0463;
                    }
                    goto Label_04AB;
                Label_0025:
                    goto Label_0041;
                Label_002A:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 1;
                    goto Label_04AD;
                Label_0041:
                    if (FadeController.Instance.IsFading(0) != null)
                    {
                        goto Label_002A;
                    }
                    this.<i>__0 = 0;
                    goto Label_0143;
                Label_005D:
                    this.<tuc>__1 = this.<>f__this.self.mUnitsInBattle[this.<i>__0];
                    this.<tuc>__1.PlayIdle(0f);
                    this.<tuc>__1.UnloadBattleAnimations();
                    this.<tuc>__1.get_transform().SetParent(this.<>f__this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<>f__this.self.ResetUnitPosition(this.<tuc>__1);
                    this.<tuc>__1.AutoUpdateRotation = 1;
                    this.<tuc>__1.RootMotionMode = 0;
                    this.<tuc>__1.ShouldDodgeHits = 0;
                    this.<tuc>__1.ShouldPerfectDodge = 0;
                    this.<>f__this.self.RefreshUnitStatus(this.<tuc>__1.Unit);
                    this.<tuc>__1.AnimateVessel(0f, 0f);
                    this.<i>__0 += 1;
                Label_0143:
                    if (this.<i>__0 < this.<>f__this.self.mUnitsInBattle.Count)
                    {
                        goto Label_005D;
                    }
                    this.<act>__2 = this.<>f__this.self.mBattle.Logs.Peek as LogSkill;
                    if (this.<act>__2 == null)
                    {
                        goto Label_01FF;
                    }
                    if (this.<act>__2.skill.IsCollabo == null)
                    {
                        goto Label_01FF;
                    }
                    this.<target_unit>__3 = this.<>f__this.self.Battle.GetUnitUseCollaboSkill(this.<act>__2.self, this.<act>__2.skill);
                    if (this.<target_unit>__3 == null)
                    {
                        goto Label_01FF;
                    }
                    this.<>f__this.self.RefreshUnitStatus(this.<target_unit>__3);
                Label_01FF:
                    if (this.<act>__2 == null)
                    {
                        goto Label_0356;
                    }
                    if (this.<act>__2.skill == null)
                    {
                        goto Label_0356;
                    }
                    this.<>f__this.mSkillData = this.<act>__2.skill;
                    if (this.<>f__this.mSkillData.IsTransformSkill() == null)
                    {
                        goto Label_02FB;
                    }
                    this.<tuc>__4 = this.<>f__this.self.FindUnitController(this.<act>__2.self);
                    if ((this.<tuc>__4 != null) == null)
                    {
                        goto Label_02FB;
                    }
                    this.<>f__this.self.HideUnitMarkers(this.<tuc>__4.Unit);
                    this.<>f__this.self.mTacticsUnits.Remove(this.<tuc>__4);
                    Object.Destroy(this.<tuc>__4.get_gameObject());
                    this.<tuc>__4 = null;
                    if (this.<>f__this.self.mUnitsInBattle.Count == null)
                    {
                        goto Label_02FB;
                    }
                    this.<>f__this.self.mUnitsInBattle[0].SetVisible(1);
                Label_02FB:
                    if (this.<>f__this.mSkillData.IsSetBreakObjSkill() == null)
                    {
                        goto Label_0356;
                    }
                    if (this.<>f__this.self.mUnitsInBattle.Count == null)
                    {
                        goto Label_0356;
                    }
                    this.<>f__this.self.mUnitsInBattle[0].SetVisible(1);
                    this.<>f__this.self.OnGimmickUpdate();
                Label_0356:
                    FadeController.Instance.BeginSceneFade(Color.get_white(), 0f, this.<>f__this.self.mUnitsInBattle.ToArray(), null);
                    this.<>f__this.self.EnableWeatherEffect(1);
                    this.<>f__this.self.ToggleBattleScene(0, null);
                    this.<>f__this.self.SetScreenMirroring(0);
                    this.<>f__this.self.mUpdateCameraPosition = 1;
                    this.<>f__this.self.SetCameraTarget(this.<>f__this.self.mUnitsInBattle[0]);
                    this.<>f__this.self.UpdateCameraControl(1);
                    this.<>f__this.self.ToggleJumpSpots(1);
                    this.<>f__this.self.RefreshJumpSpots();
                    TrickData.AddMarker();
                    GameUtility.FadeIn(0.25f);
                    this.<>f__this.self.EnableUserInterface();
                    this.<>f__this.UpdateHPGauges();
                    goto Label_0463;
                Label_044C:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 2;
                    goto Label_04AD;
                Label_0463:
                    if (FadeController.Instance.IsFading(0) != null)
                    {
                        goto Label_044C;
                    }
                    this.<>f__this.self.RemoveLog();
                    this.<>f__this.self.mBattleUI.OnBattleEnd();
                    this.<>f__this.mIsBusy = 0;
                    this.$PC = -1;
                Label_04AB:
                    return 0;
                Label_04AD:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_Battle_PlaySkill : State<SceneBattle>
        {
            public State_Battle_PlaySkill()
            {
                base..ctor();
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                num = 0;
                goto Label_0022;
            Label_0007:
                if (self.mUnitsInBattle[num].isIdle != null)
                {
                    goto Label_001E;
                }
                return;
            Label_001E:
                num += 1;
            Label_0022:
                if (num < self.mUnitsInBattle.Count)
                {
                    goto Label_0007;
                }
                GameUtility.FadeOut(0.25f);
                self.GotoState<SceneBattle.State_Battle_EndSkill>();
                return;
            }
        }

        private class State_Battle_PrepareSkill : State<SceneBattle>
        {
            private SkillParam mSkill;
            private TacticsUnitController mInstigator;
            private List<TacticsUnitController> mTargets;

            public State_Battle_PrepareSkill()
            {
                this.mTargets = new List<TacticsUnitController>();
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                LogSkill skill;
                bool flag;
                int num;
                LogSkill.Target target;
                TacticsUnitController controller;
                string str;
                skill = self.mBattle.Logs.Peek as LogSkill;
                this.mInstigator = self.FindUnitController(skill.self);
                self.mUnitsInBattle.Clear();
                this.mSkill = skill.skill.SkillParam;
                flag = skill.skill.IsDamagedSkill();
                this.mInstigator.AutoUpdateRotation = 0;
                this.mInstigator.LoadSkillSequence(skill.skill.SkillParam, 0, 1, skill.skill.IsCollabo, self.mIsInstigatorSubUnit);
                if (string.IsNullOrEmpty(skill.skill.SkillParam.effect) != null)
                {
                    goto Label_00C5;
                }
                this.mInstigator.LoadSkillEffect(skill.skill.SkillParam.effect, self.mIsInstigatorSubUnit);
            Label_00C5:
                self.mUnitsInBattle.Add(this.mInstigator);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_0173;
                }
                self.mCollaboTargetTuc.AutoUpdateRotation = 0;
                self.mCollaboTargetTuc.LoadSkillSequence(skill.skill.SkillParam, 0, 1, skill.skill.IsCollabo, self.mIsInstigatorSubUnit == 0);
                if (string.IsNullOrEmpty(skill.skill.SkillParam.effect) != null)
                {
                    goto Label_0162;
                }
                self.mCollaboTargetTuc.LoadSkillEffect(skill.skill.SkillParam.effect, self.mIsInstigatorSubUnit == 0);
            Label_0162:
                self.mUnitsInBattle.Add(self.mCollaboTargetTuc);
            Label_0173:
                if (0 >= this.mSkill.hp_cost)
                {
                    goto Label_01D2;
                }
                this.mInstigator.SetHpCostSkill(skill.skill.GetHpCost(skill.self));
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_01D2;
                }
                self.mCollaboTargetTuc.SetHpCostSkill(skill.skill.GetHpCost(skill.self));
            Label_01D2:
                num = 0;
                goto Label_02AE;
            Label_01D9:
                target = skill.targets[num];
                controller = self.FindUnitController(target.target);
                this.mTargets.Add(controller);
                if (this.mSkill.IsTransformSkill() == null)
                {
                    goto Label_0233;
                }
                str = this.mInstigator.GetAnmNameTransformSkill();
                if (string.IsNullOrEmpty(str) != null)
                {
                    goto Label_0233;
                }
                controller.LoadTransformAnimation(str);
            Label_0233:
                if (flag == null)
                {
                    goto Label_0295;
                }
                if (skill.targets[num].IsAvoid() == null)
                {
                    goto Label_025B;
                }
                controller.LoadDodgeAnimation();
                goto Label_0295;
            Label_025B:
                if (skill.targets[num].IsCombo() == null)
                {
                    goto Label_028E;
                }
                if (skill.targets[num].IsAvoidJustOne() == null)
                {
                    goto Label_028E;
                }
                controller.LoadDodgeAnimation();
            Label_028E:
                controller.LoadDamageAnimations();
            Label_0295:
                controller.AutoUpdateRotation = 0;
                self.mUnitsInBattle.Add(controller);
                num += 1;
            Label_02AE:
                if (num < skill.targets.Count)
                {
                    goto Label_01D9;
                }
                self.SetPrioritizedUnits(self.mUnitsInBattle);
                self.DisableUserInterface();
                GameUtility.FadeOut(0.2f);
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                int num;
                LogSkill skill;
                Vector3 vector;
                Vector3 vector2;
                Vector3 vector3;
                Vector3 vector4;
                TacticsUnitController controller;
                Transform transform;
                int num2;
                TacticsUnitController controller2;
                LogSkill.Target target;
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_000B;
                }
                return;
            Label_000B:
                num = self.mUnitsInBattle.Count - 1;
                goto Label_0039;
            Label_001E:
                if (self.mUnitsInBattle[num].IsLoading == null)
                {
                    goto Label_0035;
                }
                return;
            Label_0035:
                num -= 1;
            Label_0039:
                if (num >= 0)
                {
                    goto Label_001E;
                }
                if (self.mLoadingShieldEffects == null)
                {
                    goto Label_004C;
                }
                return;
            Label_004C:
                skill = self.mBattle.Logs.Peek as LogSkill;
                self.mUpdateCameraPosition = 0;
                self.SetScreenMirroring(this.mInstigator.IsSkillMirror());
                self.ToggleBattleScene(1, skill.skill.SkillParam.SceneName);
                self.EnableWeatherEffect(0);
                vector = self.mBattleSceneRoot.PlayerStart2.get_position();
                vector2 = self.mBattleSceneRoot.PlayerStart2.get_position();
                vector3 = self.mBattleSceneRoot.PlayerStart1.get_position();
                if (this.mInstigator.IsSkillParentPosZero == null)
                {
                    goto Label_00E7;
                }
                vector = vector2 = vector3 = Vector3.get_zero();
            Label_00E7:
                if (self.mIsInstigatorSubUnit == null)
                {
                    goto Label_00FA;
                }
                vector4 = vector;
                vector = vector2;
                vector2 = vector4;
            Label_00FA:
                this.mInstigator.get_transform().set_position(vector);
                this.mInstigator.get_transform().set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart1.get_position() - self.mBattleSceneRoot.PlayerStart2.get_position()));
                this.mInstigator.get_transform().SetParent(self.mBattleSceneRoot.get_transform(), 0);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_01D9;
                }
                self.mCollaboTargetTuc.get_transform().set_position(vector2);
                self.mCollaboTargetTuc.get_transform().set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart1.get_position() - self.mBattleSceneRoot.PlayerStart2.get_position()));
                self.mCollaboTargetTuc.get_transform().SetParent(self.mBattleSceneRoot.get_transform(), 0);
            Label_01D9:
                if (this.mTargets.Count != 1)
                {
                    goto Label_02E0;
                }
                if ((this.mTargets[0] != this.mInstigator) == null)
                {
                    goto Label_02E0;
                }
                controller = this.mTargets[0];
                if (skill.skill.IsTransformSkill() == null)
                {
                    goto Label_0284;
                }
                controller.get_transform().set_position(vector);
                controller.get_transform().set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart1.get_position() - self.mBattleSceneRoot.PlayerStart2.get_position()));
                controller.get_transform().SetParent(self.mBattleSceneRoot.get_transform(), 0);
                goto Label_02E0;
            Label_0284:
                controller.get_transform().set_position(vector3);
                controller.get_transform().set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart2.get_position() - self.mBattleSceneRoot.PlayerStart1.get_position()));
                controller.get_transform().SetParent(self.mBattleSceneRoot.get_transform(), 0);
            Label_02E0:
                transform = Camera.get_main().get_transform();
                transform.set_position(&GameSettings.Instance.Quest.BattleCamera.get_position() + self.mBattleSceneRoot.PlayerStart2.get_position());
                transform.set_rotation(&GameSettings.Instance.Quest.BattleCamera.get_rotation());
                this.mInstigator.SetHitInfoSelf(skill.self_effect);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_0369;
                }
                self.mCollaboTargetTuc.SetHitInfoSelf(new LogSkill.Target());
            Label_0369:
                num2 = 0;
                goto Label_03D0;
            Label_0371:
                controller2 = self.FindUnitController(skill.targets[num2].target);
                target = skill.targets[num2];
                controller2.ShouldDodgeHits = target.IsAvoid();
                controller2.ShouldPerfectDodge = target.IsPerfectAvoid();
                controller2.SetHitInfo(skill.targets[num2]);
                num2 += 1;
            Label_03D0:
                if (num2 < skill.targets.Count)
                {
                    goto Label_0371;
                }
                self.ToggleJumpSpots(0);
                if (skill.skill.CastType != 2)
                {
                    goto Label_040B;
                }
                this.mInstigator.SetLandingGrid(skill.landing);
            Label_040B:
                if (skill.skill.TeleportType == null)
                {
                    goto Label_042C;
                }
                this.mInstigator.SetTeleportGrid(skill.TeleportGrid);
            Label_042C:
                this.mInstigator.StartSkill(self.CalcGridCenter(&skill.pos.x, &skill.pos.y), Camera.get_main(), this.mTargets.ToArray(), null, this.mSkill);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_04C3;
                }
                self.mCollaboTargetTuc.StartSkill(self.CalcGridCenter(self.mCollaboTargetTuc.Unit.x, self.mCollaboTargetTuc.Unit.y), Camera.get_main(), this.mTargets.ToArray(), null, this.mSkill);
            Label_04C3:
                GameUtility.FadeIn(0.2f);
                if ((self.mSkillSplash != null) == null)
                {
                    goto Label_0500;
                }
                if (self.mSkillSplash == null)
                {
                    goto Label_04F9;
                }
                self.mSkillSplash.Close();
            Label_04F9:
                self.mSkillSplash = null;
            Label_0500:
                if ((self.mSkillSplashCollabo != null) == null)
                {
                    goto Label_0533;
                }
                if (self.mSkillSplashCollabo == null)
                {
                    goto Label_052C;
                }
                self.mSkillSplashCollabo.Close();
            Label_052C:
                self.mSkillSplashCollabo = null;
            Label_0533:
                self.GotoState<SceneBattle.State_Battle_PlaySkill>();
                return;
            }
        }

        private class State_BattleDead : State<SceneBattle>
        {
            public State_BattleDead()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogDead dead;
                List<LogDead.Param> list;
                LogDead.Param param;
                List<LogDead.Param>.Enumerator enumerator;
                Unit unit;
                TacticsUnitController controller;
                dead = (LogDead) self.mBattle.Logs.Peek;
                list = new List<LogDead.Param>();
                list.AddRange(dead.list_normal);
                list.AddRange(dead.list_sentence);
                enumerator = list.GetEnumerator();
            Label_003B:
                try
                {
                    goto Label_0088;
                Label_0040:
                    param = &enumerator.Current;
                    unit = &param.self;
                    self.OnUnitDeath(unit);
                    self.HideUnitMarkers(unit);
                    controller = self.FindUnitController(unit);
                    self.mTacticsUnits.Remove(controller);
                    Object.Destroy(controller.get_gameObject());
                    controller = null;
                Label_0088:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0040;
                    }
                    goto Label_00A5;
                }
                finally
                {
                Label_0099:
                    ((List<LogDead.Param>.Enumerator) enumerator).Dispose();
                }
            Label_00A5:
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            public override void Update(SceneBattle self)
            {
            }
        }

        private class State_CastSkillEnd : State<SceneBattle>
        {
            public State_CastSkillEnd()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.Battle.CastSkillEnd();
                self.RemoveLog();
                return;
            }

            public override void Update(SceneBattle self)
            {
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_CastSkillStart : State<SceneBattle>
        {
            private TacticsUnitController mCasterController;

            public State_CastSkillStart()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                SkillData data;
                ECastTypes types;
                this.mCasterController = self.FindUnitController(self.mBattle.CurrentUnit);
                data = this.mCasterController.Unit.CastSkill;
                if (data == null)
                {
                    goto Label_0070;
                }
                if (data.CastType == 2)
                {
                    goto Label_0041;
                }
                goto Label_0048;
            Label_0041:
                self.GotoState<SceneBattle.State_CastSkillStartJump>();
                return;
            Label_0048:
                this.mCasterController.ChargeIcon.Close();
            Label_005D:
                if (data.EffectType != 0x12)
                {
                    goto Label_0070;
                }
                self.GotoState<SceneBattle.State_CastSkillStartChange>();
            Label_0070:
                self.Battle.CastSkillStart();
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_CastSkillStartChange : State<SceneBattle>
        {
            private TacticsUnitController mCasterController;

            public State_CastSkillStartChange()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mCasterController = self.FindUnitController(self.mBattle.CurrentUnit);
                self.Battle.CastSkillStart();
                self.RemoveLog();
                if ((this.mCasterController != null) == null)
                {
                    goto Label_0039;
                }
            Label_0039:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_CastSkillStartJump : State<SceneBattle>
        {
            private TacticsUnitController mCasterController;

            public State_CastSkillStartJump()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mCasterController = self.FindUnitController(self.mBattle.CurrentUnit);
                self.Battle.CastSkillStart();
                self.RemoveLog();
                if ((this.mCasterController != null) == null)
                {
                    goto Label_0049;
                }
                this.mCasterController.ChargeIcon.Close();
            Label_0049:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_ComfirmFinishbattle : State<SceneBattle>
        {
            private bool mIsFadeIn;

            public State_ComfirmFinishbattle()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mIsFadeIn = 0;
                GameUtility.SetDefaultSleepSetting();
                ProgressWindow.Close();
                GameUtility.FadeOut(1f);
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            public override void Update(SceneBattle self)
            {
                if (this.mIsFadeIn != null)
                {
                    goto Label_0032;
                }
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_0016;
                }
                return;
            Label_0016:
                GameUtility.FadeIn(1f);
                self.mBattleUI_MultiPlay.OnAlreadyFinish();
                this.mIsFadeIn = 1;
            Label_0032:
                if (self.AlreadyEndBattle == null)
                {
                    goto Label_0043;
                }
                self.ForceEndQuest();
            Label_0043:
                return;
            }
        }

        private class State_ConfirmContinue : State<SceneBattle>
        {
            public State_ConfirmContinue()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.Confirm();
                return;
            }

            private void Confirm()
            {
                if (ContinueWindow.Create(base.self.mContinueWindowRes, new ContinueWindow.ResultEvent(this.OnDecide), new ContinueWindow.ResultEvent(this.OnCancel)) != null)
                {
                    goto Label_0034;
                }
                this.OnCancel(null);
            Label_0034:
                return;
            }

            private void OnBuyCoinCancel()
            {
                base.self.GotoState<SceneBattle.State_ExitQuest>();
                return;
            }

            private void OnBuyCoinEnd()
            {
                this.Confirm();
                return;
            }

            private void OnCancel(GameObject dialog)
            {
                base.self.GotoState<SceneBattle.State_ExitQuest>();
                return;
            }

            private void OnDecide(GameObject dialog)
            {
                if (MonoSingleton<GameManager>.Instance.Player.Coin < MonoSingleton<GameManager>.Instance.MasterParam.FixParam.ContinueCoinCost)
                {
                    goto Label_0066;
                }
                MonoSingleton<GameManager>.Instance.Player.DEBUG_CONSUME_COIN(MonoSingleton<GameManager>.Instance.MasterParam.FixParam.ContinueCoinCost);
                base.self.GotoState<SceneBattle.State_ContinueQuest>();
                goto Label_0088;
            Label_0066:
                MonoSingleton<GameManager>.Instance.ConfirmBuyCoin(new GameManager.BuyCoinEvent(this.OnBuyCoinEnd), new GameManager.BuyCoinEvent(this.OnBuyCoinCancel));
            Label_0088:
                return;
            }
        }

        private class State_Connect : State<SceneBattle>
        {
            public State_Connect()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.RemoveLog();
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (Network.IsBusy == null)
                {
                    goto Label_000B;
                }
                return;
            Label_000B:
                if (Network.IsError == null)
                {
                    goto Label_0020;
                }
                DebugUtility.LogError("connection error.");
                return;
            Label_0020:
                if (self.Battle.Logs.Num != null)
                {
                    goto Label_003F;
                }
                DebugUtility.LogError("failed. logs not found.");
            Label_003F:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_ContinueQuest : State<SceneBattle>
        {
            private bool mRequested;
            private SceneBattle mScene;

            public State_ContinueQuest()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mScene = self;
                GameUtility.FadeOut(1f);
                return;
            }

            private unsafe void OnSuccess(WWWResult www)
            {
                WebAPI.JSON_BodyResponse<BattleCore.Json_Battle> response;
                Network.EErrCode code;
                if (Network.IsError == null)
                {
                    goto Label_0043;
                }
                code = Network.ErrCode;
                if (code == 0xe10)
                {
                    goto Label_002B;
                }
                if (code == 0xe11)
                {
                    goto Label_0037;
                }
                goto Label_003D;
            Label_002B:
                base.self.GotoState<SceneBattle.State_ExitQuest>();
                return;
            Label_0037:
                FlowNode_Network.Failed();
                return;
            Label_003D:
                FlowNode_Network.Retry();
                return;
            Label_0043:
                response = JSONParser.parseJSONObject<WebAPI.JSON_BodyResponse<BattleCore.Json_Battle>>(&www.text);
                DebugUtility.Assert((response == null) == 0, "res == null");
                if (response.body != null)
                {
                    goto Label_0072;
                }
                FlowNode_Network.Retry();
                return;
            Label_0072:
                Network.RemoveAPI();
                MyMetaps.TrackSpendCoin("ContinueQuest", MonoSingleton<GameManager>.Instance.MasterParam.FixParam.ContinueCoinCost);
                this.ResBtlComCont(response.body);
                return;
            }

            private unsafe void ResBtlComCont(BattleCore.Json_Battle response)
            {
                List<Unit> list;
                int num;
                TacticsUnitController controller;
                List<Unit> list2;
                Unit unit;
                List<Unit>.Enumerator enumerator;
                TacticsUnitController controller2;
                int num2;
                TacticsUnitController controller3;
                if (response == null)
                {
                    goto Label_01BE;
                }
                this.mScene.CloseBattleUI();
                list = this.mScene.Battle.Player;
                num = 0;
                goto Label_009B;
            Label_0029:
                controller = this.mScene.FindUnitController(list[num]);
                if ((controller == null) == null)
                {
                    goto Label_004D;
                }
                goto Label_0097;
            Label_004D:
                if (list[num].IsJump == null)
                {
                    goto Label_0065;
                }
                controller.SetVisible(1);
            Label_0065:
                if (controller.Unit.IsDead != null)
                {
                    goto Label_007A;
                }
                goto Label_0097;
            Label_007A:
                this.mScene.mTacticsUnits.Remove(controller);
                GameUtility.DestroyGameObject(controller.get_gameObject());
            Label_0097:
                num += 1;
            Label_009B:
                if (num < list.Count)
                {
                    goto Label_0029;
                }
                GameUtility.FadeIn(1f);
                this.mScene.mUnitStartCount = 0;
                enumerator = this.mScene.Battle.ContinueStart(response.btlid, response.btlinfo.seed).GetEnumerator();
            Label_00E7:
                try
                {
                    goto Label_0135;
                Label_00EC:
                    unit = &enumerator.Current;
                    controller2 = this.mScene.FindUnitController(unit);
                    if ((controller2 == null) == null)
                    {
                        goto Label_0116;
                    }
                    goto Label_0135;
                Label_0116:
                    this.mScene.mTacticsUnits.Remove(controller2);
                    GameUtility.DestroyGameObject(controller2.get_gameObject());
                Label_0135:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_00EC;
                    }
                    goto Label_0153;
                }
                finally
                {
                Label_0146:
                    ((List<Unit>.Enumerator) enumerator).Dispose();
                }
            Label_0153:
                this.mScene.RefreshJumpSpots();
                num2 = 0;
                goto Label_019A;
            Label_0166:
                controller3 = this.mScene.FindUnitController(list[num2]);
                if ((controller3 == null) == null)
                {
                    goto Label_018D;
                }
                goto Label_0194;
            Label_018D:
                controller3.UpdateBadStatus();
            Label_0194:
                num2 += 1;
            Label_019A:
                if (num2 < list.Count)
                {
                    goto Label_0166;
                }
                UnitQueue.Instance.Refresh(0);
                base.self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_01BE:
                return;
            }

            public override void Update(SceneBattle self)
            {
                BattleCore.Record record;
                ReqBtlComCont cont;
                BattleCore.Json_Battle battle;
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_000B;
                }
                return;
            Label_000B:
                if (this.mRequested == null)
                {
                    goto Label_0017;
                }
                return;
            Label_0017:
                record = self.Battle.GetQuestRecord();
                if (Network.Mode != null)
                {
                    goto Label_006C;
                }
                cont = new ReqBtlComCont(self.Battle.BtlID, record, new Network.ResponseCallback(this.OnSuccess), PunMonoSingleton<MyPhoton>.Instance.IsMultiPlay, self.Battle.IsMultiTower);
                Network.RequestAPI(cont, 0);
                goto Label_00A6;
            Label_006C:
                battle = new BattleCore.Json_Battle();
                battle.btlid = this.mScene.Battle.BtlID;
                battle.btlinfo = new BattleCore.Json_BtlInfo();
                battle.btlinfo.seed = 0;
                this.ResBtlComCont(battle);
            Label_00A6:
                this.mRequested = 1;
                return;
            }
        }

        private class State_DirectionOffSkill : State<SceneBattle>
        {
            private IEnumerator mTask;
            private IEnumerator mTaskNext;
            private LogSkill mActionInfo;
            private TacticsUnitController mInstigator;
            private List<TacticsUnitController> mTargets;

            public State_DirectionOffSkill()
            {
                this.mTargets = new List<TacticsUnitController>();
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                LogSkill skill;
                skill = self.mBattle.Logs.Peek as LogSkill;
                this.ResetTask();
                if (skill.skill != null)
                {
                    goto Label_0038;
                }
                self.RemoveLog();
                DebugUtility.LogError("SkillParam が存在しません。");
                return;
            Label_0038:
                this.mActionInfo = skill;
                this.mInstigator = self.FindUnitController(this.mActionInfo.self);
                this.SetTask(this.Task_PrepareSkill(self));
                self.RemoveLog();
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            private bool NextTask()
            {
                if (this.mTaskNext == null)
                {
                    goto Label_0020;
                }
                this.mTask = this.mTaskNext;
                this.mTaskNext = null;
                return 1;
            Label_0020:
                return 0;
            }

            private void ResetTask()
            {
                this.mTask = null;
                this.mTaskNext = null;
                return;
            }

            private void SetTask(IEnumerator enumrator)
            {
                this.mTaskNext = enumrator;
                return;
            }

            [DebuggerHidden]
            private IEnumerator Task_Execute(SceneBattle self)
            {
                <Task_Execute>c__Iterator4B iteratorb;
                iteratorb = new <Task_Execute>c__Iterator4B();
                iteratorb.self = self;
                iteratorb.<$>self = self;
                iteratorb.<>f__this = this;
                return iteratorb;
            }

            [DebuggerHidden]
            private IEnumerator Task_MapPlaySkill(SceneBattle self)
            {
                <Task_MapPlaySkill>c__Iterator4A iteratora;
                iteratora = new <Task_MapPlaySkill>c__Iterator4A();
                iteratora.self = self;
                iteratora.<$>self = self;
                iteratora.<>f__this = this;
                return iteratora;
            }

            [DebuggerHidden]
            private IEnumerator Task_MapPrepareSkill(SceneBattle self)
            {
                <Task_MapPrepareSkill>c__Iterator49 iterator;
                iterator = new <Task_MapPrepareSkill>c__Iterator49();
                iterator.self = self;
                iterator.<$>self = self;
                iterator.<>f__this = this;
                return iterator;
            }

            [DebuggerHidden]
            private IEnumerator Task_PrepareSkill(SceneBattle self)
            {
                <Task_PrepareSkill>c__Iterator48 iterator;
                iterator = new <Task_PrepareSkill>c__Iterator48();
                iterator.self = self;
                iterator.<$>self = self;
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Update(SceneBattle self)
            {
                bool flag;
                flag = this.NextTask() == 0;
                if (this.mTask == null)
                {
                    goto Label_0036;
                }
                if (this.mTask.MoveNext() != null)
                {
                    goto Label_0034;
                }
                flag = this.NextTask() == 0;
                goto Label_0036;
            Label_0034:
                flag = 0;
            Label_0036:
                if (flag == null)
                {
                    goto Label_0043;
                }
                this.mTask = null;
            Label_0043:
                return;
            }

            [CompilerGenerated]
            private sealed class <Task_Execute>c__Iterator4B : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal float <time>__0;
                internal SceneBattle.State_DirectionOffSkill.EndGotoState <nextState>__1;
                internal SkillData <skill>__2;
                internal int <i>__3;
                internal SceneBattle self;
                internal Unit <target_unit>__4;
                internal Vector3 <pos>__5;
                internal Vector3 <pos>__6;
                internal int <i>__7;
                internal LogSkill.Target <target>__8;
                internal TacticsUnitController <targetController>__9;
                internal Vector3 <pos>__10;
                internal Vector3 <pos>__11;
                internal Vector3 <targetPos>__12;
                internal LogSkill.Target <target>__13;
                internal TacticsUnitController <targetController>__14;
                internal int <i>__15;
                internal LogSkill.Target <target>__16;
                internal TacticsUnitController <targetController>__17;
                internal Vector3 <pos>__18;
                internal List<LogSkill.Target>.Enumerator <$s_293>__19;
                internal LogSkill.Target <target>__20;
                internal TacticsUnitController <tuc>__21;
                internal TacticsUnitController <controller>__22;
                internal List<TacticsUnitController> <target_tuc_lists>__23;
                internal List<LogSkill.Target>.Enumerator <$s_294>__24;
                internal LogSkill.Target <target>__25;
                internal TacticsUnitController <tuc>__26;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;
                internal SceneBattle.State_DirectionOffSkill <>f__this;

                public <Task_Execute>c__Iterator4B()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    SceneBattle.State_DirectionOffSkill.EndGotoState state;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_008A;

                        case 2:
                            goto Label_00D4;
                    }
                    goto Label_0ACA;
                Label_0025:
                    this.<time>__0 = 0.2f;
                Label_0030:
                    this.<time>__0 -= Time.get_deltaTime();
                    if (this.<time>__0 > 0f)
                    {
                        goto Label_0077;
                    }
                    this.<time>__0 = 0.25f;
                    if (this.<>f__this.mInstigator.DirectionOff_OnEventStart() != null)
                    {
                        goto Label_0077;
                    }
                    goto Label_008F;
                Label_0077:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_0ACC;
                Label_008A:
                    goto Label_0030;
                Label_008F:
                    this.<time>__0 = 1f;
                Label_009A:
                    this.<time>__0 -= Time.get_deltaTime();
                    if (this.<time>__0 > 0f)
                    {
                        goto Label_00C1;
                    }
                    goto Label_00D9;
                Label_00C1:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0ACC;
                Label_00D4:
                    goto Label_009A;
                Label_00D9:
                    this.<nextState>__1 = 0;
                    this.<skill>__2 = this.<>f__this.mActionInfo.skill;
                    this.<i>__3 = 0;
                    goto Label_01D4;
                Label_0102:
                    this.<>f__this.mTargets[this.<i>__3].ShouldDodgeHits = 0;
                    this.<>f__this.mTargets[this.<i>__3].ShouldPerfectDodge = 0;
                    this.<>f__this.mTargets[this.<i>__3].ShouldDefendHits = 0;
                    this.<>f__this.mTargets[this.<i>__3].ShowCriticalEffectOnHit = 0;
                    this.<>f__this.mTargets[this.<i>__3].ShowBackstabEffectOnHit = 0;
                    this.<>f__this.mTargets[this.<i>__3].DrainGemsOnHit = 0;
                    this.<>f__this.mTargets[this.<i>__3].ShowElementEffectOnHit = 1;
                    this.<i>__3 += 1;
                Label_01D4:
                    if (this.<i>__3 < this.<>f__this.mTargets.Count)
                    {
                        goto Label_0102;
                    }
                    if (this.<>f__this.mActionInfo.IsRenkei() == null)
                    {
                        goto Label_0210;
                    }
                    this.self.ToggleRenkeiAura(0);
                Label_0210:
                    this.self.RefreshJumpSpots();
                    this.self.RefreshUnitStatus(this.<>f__this.mInstigator.Unit);
                    if (this.<skill>__2.IsCollabo == null)
                    {
                        goto Label_0293;
                    }
                    this.<target_unit>__4 = this.self.Battle.GetUnitUseCollaboSkill(this.<>f__this.mInstigator.Unit, this.<skill>__2);
                    if (this.<target_unit>__4 == null)
                    {
                        goto Label_0293;
                    }
                    this.self.RefreshUnitStatus(this.<target_unit>__4);
                Label_0293:
                    this.self.mSkillNamePlate.Close();
                    this.self.ResetCameraTarget();
                    TrickData.AddMarker();
                    if (this.<>f__this.mActionInfo.skill.CastType != 2)
                    {
                        goto Label_0335;
                    }
                    if (this.<>f__this.mActionInfo.landing == null)
                    {
                        goto Label_0335;
                    }
                    this.<pos>__5 = this.self.CalcGridCenter(this.<>f__this.mActionInfo.landing);
                    this.<>f__this.mInstigator.SetStartPos(this.<pos>__5);
                    this.<>f__this.mInstigator.get_transform().set_position(this.<pos>__5);
                Label_0335:
                    if (this.<>f__this.mActionInfo.skill.TeleportType == null)
                    {
                        goto Label_03B6;
                    }
                    if (this.<>f__this.mActionInfo.TeleportGrid == null)
                    {
                        goto Label_03B6;
                    }
                    this.<pos>__6 = this.self.CalcGridCenter(this.<>f__this.mActionInfo.TeleportGrid);
                    this.<>f__this.mInstigator.SetStartPos(this.<pos>__6);
                    this.<>f__this.mInstigator.get_transform().set_position(this.<pos>__6);
                Label_03B6:
                    if (this.<>f__this.mActionInfo.skill.EffectType != 0x16)
                    {
                        goto Label_04BB;
                    }
                    this.<i>__7 = 0;
                    goto Label_0496;
                Label_03DE:
                    this.<target>__8 = this.<>f__this.mActionInfo.targets[this.<i>__7];
                    if (this.<target>__8 == null)
                    {
                        goto Label_0488;
                    }
                    this.<targetController>__9 = this.self.FindUnitController(this.<target>__8.target);
                    if ((this.<targetController>__9 != null) == null)
                    {
                        goto Label_0488;
                    }
                    this.<pos>__10 = this.self.CalcGridCenter(&this.<>f__this.mActionInfo.pos.x, &this.<>f__this.mActionInfo.pos.y);
                    this.<targetController>__9.get_transform().set_position(this.<pos>__10);
                Label_0488:
                    this.<i>__7 += 1;
                Label_0496:
                    if (this.<i>__7 < this.<>f__this.mActionInfo.targets.Count)
                    {
                        goto Label_03DE;
                    }
                    goto Label_05CA;
                Label_04BB:
                    if (this.<>f__this.mActionInfo.skill.EffectType != 0x12)
                    {
                        goto Label_05CA;
                    }
                    this.<pos>__11 = this.<>f__this.mInstigator.get_transform().get_position();
                    this.<targetPos>__12 = this.<pos>__11;
                    if (this.<>f__this.mActionInfo.targets.Count <= 0)
                    {
                        goto Label_0599;
                    }
                    this.<target>__13 = this.<>f__this.mActionInfo.targets[0];
                    if (this.<target>__13 == null)
                    {
                        goto Label_0599;
                    }
                    this.<targetController>__14 = this.self.FindUnitController(this.<target>__13.target);
                    if ((this.<targetController>__14 != null) == null)
                    {
                        goto Label_0599;
                    }
                    this.<targetPos>__12 = this.<targetController>__14.get_transform().get_position();
                    this.<targetController>__14.get_transform().set_position(this.<pos>__11);
                Label_0599:
                    this.<>f__this.mInstigator.SetStartPos(this.<targetPos>__12);
                    this.<>f__this.mInstigator.get_transform().set_position(this.<targetPos>__12);
                Label_05CA:
                    this.<i>__15 = 0;
                    goto Label_067F;
                Label_05D6:
                    this.<target>__16 = this.<>f__this.mActionInfo.targets[this.<i>__15];
                    if (this.<target>__16 == null)
                    {
                        goto Label_0671;
                    }
                    if (this.<target>__16.KnockBackGrid == null)
                    {
                        goto Label_0671;
                    }
                    this.<targetController>__17 = this.self.FindUnitController(this.<target>__16.target);
                    if ((this.<targetController>__17 != null) == null)
                    {
                        goto Label_0671;
                    }
                    this.<pos>__18 = this.self.CalcGridCenter(this.<target>__16.KnockBackGrid);
                    this.<targetController>__17.get_transform().set_position(this.<pos>__18);
                Label_0671:
                    this.<i>__15 += 1;
                Label_067F:
                    if (this.<i>__15 < this.<>f__this.mActionInfo.targets.Count)
                    {
                        goto Label_05D6;
                    }
                    if (this.<>f__this.mActionInfo.skill.IsTransformSkill() == null)
                    {
                        goto Label_0769;
                    }
                    this.<>f__this.mInstigator.DirectionOff_EndSkill();
                    this.self.HideUnitMarkers(this.<>f__this.mInstigator.Unit);
                    this.self.mTacticsUnits.Remove(this.<>f__this.mInstigator);
                    Object.Destroy(this.<>f__this.mInstigator.get_gameObject());
                    this.<>f__this.mInstigator = null;
                    if (this.<>f__this.mTargets.Count == null)
                    {
                        goto Label_074D;
                    }
                    this.<>f__this.mTargets[0].SetVisible(1);
                Label_074D:
                    this.self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                    this.<nextState>__1 = 1;
                Label_0769:
                    if (this.<>f__this.mActionInfo.skill.IsSetBreakObjSkill() == null)
                    {
                        goto Label_07BA;
                    }
                    if (this.<>f__this.mTargets.Count == null)
                    {
                        goto Label_07BA;
                    }
                    this.<>f__this.mTargets[0].SetVisible(1);
                    this.self.OnGimmickUpdate();
                Label_07BA:
                    if (this.<nextState>__1 != null)
                    {
                        goto Label_0A3D;
                    }
                    this.<nextState>__1 = 3;
                    this.self.mIgnoreShieldEffect.Clear();
                    if (this.<>f__this.mActionInfo == null)
                    {
                        goto Label_0A3D;
                    }
                    this.self.mIgnoreShieldEffect.Add(this.<>f__this.mInstigator);
                    this.<$s_293>__19 = this.<>f__this.mActionInfo.targets.GetEnumerator();
                Label_0822:
                    try
                    {
                        goto Label_0890;
                    Label_0827:
                        this.<target>__20 = &this.<$s_293>__19.Current;
                        if (this.<target>__20.isProcShield == null)
                        {
                            goto Label_084D;
                        }
                        goto Label_0890;
                    Label_084D:
                        this.<tuc>__21 = this.self.FindUnitController(this.<target>__20.target);
                        if ((this.<tuc>__21 != null) == null)
                        {
                            goto Label_0890;
                        }
                        this.self.mIgnoreShieldEffect.Add(this.<tuc>__21);
                    Label_0890:
                        if (&this.<$s_293>__19.MoveNext() != null)
                        {
                            goto Label_0827;
                        }
                        goto Label_08B6;
                    }
                    finally
                    {
                    Label_08A5:
                        ((List<LogSkill.Target>.Enumerator) this.<$s_293>__19).Dispose();
                    }
                Label_08B6:
                    if ((this.self.mEventScript != null) == null)
                    {
                        goto Label_0A3D;
                    }
                    this.<controller>__22 = this.self.FindUnitController(this.<>f__this.mActionInfo.self);
                    if ((this.<controller>__22 != null) == null)
                    {
                        goto Label_0A3D;
                    }
                    if (this.<>f__this.mActionInfo.targets == null)
                    {
                        goto Label_0A3D;
                    }
                    if (this.<>f__this.mActionInfo.targets.Count == null)
                    {
                        goto Label_0A3D;
                    }
                    this.<target_tuc_lists>__23 = new List<TacticsUnitController>();
                    this.<$s_294>__24 = this.<>f__this.mActionInfo.targets.GetEnumerator();
                Label_0953:
                    try
                    {
                        goto Label_09A7;
                    Label_0958:
                        this.<target>__25 = &this.<$s_294>__24.Current;
                        this.<tuc>__26 = this.self.FindUnitController(this.<target>__25.target);
                        if ((this.<tuc>__26 != null) == null)
                        {
                            goto Label_09A7;
                        }
                        this.<target_tuc_lists>__23.Add(this.<tuc>__26);
                    Label_09A7:
                        if (&this.<$s_294>__24.MoveNext() != null)
                        {
                            goto Label_0958;
                        }
                        goto Label_09CD;
                    }
                    finally
                    {
                    Label_09BC:
                        ((List<LogSkill.Target>.Enumerator) this.<$s_294>__24).Dispose();
                    }
                Label_09CD:
                    if (this.<target_tuc_lists>__23.Count == null)
                    {
                        goto Label_0A3D;
                    }
                    this.self.mEventSequence = this.self.mEventScript.OnUseSkill(1, this.<controller>__22, this.<>f__this.mActionInfo.skill, this.<target_tuc_lists>__23, this.self.mIsFirstPlay);
                    if ((this.self.mEventSequence != null) == null)
                    {
                        goto Label_0A3D;
                    }
                    this.<nextState>__1 = 2;
                Label_0A3D:
                    if ((this.<>f__this.mInstigator != null) == null)
                    {
                        goto Label_0A63;
                    }
                    this.<>f__this.mInstigator.DirectionOff_EndSkill();
                Label_0A63:
                    switch ((this.<nextState>__1 - 1))
                    {
                        case 0:
                            goto Label_0A83;

                        case 1:
                            goto Label_0A93;

                        case 2:
                            goto Label_0AA3;
                    }
                    goto Label_0AB3;
                Label_0A83:
                    this.self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
                    goto Label_0AC3;
                Label_0A93:
                    this.self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_SpawnShieldEffects>>();
                    goto Label_0AC3;
                Label_0AA3:
                    this.self.GotoState<SceneBattle.State_SpawnShieldEffects>();
                    goto Label_0AC3;
                Label_0AB3:
                    this.self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
                Label_0AC3:
                    this.$PC = -1;
                Label_0ACA:
                    return 0;
                Label_0ACC:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <Task_MapPlaySkill>c__Iterator4A : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal SkillData <skill>__0;
                internal SkillParam <param>__1;
                internal SceneBattle self;
                internal Vector3 <pos>__2;
                internal Vector3 <campos>__3;
                internal int <i>__4;
                internal List<Vector3> <hitGrids>__5;
                internal GridMap<bool> <grid>__6;
                internal int <y>__7;
                internal int <x>__8;
                internal SkillEffect <effect>__9;
                internal bool <isCritical>__10;
                internal GameSettings <settings>__11;
                internal TacticsUnitController[] <targets>__12;
                internal int <i>__13;
                internal LogSkill.Target <hitInfo>__14;
                internal TacticsUnitController <targetController>__15;
                internal SkillEffect.SFX[] <$s_291>__16;
                internal int <$s_292>__17;
                internal SkillEffect.SFX <sfx>__18;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;
                internal SceneBattle.State_DirectionOffSkill <>f__this;

                public <Task_MapPlaySkill>c__Iterator4A()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_02A5;

                        case 2:
                            goto Label_02CD;
                    }
                    goto Label_08DC;
                Label_0025:
                    this.<skill>__0 = this.<>f__this.mActionInfo.skill;
                    this.<param>__1 = this.<skill>__0.SkillParam;
                    if ((this.<skill>__0.TeleportType != 2) || (this.<>f__this.mActionInfo.TeleportGrid == null))
                    {
                        goto Label_00C4;
                    }
                    this.<pos>__2 = this.self.CalcGridCenter(this.<>f__this.mActionInfo.TeleportGrid);
                    this.<>f__this.mInstigator.SetStartPos(this.<pos>__2);
                    this.<>f__this.mInstigator.get_transform().set_position(this.<pos>__2);
                Label_00C4:
                    if (this.<skill>__0.CastType != 2)
                    {
                        goto Label_00E6;
                    }
                    this.<>f__this.mInstigator.SetVisible(1);
                Label_00E6:
                    if ((this.<skill>__0.TeleportType != 1) && (this.<skill>__0.TeleportType != 3))
                    {
                        goto Label_0123;
                    }
                    this.self.InterpCameraTarget(this.<>f__this.mInstigator);
                    goto Label_028D;
                Label_0123:
                    if (this.<>f__this.mActionInfo.targets.Count <= 0)
                    {
                        goto Label_0277;
                    }
                    this.<campos>__3 = Vector3.get_zero();
                    this.<i>__4 = 0;
                    goto Label_01C9;
                Label_0155:
                    this.<campos>__3 += this.self.CalcGridCenter(this.<>f__this.mActionInfo.targets[this.<i>__4].target.x, this.<>f__this.mActionInfo.targets[this.<i>__4].target.y);
                    this.<i>__4 += 1;
                Label_01C9:
                    if (this.<i>__4 < this.<>f__this.mActionInfo.targets.Count)
                    {
                        goto Label_0155;
                    }
                    &this.<campos>__3.x /= (float) this.<>f__this.mActionInfo.targets.Count;
                    &this.<campos>__3.y /= (float) this.<>f__this.mActionInfo.targets.Count;
                    &this.<campos>__3.z /= (float) this.<>f__this.mActionInfo.targets.Count;
                    this.self.InterpCameraTarget(this.<campos>__3);
                    goto Label_028D;
                Label_0277:
                    this.self.InterpCameraTarget(this.<>f__this.mInstigator);
                Label_028D:
                    goto Label_02A5;
                Label_0292:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_08DE;
                Label_02A5:
                    if (this.self.mDesiredCameraTargetSet != null)
                    {
                        goto Label_0292;
                    }
                    goto Label_02CD;
                Label_02BA:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_08DE;
                Label_02CD:
                    if (ObjectAnimator.Get(Camera.get_main()).isMoving != null)
                    {
                        goto Label_02BA;
                    }
                    this.<hitGrids>__5 = null;
                    if (this.<param>__1.IsAreaSkill() == null)
                    {
                        goto Label_0421;
                    }
                    this.<hitGrids>__5 = new List<Vector3>();
                    this.<grid>__6 = this.self.mBattle.CreateScopeGridMap(this.<>f__this.mActionInfo.self, this.<>f__this.mActionInfo.self.x, this.<>f__this.mActionInfo.self.y, &this.<>f__this.mActionInfo.pos.x, &this.<>f__this.mActionInfo.pos.y, this.<skill>__0);
                    this.<y>__7 = 0;
                    goto Label_040B;
                Label_038F:
                    this.<x>__8 = 0;
                    goto Label_03E7;
                Label_039B:
                    if (this.<grid>__6.get(this.<x>__8, this.<y>__7) == null)
                    {
                        goto Label_03D9;
                    }
                    this.<hitGrids>__5.Add(this.self.CalcGridCenter(this.<x>__8, this.<y>__7));
                Label_03D9:
                    this.<x>__8 += 1;
                Label_03E7:
                    if (this.<x>__8 < this.<grid>__6.w)
                    {
                        goto Label_039B;
                    }
                    this.<y>__7 += 1;
                Label_040B:
                    if (this.<y>__7 < this.<grid>__6.h)
                    {
                        goto Label_038F;
                    }
                Label_0421:
                    this.<effect>__9 = this.<>f__this.mInstigator.LoadedSkillEffect;
                    this.<isCritical>__10 = 0;
                    this.<settings>__11 = GameSettings.Instance;
                    this.<>f__this.mInstigator.SetHitInfoSelf(this.<>f__this.mActionInfo.self_effect);
                    if ((this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_0494;
                    }
                    this.self.mCollaboTargetTuc.SetHitInfoSelf(new LogSkill.Target());
                Label_0494:
                    this.<targets>__12 = new TacticsUnitController[this.<>f__this.mActionInfo.targets.Count];
                    this.<i>__13 = 0;
                    goto Label_077B;
                Label_04C0:
                    this.<hitInfo>__14 = this.<>f__this.mActionInfo.targets[this.<i>__13];
                    this.<targetController>__15 = this.self.FindUnitController(this.<>f__this.mActionInfo.targets[this.<i>__13].target);
                    this.<targets>__12[this.<i>__13] = this.<targetController>__15;
                    this.<targetController>__15.ShouldDodgeHits = this.<hitInfo>__14.IsAvoid();
                    this.<targetController>__15.ShouldPerfectDodge = this.<hitInfo>__14.IsPerfectAvoid();
                    this.<targetController>__15.ShouldDefendHits = this.<hitInfo>__14.IsDefend();
                    this.<targetController>__15.SetHitInfo(this.<hitInfo>__14);
                    if (this.<targetController>__15.ShouldDodgeHits != null)
                    {
                        goto Label_0627;
                    }
                    this.<targetController>__15.ShowCriticalEffectOnHit = this.<hitInfo>__14.IsCritical();
                    this.<targetController>__15.ShowBackstabEffectOnHit = ((this.<hitInfo>__14.hitType & 1) == null) ? 0 : this.<skill>__0.IsNormalAttack();
                    this.<targetController>__15.ShouldDefendHits = this.<hitInfo>__14.IsDefend();
                    if (this.<hitInfo>__14.IsNormalEffectElement() == null)
                    {
                        goto Label_0600;
                    }
                    this.<targetController>__15.ShowElementEffectOnHit = 1;
                    goto Label_0622;
                Label_0600:
                    this.<targetController>__15.ShowElementEffectOnHit = (this.<hitInfo>__14.IsWeakEffectElement() == null) ? 0 : 2;
                Label_0622:
                    goto Label_0657;
                Label_0627:
                    this.<targetController>__15.ShowCriticalEffectOnHit = 0;
                    this.<targetController>__15.ShowBackstabEffectOnHit = 0;
                    this.<targetController>__15.ShouldDefendHits = 0;
                    this.<targetController>__15.ShowElementEffectOnHit = 1;
                Label_0657:
                    if (this.<hitInfo>__14.gems <= 0)
                    {
                        goto Label_0735;
                    }
                    if ((this.<hitInfo>__14.hitType & 2) == null)
                    {
                        goto Label_06AB;
                    }
                    this.<targetController>__15.DrainGemsOnHit = this.<settings>__11.Gem_DrainCount_SideHit;
                    this.<targetController>__15.GemDrainEffects = this.self.mGemDrainEffect_Side;
                    goto Label_071A;
                Label_06AB:
                    if ((this.<hitInfo>__14.hitType & 1) == null)
                    {
                        goto Label_06EE;
                    }
                    this.<targetController>__15.DrainGemsOnHit = this.<settings>__11.Gem_DrainCount_BackHit;
                    this.<targetController>__15.GemDrainEffects = this.self.mGemDrainEffect_Back;
                    goto Label_071A;
                Label_06EE:
                    this.<targetController>__15.DrainGemsOnHit = this.<settings>__11.Gem_DrainCount_FrontHit;
                    this.<targetController>__15.GemDrainEffects = this.self.mGemDrainEffect_Front;
                Label_071A:
                    this.<targetController>__15.GemDrainHitEffect = this.self.mGemDrainHitEffect;
                    goto Label_0741;
                Label_0735:
                    this.<targetController>__15.DrainGemsOnHit = 0;
                Label_0741:
                    this.<targetController>__15.KnockBackGrid = this.<hitInfo>__14.KnockBackGrid;
                    this.<>f__this.mTargets.Add(this.<targetController>__15);
                    this.<i>__13 += 1;
                Label_077B:
                    if (this.<i>__13 < this.<>f__this.mActionInfo.targets.Count)
                    {
                        goto Label_04C0;
                    }
                    this.<$s_291>__16 = this.<effect>__9.ExplosionSounds;
                    this.<$s_292>__17 = 0;
                    goto Label_07E5;
                Label_07B8:
                    this.<sfx>__18 = this.<$s_291>__16[this.<$s_292>__17];
                    this.<sfx>__18.IsCritical = 0;
                    this.<$s_292>__17 += 1;
                Label_07E5:
                    if (this.<$s_292>__17 < ((int) this.<$s_291>__16.Length))
                    {
                        goto Label_07B8;
                    }
                    if ((this.<>f__this.mActionInfo.skill.IsNormalAttack() == null) || (((int) this.<effect>__9.ExplosionSounds.Length) <= 0))
                    {
                        goto Label_083D;
                    }
                    this.<effect>__9.ExplosionSounds[0].IsCritical = this.<isCritical>__10;
                Label_083D:
                    this.<>f__this.mInstigator.DirectionOff_StartSkill(this.self.CalcGridCenter(&this.<>f__this.mActionInfo.pos.x, &this.<>f__this.mActionInfo.pos.y), Camera.get_main(), this.<targets>__12, (this.<hitGrids>__5 == null) ? null : this.<hitGrids>__5.ToArray(), this.<skill>__0.SkillParam);
                    this.<>f__this.SetTask(this.<>f__this.Task_Execute(this.self));
                    goto Label_08DC;
                Label_08DC:
                    return 0;
                Label_08DE:
                    return 1;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <Task_MapPrepareSkill>c__Iterator49 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal LogSkill <act>__0;
                internal SkillParam <skill>__1;
                internal TacticsUnitController <controller>__2;
                internal SceneBattle self;
                internal int <i>__3;
                internal TacticsUnitController <target>__4;
                internal string <anm_name>__5;
                internal IntVector2 <co>__6;
                internal GridMap<bool> <targetAreaGridMap>__7;
                internal bool <isRenkei>__8;
                internal Unit <current>__9;
                internal int <mRenkeiUnitIndex>__10;
                internal bool <isLoaded>__11;
                internal int <i>__12;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;
                internal SceneBattle.State_DirectionOffSkill <>f__this;

                public <Task_MapPrepareSkill>c__Iterator49()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0029;

                        case 1:
                            goto Label_028C;

                        case 2:
                            goto Label_0656;

                        case 3:
                            goto Label_0673;
                    }
                    goto Label_06A6;
                Label_0029:
                    this.<act>__0 = this.<>f__this.mActionInfo;
                    this.<skill>__1 = this.<act>__0.skill.SkillParam;
                    this.<controller>__2 = this.<>f__this.mInstigator;
                    this.self.mUnitsInBattle.Clear();
                    this.self.mUnitsInBattle.Add(this.<controller>__2);
                    this.<controller>__2.DirectionOff_LoadSkill(this.<skill>__1, this.<act>__0.skill.IsCollabo, this.self.mIsInstigatorSubUnit);
                    if (0 >= this.<skill>__1.hp_cost)
                    {
                        goto Label_0135;
                    }
                    this.<controller>__2.SetHpCostSkill(this.<act>__0.skill.GetHpCost(this.<act>__0.self));
                    if ((this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_0135;
                    }
                    this.self.mCollaboTargetTuc.SetHpCostSkill(this.<act>__0.skill.GetHpCost(this.<act>__0.self));
                Label_0135:
                    this.<i>__3 = 0;
                    goto Label_0259;
                Label_0141:
                    this.<target>__4 = this.self.FindUnitController(this.<act>__0.targets[this.<i>__3].target);
                    if (this.<skill>__1.IsTransformSkill() == null)
                    {
                        goto Label_01AF;
                    }
                    this.<anm_name>__5 = this.<controller>__2.GetAnmNameTransformSkill();
                    if (string.IsNullOrEmpty(this.<anm_name>__5) != null)
                    {
                        goto Label_01AF;
                    }
                    this.<target>__4.LoadTransformAnimation(this.<anm_name>__5);
                Label_01AF:
                    if (this.<act>__0.targets[this.<i>__3].IsAvoid() == null)
                    {
                        goto Label_01DF;
                    }
                    this.<target>__4.LoadDodgeAnimation();
                    goto Label_0235;
                Label_01DF:
                    if (this.<act>__0.targets[this.<i>__3].IsCombo() == null)
                    {
                        goto Label_022A;
                    }
                    if (this.<act>__0.targets[this.<i>__3].IsAvoidJustOne() == null)
                    {
                        goto Label_022A;
                    }
                    this.<target>__4.LoadDodgeAnimation();
                Label_022A:
                    this.<target>__4.LoadDamageAnimations();
                Label_0235:
                    this.self.mUnitsInBattle.Add(this.<target>__4);
                    this.<i>__3 += 1;
                Label_0259:
                    if (this.<i>__3 < this.<act>__0.targets.Count)
                    {
                        goto Label_0141;
                    }
                    goto Label_028C;
                Label_0279:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_06A8;
                Label_028C:
                    if (string.IsNullOrEmpty(this.<skill>__1.effect) != null)
                    {
                        goto Label_02B1;
                    }
                    if (this.<controller>__2.IsFinishedLoadSkillEffect() == null)
                    {
                        goto Label_0279;
                    }
                Label_02B1:
                    if (this.self.Battle.IsUnitAuto(this.<act>__0.self) != null)
                    {
                        goto Label_0325;
                    }
                    if (this.self.Battle.IsMultiPlay == null)
                    {
                        goto Label_0310;
                    }
                    if (this.self.Battle.CurrentUnit.OwnerPlayerIndex != this.self.Battle.MyPlayerIndex)
                    {
                        goto Label_0325;
                    }
                Label_0310:
                    if (this.<act>__0.skill.IsCastSkill() == null)
                    {
                        goto Label_0417;
                    }
                Label_0325:
                    this.<co>__6 = this.self.CalcCoord(this.<controller>__2.CenterPosition);
                    this.<targetAreaGridMap>__7 = this.self.mBattle.CreateScopeGridMap(this.<controller>__2.Unit, &this.<co>__6.x, &this.<co>__6.y, &this.<act>__0.pos.x, &this.<act>__0.pos.y, this.<act>__0.skill);
                    if (this.<targetAreaGridMap>__7 == null)
                    {
                        goto Label_03DA;
                    }
                    this.<targetAreaGridMap>__7.set(&this.<act>__0.pos.x, &this.<act>__0.pos.y, 1);
                Label_03DA:
                    this.self.mSkillDirectionByKouka = this.self.GetSkillDirectionByTargetArea(this.<controller>__2.Unit, &this.<co>__6.x, &this.<co>__6.y, this.<targetAreaGridMap>__7);
                Label_0417:
                    this.<controller>__2.SkillTurn(this.<act>__0, this.self.mSkillDirectionByKouka);
                    if ((this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_046A;
                    }
                    this.self.mCollaboTargetTuc.SkillTurn(this.<act>__0, this.self.mSkillDirectionByKouka);
                Label_046A:
                    this.<isRenkei>__8 = this.<act>__0.IsRenkei();
                    if (this.<isRenkei>__8 == null)
                    {
                        goto Label_05AE;
                    }
                    this.<current>__9 = this.self.mBattle.CurrentUnit;
                    if (this.<current>__9 == null)
                    {
                        goto Label_04B7;
                    }
                    this.<current>__9.PlayBattleVoice("battle_0015");
                Label_04B7:
                    this.<mRenkeiUnitIndex>__10 = 0;
                    goto Label_0535;
                Label_04C3:
                    this.<controller>__2 = this.self.FindUnitController(this.self.mBattle.HelperUnits[this.<mRenkeiUnitIndex>__10]);
                    if ((this.<controller>__2 != null) == null)
                    {
                        goto Label_0527;
                    }
                    GameUtility.SpawnParticle(this.self.mRenkeiAssistEffect, this.<controller>__2.get_transform(), this.self.get_gameObject());
                Label_0527:
                    this.<mRenkeiUnitIndex>__10 += 1;
                Label_0535:
                    if (this.<mRenkeiUnitIndex>__10 < this.self.mBattle.HelperUnits.Count)
                    {
                        goto Label_04C3;
                    }
                    this.<controller>__2 = this.self.FindUnitController(this.self.mBattle.CurrentUnit);
                    if ((this.<controller>__2 != null) == null)
                    {
                        goto Label_05AE;
                    }
                    GameUtility.SpawnParticle(this.self.mRenkeiChargeEffect, this.<controller>__2.get_transform(), this.self.get_gameObject());
                Label_05AE:
                    this.<isLoaded>__11 = 1;
                    this.<i>__12 = this.self.mUnitsInBattle.Count - 1;
                    goto Label_0627;
                Label_05D2:
                    if (this.self.mUnitsInBattle[this.<i>__12].IsLoading != null)
                    {
                        goto Label_0612;
                    }
                    if (this.self.mUnitsInBattle[this.<i>__12].isIdle != null)
                    {
                        goto Label_0619;
                    }
                Label_0612:
                    this.<isLoaded>__11 = 0;
                Label_0619:
                    this.<i>__12 -= 1;
                Label_0627:
                    if (this.<i>__12 >= 0)
                    {
                        goto Label_05D2;
                    }
                    if (this.<isLoaded>__11 == null)
                    {
                        goto Label_0643;
                    }
                    goto Label_065B;
                Label_0643:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_06A8;
                Label_0656:
                    goto Label_05AE;
                Label_065B:
                    goto Label_0673;
                Label_0660:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_06A8;
                Label_0673:
                    if (this.self.mLoadingShieldEffects != null)
                    {
                        goto Label_0660;
                    }
                    this.<>f__this.SetTask(this.<>f__this.Task_MapPlaySkill(this.self));
                    this.$PC = -1;
                Label_06A6:
                    return 0;
                Label_06A8:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <Task_PrepareSkill>c__Iterator48 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal LogSkill <log>__0;
                internal SkillData <skill>__1;
                internal TacticsUnitController <controller>__2;
                internal Unit <unit>__3;
                internal SceneBattle self;
                internal bool <mIsLoadTransformUnit>__4;
                internal bool <mIsLoadBreakObjUnit>__5;
                internal Unit <cst_unit>__6;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;
                internal SceneBattle.State_DirectionOffSkill <>f__this;

                public <Task_PrepareSkill>c__Iterator48()
                {
                    base..ctor();
                    return;
                }

                internal void <>m__C2()
                {
                    this.<mIsLoadTransformUnit>__4 = 0;
                    return;
                }

                internal void <>m__C3()
                {
                    this.<mIsLoadBreakObjUnit>__5 = 0;
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_00A3;

                        case 2:
                            goto Label_0213;
                    }
                    goto Label_03C0;
                Label_0025:
                    this.<log>__0 = this.<>f__this.mActionInfo;
                    this.<skill>__1 = this.<log>__0.skill;
                    this.<controller>__2 = this.<>f__this.mInstigator;
                    this.<unit>__3 = this.<log>__0.self;
                    if (this.<skill>__1.SkillType == 1)
                    {
                        goto Label_00A3;
                    }
                    if (this.<skill>__1.SkillType != 4)
                    {
                        goto Label_00DE;
                    }
                    goto Label_00A3;
                Label_0090:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_03C2;
                Label_00A3:
                    if (this.self.IsClosedSkillNamePlate() == null)
                    {
                        goto Label_0090;
                    }
                    this.self.ShowSkillNamePlate(this.<>f__this.mActionInfo.self, this.<skill>__1, string.Empty, 2f);
                Label_00DE:
                    this.<mIsLoadTransformUnit>__4 = this.<skill>__1.IsTransformSkill();
                    if (this.<mIsLoadTransformUnit>__4 == null)
                    {
                        goto Label_016A;
                    }
                    if (this.<log>__0.targets == null)
                    {
                        goto Label_0163;
                    }
                    if (this.<log>__0.targets.Count == null)
                    {
                        goto Label_0163;
                    }
                    this.self.StartCoroutine(SceneBattle.State_PrepareSkill.loadTransformUnit(this.self, this.<log>__0.targets[0].target, this.<controller>__2, new Action(this.<>m__C2)));
                    goto Label_016A;
                Label_0163:
                    this.<mIsLoadTransformUnit>__4 = 0;
                Label_016A:
                    this.<mIsLoadBreakObjUnit>__5 = this.<skill>__1.IsSetBreakObjSkill();
                    if (this.<mIsLoadBreakObjUnit>__5 == null)
                    {
                        goto Label_01F0;
                    }
                    if (this.<log>__0.targets == null)
                    {
                        goto Label_01E9;
                    }
                    if (this.<log>__0.targets.Count == null)
                    {
                        goto Label_01E9;
                    }
                    this.self.StartCoroutine(SceneBattle.State_PrepareSkill.loadBreakObjUnit(this.self, this.<log>__0.targets[0].target, new Action(this.<>m__C3)));
                    goto Label_01F0;
                Label_01E9:
                    this.<mIsLoadBreakObjUnit>__5 = 0;
                Label_01F0:
                    this.self.DeleteOnGimmickIcon();
                    goto Label_0213;
                Label_0200:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_03C2;
                Label_0213:
                    if (this.<mIsLoadTransformUnit>__4 != null)
                    {
                        goto Label_0200;
                    }
                    this.self.mCollaboMainUnit = this.<log>__0.self;
                    this.self.mCollaboTargetTuc = null;
                    this.self.mIsInstigatorSubUnit = 0;
                    if (this.<log>__0.skill.IsCollabo == null)
                    {
                        goto Label_0309;
                    }
                    this.<cst_unit>__6 = this.<log>__0.self.GetUnitUseCollaboSkill(this.<log>__0.skill, this.<log>__0.self.x, this.<log>__0.self.y);
                    if (this.<cst_unit>__6 == null)
                    {
                        goto Label_0309;
                    }
                    this.self.mCollaboTargetTuc = this.self.FindUnitController(this.<cst_unit>__6);
                    if ((this.<cst_unit>__6.UnitParam.iname == this.<log>__0.skill.SkillParam.CollaboMainId) == null)
                    {
                        goto Label_0309;
                    }
                    this.self.mIsInstigatorSubUnit = 1;
                Label_0309:
                    if (this.<skill>__1.SkillType != 1)
                    {
                        goto Label_039D;
                    }
                    if (string.IsNullOrEmpty(this.<skill>__1.SkillParam.CollaboVoiceId) != null)
                    {
                        goto Label_038D;
                    }
                    if ((this.<skill>__1.SkillParam.CollaboVoiceId != "NONE") == null)
                    {
                        goto Label_039D;
                    }
                    if (this.self.mCollaboTargetTuc == null)
                    {
                        goto Label_036D;
                    }
                    goto Label_0388;
                Label_036D:
                    this.<unit>__3.PlayBattleVoice(this.<skill>__1.SkillParam.CollaboVoiceId);
                Label_0388:
                    goto Label_039D;
                Label_038D:
                    this.<unit>__3.PlayBattleVoice("battle_0014");
                Label_039D:
                    this.<>f__this.SetTask(this.<>f__this.Task_MapPrepareSkill(this.self));
                    this.$PC = -1;
                Label_03C0:
                    return 0;
                Label_03C2:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            private enum EndGotoState
            {
                NONE,
                WAIT_FOR_LOG,
                WAITEVENT_SPAWN_SHIELD_EFFECT,
                SPAWN_SHIELD_EFFECT
            }
        }

        private class State_Disconnected : State<SceneBattle>
        {
            public State_Disconnected()
            {
                base..ctor();
                return;
            }
        }

        private class State_Error : State<SceneBattle>
        {
            public State_Error()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
            }

            public override void End(SceneBattle self)
            {
                self.RemoveLog();
                return;
            }

            public override void Update(SceneBattle self)
            {
            }
        }

        private class State_EventMapDead : State<SceneBattle>
        {
            private TacticsUnitController mController;

            public State_EventMapDead()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogDead dead;
                List<TacticsUnitController> list;
                LogDead.Param param;
                List<LogDead.Param>.Enumerator enumerator;
                TacticsUnitController controller;
                LogDead.Param param2;
                List<LogDead.Param>.Enumerator enumerator2;
                TacticsUnitController controller2;
                TacticsUnitController controller3;
                List<TacticsUnitController>.Enumerator enumerator3;
                if ((self.mEventScript != null) == null)
                {
                    goto Label_0171;
                }
                dead = self.mBattle.Logs.Peek as LogDead;
                if (dead == null)
                {
                    goto Label_0171;
                }
                list = new List<TacticsUnitController>();
                enumerator = dead.list_normal.GetEnumerator();
            Label_003F:
                try
                {
                    goto Label_0070;
                Label_0044:
                    param = &enumerator.Current;
                    controller = self.FindUnitController(&param.self);
                    if ((controller != null) == null)
                    {
                        goto Label_0070;
                    }
                    list.Add(controller);
                Label_0070:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0044;
                    }
                    goto Label_008D;
                }
                finally
                {
                Label_0081:
                    ((List<LogDead.Param>.Enumerator) enumerator).Dispose();
                }
            Label_008D:
                enumerator2 = dead.list_sentence.GetEnumerator();
            Label_009A:
                try
                {
                    goto Label_00CC;
                Label_009F:
                    param2 = &enumerator2.Current;
                    controller2 = self.FindUnitController(&param2.self);
                    if ((controller2 != null) == null)
                    {
                        goto Label_00CC;
                    }
                    list.Add(controller2);
                Label_00CC:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_009F;
                    }
                    goto Label_00EA;
                }
                finally
                {
                Label_00DD:
                    ((List<LogDead.Param>.Enumerator) enumerator2).Dispose();
                }
            Label_00EA:
                enumerator3 = list.GetEnumerator();
            Label_00F2:
                try
                {
                    goto Label_0153;
                Label_00F7:
                    controller3 = &enumerator3.Current;
                    self.mEventSequence = self.mEventScript.OnUnitDead(controller3, self.mIsFirstPlay);
                    if ((self.mEventSequence != null) == null)
                    {
                        goto Label_0153;
                    }
                    this.mController = controller3;
                    self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                    self.InterpCameraTarget(this.mController);
                    goto Label_0177;
                Label_0153:
                    if (&enumerator3.MoveNext() != null)
                    {
                        goto Label_00F7;
                    }
                    goto Label_0171;
                }
                finally
                {
                Label_0164:
                    ((List<TacticsUnitController>.Enumerator) enumerator3).Dispose();
                }
            Label_0171:
                self.GotoState<SceneBattle.State_MapDead>();
            Label_0177:
                return;
            }

            public override void Update(SceneBattle self)
            {
                if ((this.mController != null) == null)
                {
                    goto Label_001D;
                }
                if (self.IsCameraMoving == null)
                {
                    goto Label_001D;
                }
                return;
            Label_001D:
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_EventMapDead>>();
                return;
            }
        }

        private class State_ExitQuest : State<SceneBattle>
        {
            public State_ExitQuest()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                if (self.mQuestResultSent != null)
                {
                    goto Label_0020;
                }
                if (MonoSingleton<GameManager>.Instance.AudienceMode != null)
                {
                    goto Label_0020;
                }
                self.SubmitResult();
            Label_0020:
                self.mPauseReqCount = 0;
                TimeManager.SetTimeScale(0, 1f);
                self.StartCoroutine(this.ExitAsync());
                return;
            }

            [DebuggerHidden]
            private IEnumerator ExitAsync()
            {
                <ExitAsync>c__Iterator3C iteratorc;
                iteratorc = new <ExitAsync>c__Iterator3C();
                iteratorc.<>f__this = this;
                return iteratorc;
            }

            [CompilerGenerated]
            private sealed class <ExitAsync>c__Iterator3C : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal GameManager <gm>__0;
                internal LoadRequest <request>__1;
                internal EventScript <script>__2;
                internal EventScript.Sequence <seq>__3;
                internal bool <selectLatestQuest>__4;
                internal int <i>__5;
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_ExitQuest <>f__this;

                public <ExitAsync>c__Iterator3C()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0035;

                        case 1:
                            goto Label_0068;

                        case 2:
                            goto Label_0172;

                        case 3:
                            goto Label_01B3;

                        case 4:
                            goto Label_0280;

                        case 5:
                            goto Label_02CE;

                        case 6:
                            goto Label_0498;
                    }
                    goto Label_049F;
                Label_0035:
                    this.<gm>__0 = MonoSingleton<GameManager>.Instance;
                    if (this.<gm>__0.AudienceMode != null)
                    {
                        goto Label_007D;
                    }
                    goto Label_0068;
                Label_0055:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_04A1;
                Label_0068:
                    if (this.<>f__this.self.mQuestResultSent == null)
                    {
                        goto Label_0055;
                    }
                Label_007D:
                    this.<>f__this.self.CleanUpMultiPlay();
                    if (this.<>f__this.self.Battle.IsMultiPlay != null)
                    {
                        goto Label_00B7;
                    }
                    if (this.<gm>__0.AudienceMode == null)
                    {
                        goto Label_00D1;
                    }
                Label_00B7:
                    GameUtility.SetDefaultSleepSetting();
                    this.<>f__this.self.ExitScene();
                    goto Label_049F;
                Label_00D1:
                    if (this.<>f__this.self.Battle.GetQuestResult() != 1)
                    {
                        goto Label_02E8;
                    }
                    if (string.IsNullOrEmpty(this.<>f__this.self.mCurrentQuest.event_clear) != null)
                    {
                        goto Label_02E8;
                    }
                    if (this.<>f__this.self.mIsFirstWin == null)
                    {
                        goto Label_02E8;
                    }
                    this.<>f__this.self.mUpdateCameraPosition = 0;
                    this.<request>__1 = GameUtility.LoadResourceAsyncChecked<EventScript>("Events/" + this.<>f__this.self.mCurrentQuest.event_clear);
                Label_015B:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 2;
                    goto Label_04A1;
                Label_0172:
                    ProgressWindow.SetLoadProgress(this.<request>__1.progress);
                    if (this.<request>__1.isDone == null)
                    {
                        goto Label_015B;
                    }
                    GameUtility.FadeOut(1f);
                Label_019C:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 3;
                    goto Label_04A1;
                Label_01B3:
                    if (GameUtility.IsScreenFading != null)
                    {
                        goto Label_019C;
                    }
                    if ((this.<>f__this.self.mTacticsSceneRoot != null) == null)
                    {
                        goto Label_0203;
                    }
                    Object.Destroy(this.<>f__this.self.mTacticsSceneRoot.get_gameObject());
                    this.<>f__this.self.mTacticsSceneRoot = null;
                Label_0203:
                    this.<>f__this.self.DestroyUI(0);
                    if ((this.<request>__1.asset != null) == null)
                    {
                        goto Label_02E8;
                    }
                    this.<>f__this.self.mDownloadTutorialAssets = 1;
                    this.<script>__2 = this.<request>__1.asset as EventScript;
                    this.<seq>__3 = this.<script>__2.OnStart(0, 0);
                    goto Label_0280;
                Label_0269:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 4;
                    goto Label_04A1;
                Label_0280:
                    if ((this.<seq>__3 != null) == null)
                    {
                        goto Label_02A1;
                    }
                    if (this.<seq>__3.IsPlaying != null)
                    {
                        goto Label_0269;
                    }
                Label_02A1:
                    this.<>f__this.self.mDownloadTutorialAssets = 0;
                    goto Label_02CE;
                Label_02B7:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 5;
                    goto Label_04A1;
                Label_02CE:
                    if (AssetDownloader.isDone == null)
                    {
                        goto Label_02B7;
                    }
                    Object.Destroy(this.<seq>__3.get_gameObject());
                Label_02E8:
                    if (this.<>f__this.self.mCurrentQuest.IsStory == null)
                    {
                        goto Label_0323;
                    }
                    PlayerPrefsUtility.SetString(PlayerPrefsUtility.LAST_SELECTED_STORY_QUEST_ID, this.<>f__this.self.mCurrentQuest.iname, 1);
                Label_0323:
                    this.<selectLatestQuest>__4 = 0;
                    if (this.<>f__this.self.mCurrentQuest.IsStory == null)
                    {
                        goto Label_0366;
                    }
                    if (this.<>f__this.self.mStartQuestState == 2)
                    {
                        goto Label_0366;
                    }
                    this.<selectLatestQuest>__4 = 1;
                    goto Label_0465;
                Label_0366:
                    this.<selectLatestQuest>__4 = 1;
                    this.<i>__5 = 0;
                    goto Label_044D;
                Label_0379:
                    if ((this.<gm>__0.Chapters[this.<i>__5].iname == this.<>f__this.self.mCurrentQuest.ChapterID) == null)
                    {
                        goto Label_043F;
                    }
                    GlobalVars.SelectedSection.Set(this.<gm>__0.Chapters[this.<i>__5].section);
                    GlobalVars.SelectedChapter.Set(this.<gm>__0.Chapters[this.<i>__5].iname);
                    if (this.<gm>__0.Chapters[this.<i>__5].sectionParam == null)
                    {
                        goto Label_0433;
                    }
                    GlobalVars.SelectedStoryPart.Set(this.<gm>__0.Chapters[this.<i>__5].sectionParam.storyPart);
                Label_0433:
                    this.<selectLatestQuest>__4 = 0;
                    goto Label_0465;
                Label_043F:
                    this.<i>__5 += 1;
                Label_044D:
                    if (this.<i>__5 < ((int) this.<gm>__0.Chapters.Length))
                    {
                        goto Label_0379;
                    }
                Label_0465:
                    if (this.<selectLatestQuest>__4 == null)
                    {
                        goto Label_0475;
                    }
                    FlowNode_SelectLatestChapter.SelectLatestChapter();
                Label_0475:
                    this.<>f__this.self.ExitScene();
                    this.$current = null;
                    this.$PC = 6;
                    goto Label_04A1;
                Label_0498:
                    this.$PC = -1;
                Label_049F:
                    return 0;
                Label_04A1:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_ForceWinComfirm : State<SceneBattle>
        {
            public State_ForceWinComfirm()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
            }

            public override void End(SceneBattle self)
            {
            }

            public override void Update(SceneBattle self)
            {
                if (self.Battle.IsVSForceWinComfirm == null)
                {
                    goto Label_002F;
                }
                self.mBattleUI.OnCommandSelect();
                self.Battle.StartOrder(0, 0, 1);
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_002F:
                return;
            }
        }

        private class State_InitUI : State<SceneBattle>
        {
            private float mWait;
            private float mElapsed;
            private bool mLoaded;

            public State_InitUI()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                GameSettings settings;
                string str;
                settings = GameSettings.Instance;
                str = settings.QuestLoad_OkyakusamaCode;
                if (GameUtility.IsDebugBuild == null)
                {
                    goto Label_0031;
                }
                if ((MonoSingleton<GameManager>.Instance.Player.OkyakusamaCode != str) == null)
                {
                    goto Label_0041;
                }
            Label_0031:
                this.mWait = 0f;
                goto Label_004D;
            Label_0041:
                this.mWait = settings.QuestLoad_WaitSecond;
            Label_004D:
                return;
            }

            public override void Update(SceneBattle self)
            {
                this.mElapsed += Time.get_deltaTime();
                if (this.mWait >= this.mElapsed)
                {
                    goto Label_0042;
                }
                if (this.mLoaded != null)
                {
                    goto Label_0042;
                }
                self.StartCoroutine(self.LoadUIAsync());
                this.mLoaded = 1;
            Label_0042:
                return;
            }
        }

        private class State_InputDirection : State<SceneBattle>
        {
            private DirectionArrow[] mArrows;
            private int mSelectedDirection;
            private Unit mCurrentUnit;
            private TacticsUnitController mController;
            private bool mIsStepEnd;
            private bool mCancelButtonActive;
            private bool mIsAuto;

            public State_InputDirection()
            {
                this.mArrows = new DirectionArrow[4];
                this.mSelectedDirection = -1;
                this.mCancelButtonActive = 1;
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                Selectable selectable;
                bool flag;
                bool flag2;
                IntVector2 vector;
                Grid grid;
                TacticsUnitController controller;
                this.mCurrentUnit = self.mBattle.CurrentUnit;
                this.mController = self.FindUnitController(this.mCurrentUnit);
                this.mController.AutoUpdateRotation = 1;
                self.ToggleRenkeiAura(0);
                self.InterpCameraTarget(this.mController);
                self.HideAllHPGauges();
                self.HideAllUnitOwnerIndex();
                selectable = self.mBattleUI.CommandWindow.CancelButton.GetComponent<Selectable>();
                if ((selectable != null) == null)
                {
                    goto Label_00B4;
                }
                this.mCancelButtonActive = selectable.get_interactable();
                flag = this.mCurrentUnit.IsEnableMoveCondition(0);
                if (this.mCurrentUnit.IsEnableActionCondition() != null)
                {
                    goto Label_00AD;
                }
                if (flag != null)
                {
                    goto Label_00AD;
                }
                selectable.set_interactable(0);
                goto Label_00B4;
            Label_00AD:
                selectable.set_interactable(1);
            Label_00B4:
                self.mBattleUI.CommandWindow.OKButton.SetActive(1);
                vector = self.CalcCoord(this.mController.CenterPosition);
                grid = self.mBattle.CurrentMap[&vector.x, &vector.y];
                this.mController.StepTo(self.CalcGridCenter(grid));
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                this.mCurrentUnit.Direction = controller.CalcUnitDirectionFromRotation();
                return;
            }

            public override void End(SceneBattle self)
            {
                UnitCommands commands1;
                int num;
                Selectable selectable;
                commands1 = self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Remove(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                num = 0;
                goto Label_0064;
            Label_0033:
                if ((this.mArrows[num] != null) == null)
                {
                    goto Label_0060;
                }
                if (num == this.mSelectedDirection)
                {
                    goto Label_0060;
                }
                this.mArrows[num].State = 3;
            Label_0060:
                num += 1;
            Label_0064:
                if (num < 4)
                {
                    goto Label_0033;
                }
                selectable = self.mBattleUI.CommandWindow.CancelButton.GetComponent<Selectable>();
                if ((selectable != null) == null)
                {
                    goto Label_0099;
                }
                selectable.set_interactable(this.mCancelButtonActive);
            Label_0099:
                self.mOnScreenClick = null;
                self.mOnRequestStateChange = null;
                return;
            }

            private unsafe void OnScreenClick(Vector2 position)
            {
                Camera camera;
                float num;
                int num2;
                float num3;
                int num4;
                Vector2 vector;
                float num5;
                Vector2 vector2;
                camera = Camera.get_main();
                num = (float) (Screen.get_height() / 5);
                num2 = -1;
                num3 = 3.402823E+38f;
                num4 = 0;
                goto Label_006E;
            Label_001F:
                vector2 = camera.WorldToScreenPoint(this.mArrows[num4].get_transform().get_position()) - position;
                num5 = &vector2.get_magnitude();
                if (num5 >= num)
                {
                    goto Label_0068;
                }
                if (num5 >= num3)
                {
                    goto Label_0068;
                }
                num3 = num5;
                num2 = num4;
            Label_0068:
                num4 += 1;
            Label_006E:
                if (num4 < ((int) this.mArrows.Length))
                {
                    goto Label_001F;
                }
                if (num2 == -1)
                {
                    goto Label_008C;
                }
                this.SelectDirection(num2);
                return;
            Label_008C:
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                if (req != null)
                {
                    goto Label_000B;
                }
                goto Label_0026;
            Label_000B:
                base.self.mBattleUI.OnInputDirectionEnd();
                base.self.GotoMapCommand();
            Label_0026:
                return;
            }

            private void OnStepEnd()
            {
                UnitCommands commands1;
                int num;
                EUnitDirection direction;
                Quaternion quaternion;
                Vector3 vector;
                TacticsUnitController controller;
                int num2;
                base.self.mOnScreenClick = new SceneBattle.ScreenClickEvent(this.OnScreenClick);
                num = 0;
                goto Label_007B;
            Label_001E:
                direction = num;
                quaternion = SRPG_Extensions.ToRotation(direction);
                vector = quaternion * base.self.DirectionArrowTemplate.get_transform().get_position();
                this.mArrows[num] = Object.Instantiate(base.self.DirectionArrowTemplate, this.mController.get_transform().get_position() + vector, quaternion) as DirectionArrow;
                num += 1;
            Label_007B:
                if (num < 4)
                {
                    goto Label_001E;
                }
                this.UpdateArrows();
                base.self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                base.self.mOnScreenClick = new SceneBattle.ScreenClickEvent(this.OnScreenClick);
                commands1 = base.self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Combine(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                controller = base.self.FindUnitController(base.self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_0168;
                }
                if (base.self.mTutorialTriggers == null)
                {
                    goto Label_0168;
                }
                num2 = 0;
                goto Label_0154;
            Label_0129:
                base.self.mTutorialTriggers[num2].OnSelectDirectionStart(this.mCurrentUnit, controller.Unit.TurnCount);
                num2 += 1;
            Label_0154:
                if (num2 < ((int) base.self.mTutorialTriggers.Length))
                {
                    goto Label_0129;
                }
            Label_0168:
                return;
            }

            private void OnYesNoSelect(bool yes)
            {
                if (yes == null)
                {
                    goto Label_00A5;
                }
                this.SelectDirection(base.self.mBattle.CurrentUnit.Direction);
                base.self.Battle.MapCommandEnd(base.self.Battle.CurrentUnit);
                if (base.self.Battle.IsMultiPlay == null)
                {
                    goto Label_00CC;
                }
                base.self.SendInputEntryBattle(4, base.self.Battle.CurrentUnit, null, null, null, base.self.Battle.CurrentUnit.x, base.self.Battle.CurrentUnit.y, 0);
                goto Label_00CC;
            Label_00A5:
                base.self.mBattleUI.OnInputDirectionEnd();
                base.self.ToggleRenkeiAura(1);
                base.self.GotoMapCommand();
            Label_00CC:
                return;
            }

            public void SelectDirection(EUnitDirection dir)
            {
                base.self.ApplyUnitMovement(0);
                this.mArrows[dir].State = 1;
                MonoSingleton<MySound>.Instance.PlaySEOneShot("SE_0003", 0f);
                this.mSelectedDirection = dir;
                base.self.mBattleUI.OnInputDirectionEnd();
                if (base.self.Battle.IsMultiPlay == null)
                {
                    goto Label_0083;
                }
                base.self.SendInputUnitEnd(base.self.Battle.CurrentUnit, dir);
                base.self.SendInputFlush(0);
            Label_0083:
                base.self.mBattle.CommandWait(dir);
                base.self.GotoState_WaitSignal<SceneBattle.State_WaitForLog>();
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                Vector2 vector;
                self.Battle.IsAutoBattle = self.Battle.RequestAutoBattle;
                if (this.mController.isIdle == null)
                {
                    goto Label_0060;
                }
                if (this.mIsStepEnd != null)
                {
                    goto Label_0060;
                }
                this.OnStepEnd();
                this.mIsStepEnd = 1;
                if (self.Battle.IsAutoBattle == null)
                {
                    goto Label_0060;
                }
                this.SelectDirection(this.mCurrentUnit.Direction);
                return;
            Label_0060:
                if (Time.get_timeScale() > 0f)
                {
                    goto Label_0093;
                }
                if (self.Battle.IsAutoBattle == null)
                {
                    goto Label_008B;
                }
                this.mIsAuto = 1;
                goto Label_0092;
            Label_008B:
                this.mIsAuto = 0;
            Label_0092:
                return;
            Label_0093:
                if (this.mIsAuto == null)
                {
                    goto Label_00B0;
                }
                this.SelectDirection(this.mCurrentUnit.Direction);
                return;
            Label_00B0:
                if (self.Battle.IsAutoBattle == null)
                {
                    goto Label_00E1;
                }
                if (Time.get_timeScale() > 0f)
                {
                    goto Label_00E0;
                }
                this.SelectDirection(this.mCurrentUnit.Direction);
            Label_00E0:
                return;
            Label_00E1:
                if ((self.mTouchController != null) == null)
                {
                    goto Label_013A;
                }
                vector = self.mTouchController.WorldSpaceVelocity;
                if (&vector.get_magnitude() <= 5f)
                {
                    goto Label_013A;
                }
                &vector.Normalize();
                this.mCurrentUnit.Direction = TacticsUnitController.CalcUnitDirection(&vector.x, &vector.y);
                this.UpdateArrows();
            Label_013A:
                return;
            }

            private void UpdateArrows()
            {
                int num;
                EUnitDirection direction;
                num = 0;
                goto Label_0040;
            Label_0007:
                direction = num;
                this.mArrows[num].State = (direction != this.mCurrentUnit.Direction) ? 0 : 2;
                this.mArrows[num].Direction = direction;
                num += 1;
            Label_0040:
                if (num < 4)
                {
                    goto Label_0007;
                }
                return;
            }
        }

        private class State_JumpCastStart : State<SceneBattle>
        {
            private TacticsUnitController mCasterController;
            private float WaitTime;
            private float CountTime;
            private bool mDirection;

            public State_JumpCastStart()
            {
                this.WaitTime = 1f;
                this.mDirection = 1;
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                LogCast cast;
                cast = self.Battle.Logs.Peek as LogCast;
                this.mCasterController = self.FindUnitController(cast.self);
                self.RemoveLog();
                this.mDirection = self.Battle.IsSkillDirection;
                if (this.mDirection == null)
                {
                    goto Label_006D;
                }
                self.mUpdateCameraPosition = 1;
                self.InterpCameraTarget(this.mCasterController);
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
            Label_006D:
                return;
            }

            public override void End(SceneBattle self)
            {
                self.RefreshJumpSpots();
                self.mUpdateCameraPosition = 0;
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mDirection != null)
                {
                    goto Label_0032;
                }
                this.mCasterController.SetVisible(0);
                this.mCasterController.ChargeIcon.Open();
                self.GotoState<SceneBattle.State_WaitForLog>();
                goto Label_009D;
            Label_0032:
                if (this.WaitTime <= this.CountTime)
                {
                    goto Label_0087;
                }
                this.CountTime += Time.get_deltaTime();
                if (this.WaitTime > this.CountTime)
                {
                    goto Label_0086;
                }
                this.mCasterController.CastJump();
                this.mCasterController.ChargeIcon.Open();
                goto Label_0087;
            Label_0086:
                return;
            Label_0087:
                if (this.mCasterController.IsCastJumpStartComplete() == null)
                {
                    goto Label_009D;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_009D:
                return;
            }
        }

        private class State_JumpFall : State<SceneBattle>
        {
            private const float WAIT_TIME = 0.5f;
            private const float DELAY_TIME = 0.1f;
            private LogFall mLog;
            private bool mDirection;
            private eDirectionMode mDirectionMode;
            private List<Caster> mCasterLists;

            public State_JumpFall()
            {
                this.mDirection = 1;
                this.mCasterLists = new List<Caster>();
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                int num;
                LogFall.Param param;
                TacticsUnitController controller;
                Vector3 vector;
                Vector3 vector2;
                float num2;
                List<Vector3> list;
                int num3;
                this.mLog = self.Battle.Logs.Peek as LogFall;
                if (this.mLog == null)
                {
                    goto Label_003B;
                }
                if (this.mLog.mLists.Count != null)
                {
                    goto Label_0042;
                }
            Label_003B:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_0042:
                num = 0;
                goto Label_00BC;
            Label_0049:
                param = this.mLog.mLists[num];
                controller = self.FindUnitController(&param.mSelf);
                if ((controller == null) == null)
                {
                    goto Label_007A;
                }
                goto Label_00B8;
            Label_007A:
                if (&param.mLanding == null)
                {
                    goto Label_00A7;
                }
                vector = self.CalcGridCenter(&param.mLanding);
                controller.SetStartPos(vector);
                controller.get_transform().set_position(vector);
            Label_00A7:
                this.mCasterLists.Add(new Caster(controller));
            Label_00B8:
                num += 1;
            Label_00BC:
                if (num < this.mLog.mLists.Count)
                {
                    goto Label_0049;
                }
                self.RemoveLog();
                this.mDirection = self.Battle.IsSkillDirection;
                if (this.mDirection == null)
                {
                    goto Label_017B;
                }
                vector2 = Vector3.get_zero();
                num2 = GameSettings.Instance.GameCamera_SkillCameraDistance;
                list = new List<Vector3>();
                num3 = 0;
                goto Label_013A;
            Label_0116:
                list.Add(this.mCasterLists[num3].mController.CenterPosition);
                num3 += 1;
            Label_013A:
                if (num3 < this.mCasterLists.Count)
                {
                    goto Label_0116;
                }
                self.GetCameraTargetView(&vector2, &num2, list.ToArray());
                self.mUpdateCameraPosition = 1;
                self.InterpCameraTarget(vector2);
                self.InterpCameraDistance(num2);
                this.mDirectionMode = 0;
            Label_017B:
                return;
            }

            public override void End(SceneBattle self)
            {
                self.RefreshJumpSpots();
                self.mUpdateCameraPosition = 0;
                return;
            }

            public override void Update(SceneBattle self)
            {
                bool flag;
                int num;
                float num2;
                Caster caster;
                TacticsUnitController controller;
                int num3;
                TacticsUnitController controller2;
                eDirectionMode mode;
                if (this.mDirection == null)
                {
                    goto Label_0108;
                }
                switch (this.mDirectionMode)
                {
                    case 0:
                        goto Label_002B;

                    case 1:
                        goto Label_00EC;

                    case 2:
                        goto Label_00F8;
                }
                goto Label_0103;
            Label_002B:
                flag = 1;
                num = 0;
                goto Label_00B9;
            Label_0034:
                num2 = 0.5f + (0.1f * ((float) num));
                caster = this.mCasterLists[num];
                controller = caster.mController;
                if (caster.mPassedTime >= num2)
                {
                    goto Label_00A7;
                }
                caster.mPassedTime += Time.get_deltaTime();
                if (caster.mPassedTime < num2)
                {
                    goto Label_00A0;
                }
                controller.CastJumpFall(this.mLog.mIsPlayDamageMotion);
                controller.ChargeIcon.Close();
            Label_00A0:
                flag = 0;
                goto Label_00B5;
            Label_00A7:
                if (controller.IsFinishedCastJumpFall() != null)
                {
                    goto Label_00B5;
                }
                flag = 0;
            Label_00B5:
                num += 1;
            Label_00B9:
                if (num < this.mCasterLists.Count)
                {
                    goto Label_0034;
                }
                if (flag == null)
                {
                    goto Label_0156;
                }
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                this.mDirectionMode = 1;
                goto Label_0103;
            Label_00EC:
                this.mDirectionMode = 2;
                goto Label_0103;
            Label_00F8:
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_0103:
                goto Label_0156;
            Label_0108:
                num3 = 0;
                goto Label_013E;
            Label_0110:
                controller2 = this.mCasterLists[num3].mController;
                controller2.SetVisible(1);
                controller2.ChargeIcon.Close();
                num3 += 1;
            Label_013E:
                if (num3 < this.mCasterLists.Count)
                {
                    goto Label_0110;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_0156:
                return;
            }

            private class Caster
            {
                public TacticsUnitController mController;
                public float mPassedTime;

                public Caster(TacticsUnitController controller)
                {
                    base..ctor();
                    this.mController = controller;
                    this.mPassedTime = 0f;
                    return;
                }
            }

            private enum eDirectionMode
            {
                FALL,
                CAMERA_WAIT,
                EXIT
            }
        }

        private class State_LoadMapV2 : State<SceneBattle>
        {
            private bool mReady;

            public State_LoadMapV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                goto Label_000A;
            Label_0005:
                TacticsSceneSettings.PopFirstScene();
            Label_000A:
                if (TacticsSceneSettings.SceneCount > 0)
                {
                    goto Label_0005;
                }
                self.IsLoaded = 1;
                self.mUpdateCameraPosition = 1;
                Debug.Log("======= LOAD MAP START (" + ((int) self.Battle.MapIndex) + ")");
                self.BeginLoadMapAsync();
                self.SetUnitUiHeight(self.mBattle.CurrentUnit);
                return;
            }

            public override void Update(SceneBattle self)
            {
                GameManager manager;
                MyPhoton photon;
                int num;
                EventScript.Sequence sequence;
                if (self.IsCameraMoving != null)
                {
                    goto Label_0020;
                }
                if (self.mMapReady == null)
                {
                    goto Label_0020;
                }
                if (ProgressWindow.ShouldKeepVisible == null)
                {
                    goto Label_0021;
                }
            Label_0020:
                return;
            Label_0021:
                if (this.mReady != null)
                {
                    goto Label_0154;
                }
                manager = MonoSingleton<GameManager>.Instance;
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_00BD;
                }
                if (manager.AudienceMode != null)
                {
                    goto Label_00BD;
                }
                if (manager.IsVSCpuBattle == null)
                {
                    goto Label_0069;
                }
                self.Battle.MultiFinishLoad = 1;
                goto Label_00B8;
            Label_0069:
                if (self.Battle.MultiFinishLoad != null)
                {
                    goto Label_00A7;
                }
                photon = PunMonoSingleton<MyPhoton>.Instance;
                self.Battle.MultiFinishLoad = self.SendFinishLoad();
                if (photon.IsConnected() != null)
                {
                    goto Label_00A7;
                }
                self.Battle.MultiFinishLoad = 1;
            Label_00A7:
                if (self.Battle.SyncStart != null)
                {
                    goto Label_010D;
                }
                return;
            Label_00B8:
                goto Label_010D;
            Label_00BD:
                if (manager.AudienceMode == null)
                {
                    goto Label_010D;
                }
                if (self.Battle.MultiFinishLoad != null)
                {
                    goto Label_010D;
                }
                if (self.AudienceSkip == null)
                {
                    goto Label_00EE;
                }
                self.SkipLog();
                goto Label_010C;
            Label_00EE:
                self.AudienceSkip = 1;
                manager.AudienceManager.FinishLoad();
                manager.AudienceManager.SkipMode = 1;
            Label_010C:
                return;
            Label_010D:
                if (self.mTutorialTriggers == null)
                {
                    goto Label_013E;
                }
                num = 0;
                goto Label_0130;
            Label_011F:
                self.mTutorialTriggers[num].OnMapStart();
                num += 1;
            Label_0130:
                if (num < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_011F;
                }
            Label_013E:
                this.mReady = 1;
                GameUtility.SetDefaultSleepSetting();
                GameUtility.FadeOut(1f);
            Label_0154:
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_015F;
                }
                return;
            Label_015F:
                ProgressWindow.SetDestroyDelay(0f);
                ProgressWindow.Close();
                self.StartDownloadNextQuestAsync();
                GlobalEvent.Invoke("BATTLE_MAP_LOADED", null);
                GlobalEvent.Invoke("CLOSE_UNIT_TOOLTIP", null);
                if ((self.mEventScript != null) == null)
                {
                    goto Label_01C5;
                }
                if (((self.mEventSequence = self.mEventScript.OnPostMapLoad()) != null) == null)
                {
                    goto Label_01C5;
                }
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_StartEvent>>();
                goto Label_01D5;
            Label_01C5:
                GameUtility.FadeIn(1f);
                self.GotoState<SceneBattle.State_WaitFade<SceneBattle.State_StartEvent>>();
            Label_01D5:
                return;
            }
        }

        private class State_Map_LoadSkill : State<SceneBattle>
        {
            private float mWaitTime;

            public State_Map_LoadSkill()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mWaitTime = 0.75f;
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                LogSkill skill;
                TacticsUnitController controller;
                if (this.mWaitTime <= 0f)
                {
                    goto Label_0022;
                }
                this.mWaitTime -= Time.get_deltaTime();
            Label_0022:
                if (self.mDesiredCameraTargetSet == null)
                {
                    goto Label_002E;
                }
                return;
            Label_002E:
                if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
                {
                    goto Label_0043;
                }
                return;
            Label_0043:
                num = self.mUnitsInBattle.Count - 1;
                goto Label_0087;
            Label_0056:
                if (self.mUnitsInBattle[num].IsLoading != null)
                {
                    goto Label_0082;
                }
                if (self.mUnitsInBattle[num].isIdle != null)
                {
                    goto Label_0083;
                }
            Label_0082:
                return;
            Label_0083:
                num -= 1;
            Label_0087:
                if (num >= 0)
                {
                    goto Label_0056;
                }
                if (self.mLoadingShieldEffects == null)
                {
                    goto Label_009A;
                }
                return;
            Label_009A:
                if (this.mWaitTime <= 0f)
                {
                    goto Label_00AB;
                }
                return;
            Label_00AB:
                if ((self.mSkillSplash != null) == null)
                {
                    goto Label_00EF;
                }
                if (self.mSkillSplash == null)
                {
                    goto Label_00D7;
                }
                self.mSkillSplash.Close();
            Label_00D7:
                if (self.mWaitSkillSplashClose != null)
                {
                    goto Label_00EE;
                }
                self.mSkillSplash = null;
                goto Label_00EF;
            Label_00EE:
                return;
            Label_00EF:
                if ((self.mSkillSplashCollabo != null) == null)
                {
                    goto Label_0133;
                }
                if (self.mSkillSplashCollabo == null)
                {
                    goto Label_011B;
                }
                self.mSkillSplashCollabo.Close();
            Label_011B:
                if (self.mWaitSkillSplashClose != null)
                {
                    goto Label_0132;
                }
                self.mSkillSplashCollabo = null;
                goto Label_0133;
            Label_0132:
                return;
            Label_0133:
                skill = self.mBattle.Logs.Peek as LogSkill;
                controller = self.FindUnitController(skill.self);
                if ((controller != null) == null)
                {
                    goto Label_0183;
                }
                if (controller.HasPreSkillAnimation == null)
                {
                    goto Label_0183;
                }
                self.mBattleUI.OnCommandSelect();
                self.GotoState<SceneBattle.State_Map_PlayPreSkillAnim>();
                goto Label_0189;
            Label_0183:
                self.GotoState<SceneBattle.State_Map_PlayPreDodge>();
            Label_0189:
                return;
            }
        }

        private class State_Map_LoadSkill_Renkei1 : State<SceneBattle>
        {
            private int mRenkeiUnitIndex;
            private float mInterval;

            public State_Map_LoadSkill_Renkei1()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                Unit unit;
                FadeController.Instance.BeginSceneFade(new Color(0.25f, 0.25f, 0.25f), 0.5f, self.mUnitsInBattle.ToArray(), null);
                unit = self.mBattle.CurrentUnit;
                if (unit == null)
                {
                    goto Label_004C;
                }
                unit.PlayBattleVoice("battle_0015");
            Label_004C:
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                TacticsUnitController controller;
                int num;
                if (this.mInterval <= 0f)
                {
                    goto Label_001C;
                }
                this.mInterval = -Time.get_deltaTime();
            Label_001C:
                if (self.mDesiredCameraTargetSet == null)
                {
                    goto Label_0028;
                }
                return;
            Label_0028:
                if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
                {
                    goto Label_003D;
                }
                return;
            Label_003D:
                if (this.mRenkeiUnitIndex >= self.mBattle.HelperUnits.Count)
                {
                    goto Label_00E4;
                }
                controller = self.FindUnitController(self.mBattle.HelperUnits[this.mRenkeiUnitIndex]);
                if ((controller != null) == null)
                {
                    goto Label_00D5;
                }
                self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                self.InterpCameraTarget(controller);
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
                GameUtility.SpawnParticle(self.mRenkeiAssistEffect, controller.get_transform(), self.get_gameObject());
                this.mInterval = 0.5f;
            Label_00D5:
                this.mRenkeiUnitIndex += 1;
                return;
            Label_00E4:
                num = self.mUnitsInBattle.Count - 1;
                goto Label_0112;
            Label_00F7:
                if (self.mUnitsInBattle[num].IsLoading == null)
                {
                    goto Label_010E;
                }
                return;
            Label_010E:
                num -= 1;
            Label_0112:
                if (num >= 0)
                {
                    goto Label_00F7;
                }
                self.GotoState<SceneBattle.State_Map_LoadSkill_Renkei2>();
                return;
            }
        }

        private class State_Map_LoadSkill_Renkei2 : State<SceneBattle>
        {
            private float mDelay;

            public State_Map_LoadSkill_Renkei2()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_0089;
                }
                self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                self.InterpCameraTarget(controller);
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
                controller.PlayGenkidama();
                GameUtility.SpawnParticle(self.mRenkeiChargeEffect, controller.get_transform(), self.get_gameObject());
                controller.FadeBlendColor(SceneBattle.RenkeiChargeColor, 1f);
                controller.SetLastHitEffect(self.mRenkeiHitEffect);
            Label_0089:
                this.mDelay = 1f;
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                if (this.mDelay <= 0f)
                {
                    goto Label_0023;
                }
                this.mDelay -= Time.get_deltaTime();
                return;
            Label_0023:
                if (self.mDesiredCameraTargetSet == null)
                {
                    goto Label_002F;
                }
                return;
            Label_002F:
                if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
                {
                    goto Label_0044;
                }
                return;
            Label_0044:
                num = self.mUnitsInBattle.Count - 1;
                goto Label_0088;
            Label_0057:
                if (self.mUnitsInBattle[num].IsLoading != null)
                {
                    goto Label_0083;
                }
                if (self.mUnitsInBattle[num].isIdle != null)
                {
                    goto Label_0084;
                }
            Label_0083:
                return;
            Label_0084:
                num -= 1;
            Label_0088:
                if (num >= 0)
                {
                    goto Label_0057;
                }
                if ((self.mSkillSplash != null) == null)
                {
                    goto Label_00C2;
                }
                if (self.mSkillSplash == null)
                {
                    goto Label_00BB;
                }
                self.mSkillSplash.Close();
            Label_00BB:
                self.mSkillSplash = null;
            Label_00C2:
                if ((self.mSkillSplashCollabo != null) == null)
                {
                    goto Label_00F5;
                }
                if (self.mSkillSplashCollabo == null)
                {
                    goto Label_00EE;
                }
                self.mSkillSplashCollabo.Close();
            Label_00EE:
                self.mSkillSplashCollabo = null;
            Label_00F5:
                self.GotoState<SceneBattle.State_Map_PlayPreDodge>();
                return;
            }
        }

        private class State_Map_PlayPreDodge : State<SceneBattle>
        {
            private List<TacticsUnitController> mPollControllers;
            private float mDelay;

            public State_Map_PlayPreDodge()
            {
                this.mPollControllers = new List<TacticsUnitController>();
                this.mDelay = 0.1f;
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                BattleLog log;
                LogSkill skill;
                TacticsUnitController controller;
                int num;
                TacticsUnitController controller2;
                log = self.mBattle.Logs.Peek;
                if ((log as LogSkill) == null)
                {
                    goto Label_00A2;
                }
                skill = log as LogSkill;
                controller = self.FindUnitController(skill.self);
                num = 0;
                goto Label_0091;
            Label_0037:
                if (skill.targets[num].IsAvoid() == null)
                {
                    goto Label_008D;
                }
                controller2 = self.FindUnitController(skill.targets[num].target);
                controller2.AutoUpdateRotation = 0;
                controller2.LookAt(controller.get_transform().get_position());
                this.mPollControllers.Add(controller2);
            Label_008D:
                num += 1;
            Label_0091:
                if (num < skill.targets.Count)
                {
                    goto Label_0037;
                }
            Label_00A2:
                if (this.mPollControllers.Count > 0)
                {
                    goto Label_00B9;
                }
                self.GotoState<SceneBattle.State_Map_PlaySkill>();
            Label_00B9:
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                num = this.mPollControllers.Count - 1;
                goto Label_002E;
            Label_0013:
                if (this.mPollControllers[num].isIdle != null)
                {
                    goto Label_002A;
                }
                return;
            Label_002A:
                num -= 1;
            Label_002E:
                if (num >= 0)
                {
                    goto Label_0013;
                }
                if (this.mDelay <= 0f)
                {
                    goto Label_0058;
                }
                this.mDelay -= Time.get_deltaTime();
                return;
            Label_0058:
                self.GotoState<SceneBattle.State_Map_PlaySkill>();
                return;
            }
        }

        private class State_Map_PlayPreSkillAnim : State<SceneBattle>
        {
            private TacticsUnitController mInstigator;
            private bool mFadeIn;

            public State_Map_PlayPreSkillAnim()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            private IEnumerator AsyncWork()
            {
                <AsyncWork>c__Iterator43 iterator;
                iterator = new <AsyncWork>c__Iterator43();
                iterator.<>f__this = this;
                return iterator;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogSkill skill;
                Vector3 vector;
                Vector3 vector2;
                Vector3 vector3;
                Transform transform;
                Transform transform2;
                skill = self.mBattle.Logs.Peek as LogSkill;
                this.mInstigator = self.FindUnitController(skill.self);
                self.SetScreenMirroring(this.mInstigator.IsSkillMirror());
                self.ToggleBattleScene(1, skill.skill.SkillParam.SceneName);
                self.EnableWeatherEffect(0);
                vector = self.mBattleSceneRoot.PlayerStart2.get_position();
                vector2 = self.mBattleSceneRoot.PlayerStart2.get_position();
                if (this.mInstigator.IsPreSkillParentPosZero == null)
                {
                    goto Label_0091;
                }
                vector = vector2 = Vector3.get_zero();
            Label_0091:
                if (self.mIsInstigatorSubUnit == null)
                {
                    goto Label_00A2;
                }
                vector3 = vector;
                vector = vector2;
                vector2 = vector3;
            Label_00A2:
                transform = this.mInstigator.get_transform();
                transform.set_position(vector);
                transform.set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart1.get_position() - self.mBattleSceneRoot.PlayerStart2.get_position()));
                transform.SetParent(self.mBattleSceneRoot.get_transform(), 0);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_0173;
                }
                self.mCollaboTargetTuc.get_transform().set_position(vector2);
                self.mCollaboTargetTuc.get_transform().set_rotation(Quaternion.LookRotation(self.mBattleSceneRoot.PlayerStart1.get_position() - self.mBattleSceneRoot.PlayerStart2.get_position()));
                self.mCollaboTargetTuc.get_transform().SetParent(self.mBattleSceneRoot.get_transform(), 0);
            Label_0173:
                transform2 = Camera.get_main().get_transform();
                transform2.set_position(&GameSettings.Instance.Quest.BattleCamera.get_position() + self.mBattleSceneRoot.PlayerStart2.get_position());
                transform2.set_rotation(&GameSettings.Instance.Quest.BattleCamera.get_rotation());
                self.mUpdateCameraPosition = 0;
                self.UpdateCameraControl(1);
                self.DisableUserInterface();
                if (self.Battle.IsMultiVersus == null)
                {
                    goto Label_01FA;
                }
                self.HideAllHPGauges();
                self.CloseBattleUI();
            Label_01FA:
                GameUtility.FadeOut(0.2f);
                self.StartCoroutine(this.AsyncWork());
                return;
            }

            [CompilerGenerated]
            private sealed class <AsyncWork>c__Iterator43 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_Map_PlayPreSkillAnim <>f__this;

                public <AsyncWork>c__Iterator43()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0029;

                        case 1:
                            goto Label_0041;

                        case 2:
                            goto Label_00F1;

                        case 3:
                            goto Label_0139;
                    }
                    goto Label_02FE;
                Label_0029:
                    goto Label_0041;
                Label_002E:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_0300;
                Label_0041:
                    if (FadeController.Instance.IsFading(0) != null)
                    {
                        goto Label_002E;
                    }
                    this.<>f__this.mInstigator.PlayPreSkillAnimation(Camera.get_main(), this.<>f__this.self.mBattleSceneRoot.PlayerStart1.get_position());
                    if ((this.<>f__this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_00CF;
                    }
                    this.<>f__this.self.mCollaboTargetTuc.PlayPreSkillAnimation(Camera.get_main(), this.<>f__this.self.mBattleSceneRoot.PlayerStart1.get_position());
                Label_00CF:
                    GameUtility.FadeIn(0.2f);
                    goto Label_00F1;
                Label_00DE:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0300;
                Label_00F1:
                    if (this.<>f__this.mInstigator.isIdle == null)
                    {
                        goto Label_00DE;
                    }
                    if ((this.<>f__this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_0153;
                    }
                    goto Label_0139;
                Label_0126:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_0300;
                Label_0139:
                    if (this.<>f__this.self.mCollaboTargetTuc.isIdle == null)
                    {
                        goto Label_0126;
                    }
                Label_0153:
                    this.<>f__this.mInstigator.get_transform().SetParent(null, 0);
                    if ((this.<>f__this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_01A1;
                    }
                    this.<>f__this.self.mCollaboTargetTuc.get_transform().SetParent(null, 0);
                Label_01A1:
                    this.<>f__this.self.EnableWeatherEffect(1);
                    this.<>f__this.self.ToggleBattleScene(0, null);
                    this.<>f__this.self.mUpdateCameraPosition = 1;
                    this.<>f__this.self.UpdateCameraControl(1);
                    this.<>f__this.self.EnableUserInterface();
                    this.<>f__this.mInstigator.get_transform().SetParent(this.<>f__this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<>f__this.self.ResetUnitPosition(this.<>f__this.mInstigator);
                    if ((this.<>f__this.self.mCollaboTargetTuc != null) == null)
                    {
                        goto Label_02A7;
                    }
                    this.<>f__this.self.mCollaboTargetTuc.get_transform().SetParent(this.<>f__this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<>f__this.self.ResetUnitPosition(this.<>f__this.self.mCollaboTargetTuc);
                Label_02A7:
                    this.<>f__this.self.SetScreenMirroring(0);
                    if (this.<>f__this.self.IsPlayingArenaQuest == null)
                    {
                        goto Label_02E7;
                    }
                    if (this.<>f__this.self.Battle.IsArenaSkip != null)
                    {
                        goto Label_02F7;
                    }
                Label_02E7:
                    this.<>f__this.self.GotoState<SceneBattle.State_Map_PlayPreDodge>();
                Label_02F7:
                    this.$PC = -1;
                Label_02FE:
                    return 0;
                Label_0300:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_Map_PlaySkill : State<SceneBattle>
        {
            private TacticsUnitController mInstigator;
            private List<TacticsUnitController> mTargets;
            private float mEndWait;
            private LogSkill mActionInfo;
            private IntVector2 mCameraStart;

            public State_Map_PlaySkill()
            {
                this.mTargets = new List<TacticsUnitController>();
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                Vector3 vector;
                float num;
                List<Vector3> list;
                LogSkill.Target target;
                List<LogSkill.Target>.Enumerator enumerator;
                TacticsUnitController controller;
                SkillData data;
                SkillParam param;
                List<Vector3> list2;
                GridMap<bool> map;
                int num2;
                int num3;
                SkillEffect effect;
                bool flag;
                GameSettings settings;
                TacticsUnitController[] controllerArray;
                int num4;
                LogSkill.Target target2;
                TacticsUnitController controller2;
                SkillEffect.SFX sfx;
                SkillEffect.SFX[] sfxArray;
                int num5;
                SkillSequence.MapCameraTypes types;
                SkillSequence.MapCameraTypes types2;
                this.mActionInfo = self.mBattle.Logs.Peek as LogSkill;
                this.mInstigator = self.FindUnitController(this.mActionInfo.self);
                if (this.mActionInfo.skill.CastType == 2)
                {
                    goto Label_004F;
                }
                self.mUpdateCameraPosition = 0;
            Label_004F:
                if (((this.mActionInfo.skill.EffectType != 0x12) || (this.mActionInfo.targets.Count <= 0)) || (this.mActionInfo.targets[0] == null))
                {
                    goto Label_00F9;
                }
                &this.mCameraStart.x = this.mActionInfo.targets[0].target.x;
                &this.mCameraStart.y = this.mActionInfo.targets[0].target.y;
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance * 1.5f);
                goto Label_0291;
            Label_00F9:
                switch ((this.mInstigator.GetSkillCameraType() - 1))
                {
                    case 0:
                        goto Label_0128;

                    case 1:
                        goto Label_0179;

                    case 2:
                        goto Label_0195;

                    case 3:
                        goto Label_01B1;

                    case 4:
                        goto Label_01B1;
                }
                goto Label_0291;
            Label_0128:
                &this.mCameraStart.x = this.mActionInfo.self.x;
                &this.mCameraStart.y = this.mActionInfo.self.y;
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance * 1.5f);
                goto Label_0291;
            Label_0179:
                self.mUpdateCameraPosition = 1;
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                goto Label_0291;
            Label_0195:
                self.mUpdateCameraPosition = 1;
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_MoreFarDistance);
                goto Label_0291;
            Label_01B1:
                vector = Vector3.get_zero();
                num = GameSettings.Instance.GameCamera_SkillCameraDistance;
                list = new List<Vector3>();
                types2 = this.mInstigator.GetSkillCameraType();
                if (types2 == 4)
                {
                    goto Label_0200;
                }
                if (types2 == 5)
                {
                    goto Label_01EA;
                }
                goto Label_026E;
            Label_01EA:
                list.Add(this.mInstigator.CenterPosition);
            Label_0200:
                enumerator = this.mActionInfo.targets.GetEnumerator();
            Label_0212:
                try
                {
                    goto Label_024B;
                Label_0217:
                    target = &enumerator.Current;
                    controller = self.FindUnitController(target.target);
                    if (controller != null)
                    {
                        goto Label_023E;
                    }
                    goto Label_024B;
                Label_023E:
                    list.Add(controller.CenterPosition);
                Label_024B:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0217;
                    }
                    goto Label_0269;
                }
                finally
                {
                Label_025C:
                    ((List<LogSkill.Target>.Enumerator) enumerator).Dispose();
                }
            Label_0269:;
            Label_026E:
                self.GetCameraTargetView(&vector, &num, list.ToArray());
                self.InterpCameraTarget(vector);
                self.InterpCameraDistance(num);
            Label_0291:
                data = this.mActionInfo.skill;
                param = data.SkillParam;
                list2 = null;
                if (param.IsAreaSkill() == null)
                {
                    goto Label_0370;
                }
                list2 = new List<Vector3>();
                map = self.mBattle.CreateScopeGridMap(this.mActionInfo.self, this.mActionInfo.self.x, this.mActionInfo.self.y, &this.mActionInfo.pos.x, &this.mActionInfo.pos.y, data);
                num2 = 0;
                goto Label_0362;
            Label_031F:
                num3 = 0;
                goto Label_034E;
            Label_0327:
                if (map.get(num3, num2) == null)
                {
                    goto Label_0348;
                }
                list2.Add(self.CalcGridCenter(num3, num2));
            Label_0348:
                num3 += 1;
            Label_034E:
                if (num3 < map.w)
                {
                    goto Label_0327;
                }
                num2 += 1;
            Label_0362:
                if (num2 < map.h)
                {
                    goto Label_031F;
                }
            Label_0370:
                this.mInstigator.SetArrowTrajectoryHeight(((float) this.mActionInfo.height) / 100f);
                effect = this.mInstigator.LoadedSkillEffect;
                flag = 0;
                settings = GameSettings.Instance;
                if (this.mActionInfo.skill.CastType != 2)
                {
                    goto Label_03E4;
                }
                self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
            Label_03E4:
                this.mInstigator.SetHitInfoSelf(this.mActionInfo.self_effect);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_041B;
                }
                self.mCollaboTargetTuc.SetHitInfoSelf(new LogSkill.Target());
            Label_041B:
                controllerArray = new TacticsUnitController[this.mActionInfo.targets.Count];
                num4 = 0;
                goto Label_0605;
            Label_043A:
                target2 = this.mActionInfo.targets[num4];
                controller2 = self.FindUnitController(this.mActionInfo.targets[num4].target);
                controllerArray[num4] = controller2;
                controller2.ShouldDodgeHits = target2.IsAvoid();
                controller2.ShouldPerfectDodge = target2.IsPerfectAvoid();
                controller2.ShouldDefendHits = target2.IsDefend();
                controller2.SetHitInfo(target2);
                if (controller2.ShouldDodgeHits != null)
                {
                    goto Label_0526;
                }
                controller2.ShowCriticalEffectOnHit = target2.IsCritical();
                controller2.ShowBackstabEffectOnHit = ((target2.hitType & 1) == null) ? 0 : data.IsNormalAttack();
                controller2.ShouldDefendHits = target2.IsDefend();
                if (target2.IsNormalEffectElement() == null)
                {
                    goto Label_0507;
                }
                controller2.ShowElementEffectOnHit = 1;
                goto Label_0521;
            Label_0507:
                controller2.ShowElementEffectOnHit = (target2.IsWeakEffectElement() == null) ? 0 : 2;
            Label_0521:
                goto Label_0546;
            Label_0526:
                controller2.ShowCriticalEffectOnHit = 0;
                controller2.ShowBackstabEffectOnHit = 0;
                controller2.ShouldDefendHits = 0;
                controller2.ShowElementEffectOnHit = 1;
            Label_0546:
                if (target2.gems <= 0)
                {
                    goto Label_05DC;
                }
                if ((target2.hitType & 2) == null)
                {
                    goto Label_0581;
                }
                controller2.DrainGemsOnHit = settings.Gem_DrainCount_SideHit;
                controller2.GemDrainEffects = self.mGemDrainEffect_Side;
                goto Label_05CA;
            Label_0581:
                if ((target2.hitType & 1) == null)
                {
                    goto Label_05AF;
                }
                controller2.DrainGemsOnHit = settings.Gem_DrainCount_BackHit;
                controller2.GemDrainEffects = self.mGemDrainEffect_Back;
                goto Label_05CA;
            Label_05AF:
                controller2.DrainGemsOnHit = settings.Gem_DrainCount_FrontHit;
                controller2.GemDrainEffects = self.mGemDrainEffect_Front;
            Label_05CA:
                controller2.GemDrainHitEffect = self.mGemDrainHitEffect;
                goto Label_05E4;
            Label_05DC:
                controller2.DrainGemsOnHit = 0;
            Label_05E4:
                controller2.KnockBackGrid = target2.KnockBackGrid;
                this.mTargets.Add(controller2);
                num4 += 1;
            Label_0605:
                if (num4 < this.mActionInfo.targets.Count)
                {
                    goto Label_043A;
                }
                sfxArray = effect.ExplosionSounds;
                num5 = 0;
                goto Label_0642;
            Label_062D:
                sfx = sfxArray[num5];
                sfx.IsCritical = 0;
                num5 += 1;
            Label_0642:
                if (num5 < ((int) sfxArray.Length))
                {
                    goto Label_062D;
                }
                if ((this.mActionInfo.skill.IsNormalAttack() == null) || (((int) effect.ExplosionSounds.Length) <= 0))
                {
                    goto Label_0681;
                }
                effect.ExplosionSounds[0].IsCritical = flag;
            Label_0681:
                if (this.mActionInfo.skill.CastType != 2)
                {
                    goto Label_06AD;
                }
                this.mInstigator.SetLandingGrid(this.mActionInfo.landing);
            Label_06AD:
                if (this.mActionInfo.skill.TeleportType == null)
                {
                    goto Label_06D8;
                }
                this.mInstigator.SetTeleportGrid(this.mActionInfo.TeleportGrid);
            Label_06D8:
                this.mInstigator.StartSkill(self.CalcGridCenter(&this.mActionInfo.pos.x, &this.mActionInfo.pos.y), Camera.get_main(), controllerArray, (list2 == null) ? null : list2.ToArray(), data.SkillParam);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_078F;
                }
                self.mCollaboTargetTuc.StartSkill(self.CalcGridCenter(&this.mActionInfo.pos.x, &this.mActionInfo.pos.y), Camera.get_main(), controllerArray, (list2 == null) ? null : list2.ToArray(), data.SkillParam);
            Label_078F:
                if (data.SkillType == 1)
                {
                    goto Label_07A9;
                }
                if (data.SkillType != 4)
                {
                    goto Label_07C6;
                }
            Label_07A9:
                self.ShowSkillNamePlate(this.mActionInfo.self, data, string.Empty, 1f);
            Label_07C6:
                this.mEndWait = &GameSettings.Instance.Quest.BattleTurnEndWait;
                self.RemoveLog();
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                Vector3 vector;
                IntVector2 vector2;
                Vector3 vector3;
                TacticsUnitController controller;
                List<TacticsUnitController>.Enumerator enumerator;
                int num;
                SkillData data;
                Unit unit;
                LogSkill.Target target;
                List<LogSkill.Target>.Enumerator enumerator2;
                TacticsUnitController controller2;
                TacticsUnitController controller3;
                List<TacticsUnitController> list;
                LogSkill.Target target2;
                List<LogSkill.Target>.Enumerator enumerator3;
                TacticsUnitController controller4;
                if (this.mInstigator.isIdle != null)
                {
                    goto Label_00F9;
                }
                if (this.mActionInfo.skill.CastType != 2)
                {
                    goto Label_0059;
                }
                vector = self.CalcGridCenter(&this.mActionInfo.pos.x, &this.mActionInfo.pos.y);
                self.InterpCameraTarget(vector);
                goto Label_00F8;
            Label_0059:
                if (this.mActionInfo.skill.EffectType == 0x12)
                {
                    goto Label_0081;
                }
                if (this.mInstigator.GetSkillCameraType() != 1)
                {
                    goto Label_00F8;
                }
            Label_0081:
                &vector2 = new IntVector2((&this.mActionInfo.pos.x - &this.mCameraStart.x) / 2, (&this.mActionInfo.pos.y - &this.mCameraStart.y) / 2);
                vector3 = self.CalcGridCenter(&this.mCameraStart.x + &vector2.x, &this.mCameraStart.y + &vector2.y);
                self.InterpCameraTarget(vector3);
            Label_00F8:
                return;
            Label_00F9:
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_011B;
                }
                if (self.mCollaboTargetTuc.isIdle != null)
                {
                    goto Label_011B;
                }
                return;
            Label_011B:
                enumerator = this.mTargets.GetEnumerator();
            Label_0128:
                try
                {
                    goto Label_0155;
                Label_012D:
                    controller = &enumerator.Current;
                    if (controller != null)
                    {
                        goto Label_0145;
                    }
                    goto Label_0155;
                Label_0145:
                    if (controller.IsBusy == null)
                    {
                        goto Label_0155;
                    }
                    goto Label_05A8;
                Label_0155:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_012D;
                    }
                    goto Label_0173;
                }
                finally
                {
                Label_0166:
                    ((List<TacticsUnitController>.Enumerator) enumerator).Dispose();
                }
            Label_0173:
                if (this.mEndWait <= 0f)
                {
                    goto Label_0196;
                }
                this.mEndWait -= Time.get_deltaTime();
                return;
            Label_0196:
                if (self.IsHPGaugeChanging == null)
                {
                    goto Label_01A2;
                }
                return;
            Label_01A2:
                self.HideAllHPGauges();
                num = 0;
                goto Label_023B;
            Label_01B0:
                this.mTargets[num].ShouldDodgeHits = 0;
                this.mTargets[num].ShouldPerfectDodge = 0;
                this.mTargets[num].ShouldDefendHits = 0;
                this.mTargets[num].ShowCriticalEffectOnHit = 0;
                this.mTargets[num].ShowBackstabEffectOnHit = 0;
                this.mTargets[num].DrainGemsOnHit = 0;
                this.mTargets[num].ShowElementEffectOnHit = 1;
                num += 1;
            Label_023B:
                if (num < this.mTargets.Count)
                {
                    goto Label_01B0;
                }
                if (this.mActionInfo.IsRenkei() == null)
                {
                    goto Label_0264;
                }
                self.ToggleRenkeiAura(0);
            Label_0264:
                self.RefreshJumpSpots();
                TrickData.AddMarker();
                this.mInstigator.AnimateVessel(0f, 0.5f);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_02AA;
                }
                self.mCollaboTargetTuc.AnimateVessel(0f, 0.5f);
            Label_02AA:
                FadeController.Instance.BeginSceneFade(Color.get_white(), 0.5f, self.mUnitsInBattle.ToArray(), null);
                self.RefreshUnitStatus(this.mInstigator.Unit);
                data = this.mActionInfo.skill;
                if (data.IsCollabo == null)
                {
                    goto Label_0322;
                }
                unit = self.Battle.GetUnitUseCollaboSkill(this.mInstigator.Unit, data);
                if (unit == null)
                {
                    goto Label_0322;
                }
                self.RefreshUnitStatus(unit);
            Label_0322:
                self.mSkillNamePlate.Close();
                self.ResetCameraTarget();
                if (this.mActionInfo.skill.IsTransformSkill() == null)
                {
                    goto Label_03BB;
                }
                self.HideUnitMarkers(this.mInstigator.Unit);
                self.mTacticsUnits.Remove(this.mInstigator);
                Object.Destroy(this.mInstigator.get_gameObject());
                this.mInstigator = null;
                if (this.mTargets.Count == null)
                {
                    goto Label_03A4;
                }
                this.mTargets[0].SetVisible(1);
            Label_03A4:
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
                return;
            Label_03BB:
                if (this.mActionInfo.skill.IsSetBreakObjSkill() == null)
                {
                    goto Label_03F8;
                }
                if (this.mTargets.Count == null)
                {
                    goto Label_03F8;
                }
                this.mTargets[0].SetVisible(1);
                self.OnGimmickUpdate();
            Label_03F8:
                self.mIgnoreShieldEffect.Clear();
                if (this.mActionInfo == null)
                {
                    goto Label_05A2;
                }
                self.mIgnoreShieldEffect.Add(this.mInstigator);
                enumerator2 = this.mActionInfo.targets.GetEnumerator();
            Label_0431:
                try
                {
                    goto Label_0479;
                Label_0436:
                    target = &enumerator2.Current;
                    if (target.isProcShield == null)
                    {
                        goto Label_0450;
                    }
                    goto Label_0479;
                Label_0450:
                    controller2 = self.FindUnitController(target.target);
                    if ((controller2 != null) == null)
                    {
                        goto Label_0479;
                    }
                    self.mIgnoreShieldEffect.Add(controller2);
                Label_0479:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_0436;
                    }
                    goto Label_0497;
                }
                finally
                {
                Label_048A:
                    ((List<LogSkill.Target>.Enumerator) enumerator2).Dispose();
                }
            Label_0497:
                if ((self.mEventScript != null) == null)
                {
                    goto Label_05A2;
                }
                controller3 = self.FindUnitController(this.mActionInfo.self);
                if ((controller3 != null) == null)
                {
                    goto Label_05A2;
                }
                if (this.mActionInfo.targets == null)
                {
                    goto Label_05A2;
                }
                if (this.mActionInfo.targets.Count == null)
                {
                    goto Label_05A2;
                }
                list = new List<TacticsUnitController>();
                enumerator3 = this.mActionInfo.targets.GetEnumerator();
            Label_0506:
                try
                {
                    goto Label_0539;
                Label_050B:
                    target2 = &enumerator3.Current;
                    controller4 = self.FindUnitController(target2.target);
                    if ((controller4 != null) == null)
                    {
                        goto Label_0539;
                    }
                    list.Add(controller4);
                Label_0539:
                    if (&enumerator3.MoveNext() != null)
                    {
                        goto Label_050B;
                    }
                    goto Label_0557;
                }
                finally
                {
                Label_054A:
                    ((List<LogSkill.Target>.Enumerator) enumerator3).Dispose();
                }
            Label_0557:
                if (list.Count == null)
                {
                    goto Label_05A2;
                }
                self.mEventSequence = self.mEventScript.OnUseSkill(1, controller3, this.mActionInfo.skill, list, self.mIsFirstPlay);
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_05A2;
                }
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_SpawnShieldEffects>>();
                return;
            Label_05A2:
                self.GotoState<SceneBattle.State_SpawnShieldEffects>();
            Label_05A8:
                return;
            }
        }

        private class State_Map_PrepareSkill : State<SceneBattle>
        {
            private TacticsUnitController controller;
            private LogSkill log;

            public State_Map_PrepareSkill()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                LogSkill skill;
                SkillParam param;
                int num;
                TacticsUnitController controller;
                string str;
                this.log = self.mBattle.Logs.Peek as LogSkill;
                skill = this.log;
                param = skill.skill.SkillParam;
                this.controller = self.FindUnitController(skill.self);
                self.mUnitsInBattle.Clear();
                self.mUnitsInBattle.Add(this.controller);
                this.controller.AutoUpdateRotation = 0;
                this.controller.LoadSkillSequence(param, 0, 0, skill.skill.IsCollabo, self.mIsInstigatorSubUnit);
                if (string.IsNullOrEmpty(param.effect) != null)
                {
                    goto Label_00AE;
                }
                this.controller.LoadSkillEffect(param.effect, 0);
            Label_00AE:
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_0121;
                }
                self.mCollaboTargetTuc.LoadSkillSequence(param, 0, 0, skill.skill.IsCollabo, self.mIsInstigatorSubUnit == 0);
                if (string.IsNullOrEmpty(param.effect) != null)
                {
                    goto Label_0110;
                }
                self.mCollaboTargetTuc.LoadSkillEffect(param.effect, self.mIsInstigatorSubUnit == 0);
            Label_0110:
                self.mUnitsInBattle.Add(self.mCollaboTargetTuc);
            Label_0121:
                if (0 >= param.hp_cost)
                {
                    goto Label_017B;
                }
                this.controller.SetHpCostSkill(skill.skill.GetHpCost(skill.self));
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_017B;
                }
                self.mCollaboTargetTuc.SetHpCostSkill(skill.skill.GetHpCost(skill.self));
            Label_017B:
                num = 0;
                goto Label_022F;
            Label_0182:
                controller = self.FindUnitController(skill.targets[num].target);
                if (param.IsTransformSkill() == null)
                {
                    goto Label_01C6;
                }
                str = this.controller.GetAnmNameTransformSkill();
                if (string.IsNullOrEmpty(str) != null)
                {
                    goto Label_01C6;
                }
                controller.LoadTransformAnimation(str);
            Label_01C6:
                if (skill.targets[num].IsAvoid() == null)
                {
                    goto Label_01E7;
                }
                controller.LoadDodgeAnimation();
                goto Label_021F;
            Label_01E7:
                if (skill.targets[num].IsCombo() == null)
                {
                    goto Label_0219;
                }
                if (skill.targets[num].IsAvoidJustOne() == null)
                {
                    goto Label_0219;
                }
                controller.LoadDodgeAnimation();
            Label_0219:
                controller.LoadDamageAnimations();
            Label_021F:
                self.mUnitsInBattle.Add(controller);
                num += 1;
            Label_022F:
                if (num < skill.targets.Count)
                {
                    goto Label_0182;
                }
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                LogSkill skill;
                SkillParam param;
                IntVector2 vector;
                GridMap<bool> map;
                bool flag;
                skill = this.log;
                if (string.IsNullOrEmpty(skill.skill.SkillParam.effect) != null)
                {
                    goto Label_0034;
                }
                if (this.controller.IsFinishedLoadSkillEffect() != null)
                {
                    goto Label_0034;
                }
                return;
            Label_0034:
                if (self.Battle.IsUnitAuto(skill.self) != null)
                {
                    goto Label_008A;
                }
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_007A;
                }
                if (self.Battle.CurrentUnit.OwnerPlayerIndex != self.Battle.MyPlayerIndex)
                {
                    goto Label_008A;
                }
            Label_007A:
                if (skill.skill.IsCastSkill() == null)
                {
                    goto Label_0126;
                }
            Label_008A:
                vector = self.CalcCoord(this.controller.CenterPosition);
                map = self.mBattle.CreateScopeGridMap(this.controller.Unit, &vector.x, &vector.y, &skill.pos.x, &skill.pos.y, skill.skill);
                if (map == null)
                {
                    goto Label_0100;
                }
                map.set(&skill.pos.x, &skill.pos.y, 1);
            Label_0100:
                self.mSkillDirectionByKouka = self.GetSkillDirectionByTargetArea(this.controller.Unit, &vector.x, &vector.y, map);
            Label_0126:
                this.controller.SkillTurn(skill, self.mSkillDirectionByKouka);
                if ((self.mCollaboTargetTuc != null) == null)
                {
                    goto Label_015B;
                }
                self.mCollaboTargetTuc.SkillTurn(skill, self.mSkillDirectionByKouka);
            Label_015B:
                self.SetPrioritizedUnits(self.mUnitsInBattle);
                flag = this.log.IsRenkei();
                self.mAllowCameraRotation = 0;
                self.mAllowCameraTranslation = 0;
                if (flag == null)
                {
                    goto Label_01B1;
                }
                if ((this.controller != null) == null)
                {
                    goto Label_01A6;
                }
                this.controller.LoadGenkidamaAnimation(1);
            Label_01A6:
                self.GotoState<SceneBattle.State_Map_LoadSkill_Renkei1>();
                goto Label_01FE;
            Label_01B1:
                if ((this.controller != null) == null)
                {
                    goto Label_01F8;
                }
                self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                self.InterpCameraTarget(this.controller);
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
            Label_01F8:
                self.GotoState<SceneBattle.State_Map_LoadSkill>();
            Label_01FE:
                return;
            }
        }

        private class State_MapCommandAI : State<SceneBattle>
        {
            public State_MapCommandAI()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_0025;
                }
                controller.HideCursor(0);
            Label_0025:
                return;
            }

            public override void Update(SceneBattle self)
            {
                bool flag;
                if (self.IsCameraMoving == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if (self.mBattle.ConditionalUnitEnd(0) == null)
                {
                    goto Label_0024;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_0024:
                flag = (self.Battle.IsMultiPlay == null) ? 0 : (self.Battle.IsUnitAuto(self.Battle.CurrentUnit) == 0);
                self.Battle.UpdateMapAI(flag);
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_MapCommandMultiPlay : State<SceneBattle>
        {
            public State_MapCommandMultiPlay()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                self.ShowAllHPGauges();
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_002B;
                }
                controller.HideCursor(0);
            Label_002B:
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            private unsafe void SyncCameraPosition(SceneBattle self)
            {
                TacticsUnitController controller;
                GameSettings settings;
                Transform transform;
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller == null) == null)
                {
                    goto Label_001F;
                }
                return;
            Label_001F:
                settings = GameSettings.Instance;
                transform = Camera.get_main().get_transform();
                transform.set_position(controller.get_transform().get_position() + &settings.Quest.MoveCamera.get_transform().get_position());
                transform.set_rotation(&settings.Quest.MoveCamera.get_transform().get_rotation());
                self.SetCameraTarget(controller.get_transform());
                self.mUpdateCameraPosition = 1;
                return;
            }

            public override void Update(SceneBattle self)
            {
                this.SyncCameraPosition(self);
                if (self.mBattle.ConditionalUnitEnd(1) == null)
                {
                    goto Label_001F;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_001F:
                return;
            }
        }

        private class State_MapCommandV2 : State<SceneBattle>
        {
            private Unit mQueuedTarget;
            private UnitCommands.CommandTypes mQueuedCommand;
            private object mSelectedAbility;
            private bool mShouldRefreshCommands;
            private bool mMoved;
            private int mStartX;
            private int mStartY;
            private Unit mCurrentUnit;
            private int mHotTargets;
            private TacticsUnitController mCurrentController;

            public State_MapCommandV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mCurrentUnit = self.mBattle.CurrentUnit;
                this.mStartX = this.mCurrentUnit.x;
                this.mStartY = this.mCurrentUnit.y;
                self.InterpCameraTarget(self.FindUnitController(this.mCurrentUnit));
                self.mTouchController.IgnoreCurrentTouch();
                this.mCurrentController = self.FindUnitController(this.mCurrentUnit);
                this.mCurrentController.ResetHPGauge();
                if ((self.mBattleUI.CommandWindow != null) == null)
                {
                    goto Label_00BB;
                }
                self.mBattleUI.CommandWindow.OnCommandSelect = new UnitCommands.CommandEvent(this.OnCommandSelect);
                self.mBattleUI.CommandWindow.OnUnitChgSelect = new UnitCommands.UnitChgEvent(this.OnUnitChgSelect);
            Label_00BB:
                self.m_AllowCameraRotation = 1;
                self.m_AllowCameraTranslation = 0;
                self.ShowAllHPGauges();
                if (this.mCurrentUnit.IsUnitFlag(2) != null)
                {
                    goto Label_00ED;
                }
                self.ShowWalkableGrids(self.CreateCurrentAccessMap(), 0);
            Label_00ED:
                if (self.mBattle.CurrentUnit.IsUnitFlag(2) != null)
                {
                    goto Label_013C;
                }
                self.mMoveInput = new SceneBattle.VirtualStickInput();
                self.mMoveInput.SceneOwner = self;
                self.mMoveInput.OnAttackTargetSelect = new SceneBattle.MoveInput.TargetSelectEvent(this.OnTargetSelect);
                self.mMoveInput.Start();
            Label_013C:
                return;
            }

            private void CanNotMove()
            {
                UIUtility.NegativeSystemMessage(null, LocalizedText.Get("sys.MOVE_BLOCKED"), null, null, 0, -1);
                return;
            }

            public override void End(SceneBattle self)
            {
                if (self.mMoveInput == null)
                {
                    goto Label_001D;
                }
                self.mMoveInput.End();
                self.mMoveInput = null;
            Label_001D:
                self.m_AllowCameraRotation = 0;
                self.m_AllowCameraTranslation = 0;
                if ((self.mBattleUI.CommandWindow != null) == null)
                {
                    goto Label_0052;
                }
                self.mBattleUI.CommandWindow.OnCommandSelect = null;
            Label_0052:
                return;
            }

            private void OnCommandSelect(UnitCommands.CommandTypes command, object ability)
            {
                if (this.mQueuedTarget == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if (this.IsInputBusy == null)
                {
                    goto Label_0026;
                }
                this.mQueuedCommand = command;
                this.mSelectedAbility = ability;
                return;
            Label_0026:
                if (this.IsGridValid != null)
                {
                    goto Label_0038;
                }
                this.CanNotMove();
                return;
            Label_0038:
                this.SelectCommand(command, ability);
                return;
            }

            private void OnTargetSelect(Unit target)
            {
                if (this.mQueuedTarget != null)
                {
                    goto Label_0016;
                }
                if (this.mQueuedCommand == null)
                {
                    goto Label_0017;
                }
            Label_0016:
                return;
            Label_0017:
                if (this.IsInputBusy == null)
                {
                    goto Label_002A;
                }
                this.mQueuedTarget = target;
                return;
            Label_002A:
                if (this.IsGridValid != null)
                {
                    goto Label_003C;
                }
                this.CanNotMove();
                return;
            Label_003C:
                this.SelectAttackTarget(target);
                return;
            }

            private void OnUnitChgSelect()
            {
                base.self.ReflectUnitChgButton(base.self.mBattle.CurrentUnit, 1);
                if (base.self.mBattleUI.CommandWindow.IsEnableUnitChgButton == null)
                {
                    goto Label_0050;
                }
                if (base.self.mBattleUI.CommandWindow.IsActiveUnitChgButton != null)
                {
                    goto Label_0051;
                }
            Label_0050:
                return;
            Label_0051:
                base.self.mBattleUI.OnCommandSelect();
                base.self.GotoUnitChgSelect(0);
                return;
            }

            private unsafe void SelectAttackTarget(Unit target)
            {
                Unit unit;
                SkillData data;
                TacticsUnitController controller;
                IntVector2 vector;
                GridMap<bool> map;
                unit = base.self.mBattle.CurrentUnit;
                data = unit.GetAttackSkill();
                controller = base.self.FindUnitController(unit);
                vector = base.self.CalcCoord(controller.CenterPosition);
                controller.Unit.RefleshMomentBuff(base.self.mBattle.Units, 1, &vector.x, &vector.y);
                map = base.self.mBattle.CreateSelectGridMap(unit, &vector.x, &vector.y, data);
                if (map.isValid(target.x, target.y) == null)
                {
                    goto Label_00FB;
                }
                if (map.get(target.x, target.y) == null)
                {
                    goto Label_00FB;
                }
                if (base.self.mBattle.CheckSkillTarget(unit, target, data) == null)
                {
                    goto Label_00FB;
                }
                base.self.GotoSelectTarget(data, new SceneBattle.SelectTargetCallback(base.self.GotoMapCommand), new SceneBattle.SelectTargetPositionWithSkill(base.self.OnSelectAttackTarget), target, 1);
            Label_00FB:
                return;
            }

            private unsafe void SelectCommand(UnitCommands.CommandTypes command, object ability)
            {
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                Grid grid;
                UnitCommands.CommandTypes types;
                if (base.self.Battle.IsMultiPlay == null)
                {
                    goto Label_005C;
                }
                types = command;
                switch ((types - 2))
                {
                    case 0:
                        goto Label_003A;

                    case 1:
                        goto Label_003A;

                    case 2:
                        goto Label_005C;

                    case 3:
                        goto Label_005C;

                    case 4:
                        goto Label_004B;
                }
                goto Label_005C;
            Label_003A:
                base.self.ExtentionMultiInputTime(0);
                goto Label_005C;
            Label_004B:
                base.self.ExtentionMultiInputTime(1);
            Label_005C:
                unit = base.self.mBattle.CurrentUnit;
                controller = base.self.FindUnitController(unit);
                vector = base.self.CalcCoord(controller.CenterPosition);
                unit.RefleshMomentBuff(base.self.mBattle.Units, 1, &vector.x, &vector.y);
                if (command != 5)
                {
                    goto Label_00F5;
                }
                grid = base.self.mBattle.CurrentMap[&vector.x, &vector.y];
                if (base.self.mBattle.CheckGridEventTrigger(unit, grid, 3) != null)
                {
                    goto Label_00F5;
                }
                return;
            Label_00F5:
                base.self.mBattleUI.OnCommandSelect();
                types = command;
                switch ((types - 1))
                {
                    case 0:
                        goto Label_0132;

                    case 1:
                        goto Label_0142;

                    case 2:
                        goto Label_0152;

                    case 3:
                        goto Label_0173;

                    case 4:
                        goto Label_0183;

                    case 5:
                        goto Label_0193;

                    case 6:
                        goto Label_01A3;
                }
                goto Label_01CE;
            Label_0132:
                base.self.GotoInputMovement();
                goto Label_01CE;
            Label_0142:
                base.self.GotoSelectAttackTarget();
                goto Label_01CE;
            Label_0152:
                base.self.UIParam_CurrentAbility = (AbilityData) ability;
                base.self.GotoSkillSelect();
                goto Label_01CE;
            Label_0173:
                base.self.GotoItemSelect();
                goto Label_01CE;
            Label_0183:
                base.self.GotoState_WaitSignal<SceneBattle.State_SelectGridEventV2>();
                goto Label_01CE;
            Label_0193:
                base.self.GotoMapViewMode();
                goto Label_01CE;
            Label_01A3:
                base.self.HideGrid();
                base.self.mBattleUI.OnInputDirectionStart();
                base.self.GotoState_WaitSignal<SceneBattle.State_InputDirection>();
            Label_01CE:
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                IntVector2 vector;
                TacticsUnitController controller;
                int num;
                TacticsUnitController controller2;
                int num2;
                TacticsUnitController controller3;
                if (self.mMoveInput == null)
                {
                    goto Label_018C;
                }
                self.mMoveInput.Update();
                self.ReflectUnitChgButton(self.mBattle.CurrentUnit, 1);
                vector = self.CalcCoord(this.mCurrentController.CenterPosition);
                if (this.mMoved != null)
                {
                    goto Label_00E7;
                }
                if (&vector.x != this.mStartX)
                {
                    goto Label_0069;
                }
                if (&vector.y == this.mStartY)
                {
                    goto Label_00E7;
                }
            Label_0069:
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_00C9;
                }
                if (self.mTutorialTriggers == null)
                {
                    goto Label_00C9;
                }
                num = 0;
                goto Label_00BB;
            Label_0099:
                self.mTutorialTriggers[num].OnUnitMoveStart(this.mCurrentUnit, controller.Unit.TurnCount);
                num += 1;
            Label_00BB:
                if (num < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_0099;
                }
            Label_00C9:
                this.mMoved = 1;
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_00E7;
                }
                self.ExtentionMultiInputTime(1);
            Label_00E7:
                if (self.mNumHotTargets == this.mHotTargets)
                {
                    goto Label_0186;
                }
                controller2 = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller2 != null) == null)
                {
                    goto Label_017A;
                }
                if (self.mTutorialTriggers == null)
                {
                    goto Label_017A;
                }
                if (self.mNumHotTargets <= 0)
                {
                    goto Label_017A;
                }
                num2 = 0;
                goto Label_016B;
            Label_0135:
                self.mTutorialTriggers[num2].OnHotTargetsChange(this.mCurrentUnit, self.mHotTargets[0].Unit, controller2.Unit.TurnCount);
                num2 += 1;
            Label_016B:
                if (num2 < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_0135;
                }
            Label_017A:
                this.mHotTargets = self.mNumHotTargets;
            Label_0186:
                self.OnGimmickUpdate();
            Label_018C:
                if (this.IsInputBusy != null)
                {
                    goto Label_02C8;
                }
                if (self.IsPause() != null)
                {
                    goto Label_023B;
                }
                self.Battle.IsAutoBattle = self.Battle.RequestAutoBattle;
                if (self.Battle.IsAutoBattle == null)
                {
                    goto Label_023B;
                }
                controller3 = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller3 != null) == null)
                {
                    goto Label_0222;
                }
                controller3.get_transform().set_position(self.CalcGridCenter(self.mBattle.CurrentUnit.x, self.mBattle.CurrentUnit.y));
                self.InterpCameraTarget(controller3);
            Label_0222:
                self.HideAllHPGauges();
                self.HideAllUnitOwnerIndex();
                self.CloseBattleUI();
                self.GotoState_WaitSignal<SceneBattle.State_MapCommandAI>();
                return;
            Label_023B:
                if (this.mShouldRefreshCommands == null)
                {
                    goto Label_0253;
                }
                this.mShouldRefreshCommands = 0;
                self.RefreshMapCommands();
            Label_0253:
                if (this.mQueuedTarget == null)
                {
                    goto Label_0288;
                }
                if (this.IsGridValid != null)
                {
                    goto Label_0274;
                }
                this.CanNotMove();
                goto Label_0280;
            Label_0274:
                this.SelectAttackTarget(this.mQueuedTarget);
            Label_0280:
                this.mQueuedTarget = null;
                return;
            Label_0288:
                if (this.mQueuedCommand == null)
                {
                    goto Label_02CF;
                }
                if (this.IsGridValid != null)
                {
                    goto Label_02A9;
                }
                this.CanNotMove();
                goto Label_02BB;
            Label_02A9:
                this.SelectCommand(this.mQueuedCommand, this.mSelectedAbility);
            Label_02BB:
                this.mQueuedCommand = 0;
                return;
                goto Label_02CF;
            Label_02C8:
                this.mShouldRefreshCommands = 1;
            Label_02CF:
                return;
            }

            private bool IsInputBusy
            {
                get
                {
                    return ((base.self.mMoveInput == null) ? 0 : base.self.mMoveInput.IsBusy);
                }
            }

            private bool IsGridValid
            {
                get
                {
                    return base.self.ApplyUnitMovement(1);
                }
            }
        }

        private class State_MapCommandVersus : State<SceneBattle>
        {
            public State_MapCommandVersus()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                if ((self.mBattleUI.CommandWindow != null) == null)
                {
                    goto Label_0032;
                }
                self.mBattleUI.CommandWindow.OnCommandSelect = new UnitCommands.CommandEvent(this.OnCommandSelect);
            Label_0032:
                self.ShowAllHPGauges();
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_005D;
                }
                controller.HideCursor(0);
            Label_005D:
                if ((self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_0083;
                }
                self.mBattleUI.TargetMain.Close();
            Label_0083:
                if ((self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_00A9;
                }
                self.mBattleUI.TargetSub.Close();
            Label_00A9:
                if ((self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_00CF;
                }
                self.mBattleUI.TargetObjectSub.Close();
            Label_00CF:
                if ((self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_00F5;
                }
                self.mBattleUI.TargetTrickSub.Close();
            Label_00F5:
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.VersusMapView = 0;
                if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
                {
                    goto Label_0122;
                }
                self.AudiencePause = 0;
            Label_0122:
                return;
            }

            public override void End(SceneBattle self)
            {
                if ((self.mBattleUI.CommandWindow != null) == null)
                {
                    goto Label_0027;
                }
                self.mBattleUI.CommandWindow.OnCommandSelect = null;
            Label_0027:
                return;
            }

            private void OnCommandSelect(UnitCommands.CommandTypes command, object ability)
            {
                UnitCommands.CommandTypes types;
                base.self.mBattleUI.OnCommandSelect();
                types = command;
                if (types == 6)
                {
                    goto Label_001E;
                }
                goto Label_0055;
            Label_001E:
                base.self.VersusMapView = 1;
                base.self.GotoMapViewMode();
                if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
                {
                    goto Label_0055;
                }
                base.self.AudiencePause = 1;
            Label_0055:
                return;
            }

            private unsafe void SyncCameraPosition(SceneBattle self)
            {
                TacticsUnitController controller;
                GameSettings settings;
                Transform transform;
                Vector3 vector;
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller == null) == null)
                {
                    goto Label_001F;
                }
                return;
            Label_001F:
                settings = GameSettings.Instance;
                transform = Camera.get_main().get_transform();
                transform.set_position(controller.get_transform().get_position() + &settings.Quest.MoveCamera.get_transform().get_position());
                transform.set_rotation(&settings.Quest.MoveCamera.get_transform().get_rotation());
                vector = controller.get_transform().get_position();
                self.SetCameraTarget(&vector.x, &vector.z);
                self.mUpdateCameraPosition = 1;
                return;
            }

            public override void Update(SceneBattle self)
            {
                this.SyncCameraPosition(self);
                if (self.mBattle.ConditionalUnitEnd(1) == null)
                {
                    goto Label_001F;
                }
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_001F:
                return;
            }
        }

        private class State_MapDead : State<SceneBattle>
        {
            private List<DirectionBase> mList;

            public State_MapDead()
            {
                this.mList = new List<DirectionBase>();
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogDead dead;
                List<Vector3> list;
                int num;
                LogDead.Param param;
                TacticsUnitController controller;
                Dead.Normal normal;
                Camera.Normal normal2;
                int num2;
                LogDead.Param param2;
                TacticsUnitController controller2;
                Dead.CameraForcus forcus;
                dead = (LogDead) self.mBattle.Logs.Peek;
                list = new List<Vector3>();
                num = 0;
                goto Label_0085;
            Label_0023:
                param = dead.list_normal[num];
                controller = self.FindUnitController(&param.self);
                if ((controller != null) == null)
                {
                    goto Label_0081;
                }
                normal = new Dead.Normal(self, this);
                normal.Initialize(10, controller, &param.type);
                this.mList.Add(normal);
                list.Add(controller.CenterPosition);
            Label_0081:
                num += 1;
            Label_0085:
                if (num < dead.list_normal.Count)
                {
                    goto Label_0023;
                }
                if (list.Count <= 0)
                {
                    goto Label_00C6;
                }
                normal2 = new Camera.Normal(self, this);
                normal2.Initialize(0, list.ToArray());
                this.mList.Add(normal2);
            Label_00C6:
                num2 = 0;
                goto Label_012A;
            Label_00CE:
                param2 = dead.list_sentence[num2];
                controller2 = self.FindUnitController(&param2.self);
                if ((controller2 != null) == null)
                {
                    goto Label_0124;
                }
                forcus = new Dead.CameraForcus(self, this);
                forcus.Initialize(100 + num2, controller2, &param2.type);
                this.mList.Add(forcus);
            Label_0124:
                num2 += 1;
            Label_012A:
                if (num2 < dead.list_sentence.Count)
                {
                    goto Label_00CE;
                }
                self.RemoveLog();
                return;
            }

            public override void End(SceneBattle self)
            {
                int num;
                num = 0;
                goto Label_001C;
            Label_0007:
                this.mList[num].Release();
                num += 1;
            Label_001C:
                if (num < this.mList.Count)
                {
                    goto Label_0007;
                }
                this.mList.Clear();
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                DirectionBase base2;
                num = 0;
                goto Label_0039;
            Label_0007:
                base2 = this.mList[num];
                if (base2.Update() != null)
                {
                    goto Label_0035;
                }
                base2.Release();
                this.mList.RemoveAt(num);
                num -= 1;
            Label_0035:
                num += 1;
            Label_0039:
                if (num < this.mList.Count)
                {
                    goto Label_0007;
                }
                if (this.mList.Count != null)
                {
                    goto Label_007C;
                }
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.OnGimmickUpdate();
                self.RefreshJumpSpots();
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
            Label_007C:
                return;
            }

            public List<DirectionBase> list
            {
                get
                {
                    return this.mList;
                }
            }

            public class Camera : SceneBattle.State_MapDead.DirectionBase
            {
                protected Vector3 m_Center;
                protected float m_Distance;

                public Camera(SceneBattle self, SceneBattle.State_MapDead state)
                {
                    base..ctor(self, state);
                    return;
                }

                public unsafe void Initialize(int priority, Vector3[] targets)
                {
                    base.Initialize(priority);
                    base.scene.GetCameraTargetView(&this.m_Center, &this.m_Distance, targets);
                    return;
                }

                protected override void OnBegin()
                {
                    base.scene.InterpCameraDistance(this.m_Distance);
                    base.scene.InterpCameraTarget(this.m_Center);
                    return;
                }

                protected override unsafe bool OnMain()
                {
                    Vector3 vector;
                    vector = base.scene.mCameraTarget - this.m_Center;
                    &vector.y = 0f;
                    float introduced1 = &vector.get_magnitude();
                    if ((introduced1 * &vector.get_magnitude()) >= 0.25f)
                    {
                        goto Label_003E;
                    }
                    return 0;
                Label_003E:
                    return 1;
                }

                public class Normal : SceneBattle.State_MapDead.Camera
                {
                    public Normal(SceneBattle self, SceneBattle.State_MapDead state)
                    {
                        base..ctor(self, state);
                        return;
                    }
                }
            }

            public class Dead : SceneBattle.State_MapDead.DirectionBase
            {
                protected TacticsUnitController mController;
                protected Unit mUnit;
                protected DeadTypes mDeadType;

                public Dead(SceneBattle self, SceneBattle.State_MapDead state)
                {
                    base..ctor(self, state);
                    return;
                }

                public void Initialize(int priority, TacticsUnitController controller, DeadTypes deadType)
                {
                    SceneBattle.State_MapDead.TreasureDrop.Normal normal;
                    base.Initialize(priority);
                    this.mController = controller;
                    this.mUnit = controller.Unit;
                    this.mDeadType = deadType;
                    if ((this.mController != null) == null)
                    {
                        goto Label_00E7;
                    }
                    this.mController.ReflectDispModel();
                    this.mController.LoadDeathAnimation(1);
                    if (this.mUnit == null)
                    {
                        goto Label_00E7;
                    }
                    if (this.mUnit.Drop == null)
                    {
                        goto Label_00E7;
                    }
                    if (this.mUnit.Side == 1)
                    {
                        goto Label_0085;
                    }
                    if (this.mUnit.IsBreakObj == null)
                    {
                        goto Label_00E7;
                    }
                Label_0085:
                    if (this.mUnit.Drop.IsEnableDrop() == null)
                    {
                        goto Label_00E7;
                    }
                    normal = new SceneBattle.State_MapDead.TreasureDrop.Normal(base.scene, base.state);
                    normal.Initialize(base.GetPriority() + 1, this.mUnit, this.mUnit.Drop, controller.get_transform().get_position());
                    base.state.list.Add(normal);
                Label_00E7:
                    return;
                }

                protected override void OnBegin()
                {
                    this.mController.PlayDead(1);
                    base.scene.OnUnitDeath(this.mController.Unit);
                    base.scene.mTacticsUnits.Remove(this.mController);
                    this.mController.ShowHPGauge(0);
                    this.mController.ShowVersusCursor(0);
                    return;
                }

                protected override bool OnLoading()
                {
                    if (this.mController.IsLoading == null)
                    {
                        goto Label_0012;
                    }
                    return 1;
                Label_0012:
                    return 0;
                }

                protected override bool OnMain()
                {
                    if ((this.mController == null) == null)
                    {
                        goto Label_0013;
                    }
                    return 0;
                Label_0013:
                    return 1;
                }

                public TacticsUnitController controller
                {
                    get
                    {
                        return this.mController;
                    }
                }

                public Unit unit
                {
                    get
                    {
                        return this.mUnit;
                    }
                }

                public DeadTypes deadType
                {
                    get
                    {
                        return this.mDeadType;
                    }
                }

                public class CameraForcus : SceneBattle.State_MapDead.Dead
                {
                    public CameraForcus(SceneBattle self, SceneBattle.State_MapDead state)
                    {
                        base..ctor(self, state);
                        return;
                    }

                    protected override unsafe bool OnLoading()
                    {
                        Vector3 vector;
                        int num;
                        if (base.OnLoading() == null)
                        {
                            goto Label_000D;
                        }
                        return 1;
                    Label_000D:
                        num = base.GetProcCount();
                        if (num == null)
                        {
                            goto Label_0026;
                        }
                        if (num == 1)
                        {
                            goto Label_0088;
                        }
                        goto Label_009F;
                    Label_0026:
                        vector = base.scene.mCameraTarget - base.mController.get_transform().get_position();
                        &vector.y = 0f;
                        float introduced2 = &vector.get_magnitude();
                        if ((introduced2 * &vector.get_magnitude()) >= 0.25f)
                        {
                            goto Label_009F;
                        }
                        base.mController.DeathSentenceCountDown(1, 1f);
                        base.IncProcCount();
                        goto Label_009F;
                    Label_0088:
                        if (base.mController.IsDeathSentenceCountDownPlaying() == null)
                        {
                            goto Label_009F;
                        }
                        return 1;
                    Label_009F:
                        return 0;
                    }

                    protected override void OnPrepare()
                    {
                        base.scene.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                        base.scene.InterpCameraTarget(base.mController);
                        return;
                    }
                }

                public class Normal : SceneBattle.State_MapDead.Dead
                {
                    public Normal(SceneBattle self, SceneBattle.State_MapDead state)
                    {
                        base..ctor(self, state);
                        return;
                    }
                }
            }

            public class DirectionBase
            {
                private SceneBattle mSceneBattle;
                private SceneBattle.State_MapDead mState;
                private int mPriority;
                private bool mDeleteFlag;
                private Proc mProc;
                private int mProcCount;

                public DirectionBase(SceneBattle self, SceneBattle.State_MapDead state)
                {
                    base..ctor();
                    this.mSceneBattle = self;
                    this.mState = state;
                    this.SetProc(0);
                    return;
                }

                protected void DecProcCount()
                {
                    this.mProcCount -= 1;
                    return;
                }

                public void Delete()
                {
                    this.mDeleteFlag = 1;
                    return;
                }

                public int GetPriority()
                {
                    return this.mPriority;
                }

                protected Proc GetProc()
                {
                    return this.mProc;
                }

                protected int GetProcCount()
                {
                    return this.mProcCount;
                }

                protected void IncProcCount()
                {
                    this.mProcCount += 1;
                    return;
                }

                public virtual void Initialize(int priority)
                {
                    this.mPriority = priority;
                    return;
                }

                protected virtual void OnBegin()
                {
                }

                protected virtual void OnEnd()
                {
                }

                protected virtual bool OnLoading()
                {
                    return 0;
                }

                protected virtual bool OnMain()
                {
                    return 0;
                }

                protected virtual void OnPrepare()
                {
                }

                public virtual void Release()
                {
                }

                public void SetPriority(int pri)
                {
                    this.mPriority = pri;
                    return;
                }

                protected void SetProc(Proc proc)
                {
                    this.mProc = proc;
                    this.mProcCount = 0;
                    return;
                }

                protected void SetProcCount(int value)
                {
                    this.mProcCount = value;
                    return;
                }

                public bool Update()
                {
                    List<SceneBattle.State_MapDead.DirectionBase> list;
                    int num;
                    Proc proc;
                    if (this.GetPriority() < 0)
                    {
                        goto Label_0048;
                    }
                    list = this.mState.list;
                    num = 0;
                    goto Label_003C;
                Label_001F:
                    if (list[num].GetPriority() >= this.GetPriority())
                    {
                        goto Label_0038;
                    }
                    return 1;
                Label_0038:
                    num += 1;
                Label_003C:
                    if (num < list.Count)
                    {
                        goto Label_001F;
                    }
                Label_0048:
                    switch (this.mProc)
                    {
                        case 0:
                            goto Label_0066;

                        case 1:
                            goto Label_0078;

                        case 2:
                            goto Label_009A;
                    }
                    goto Label_00B0;
                Label_0066:
                    this.OnPrepare();
                    this.SetProc(1);
                    goto Label_00B0;
                Label_0078:
                    if (this.OnLoading() == null)
                    {
                        goto Label_0088;
                    }
                    goto Label_00B0;
                Label_0088:
                    this.OnBegin();
                    this.SetProc(2);
                    goto Label_00B0;
                Label_009A:
                    if (this.OnMain() != null)
                    {
                        goto Label_00B0;
                    }
                    this.Delete();
                Label_00B0:
                    if (this.mDeleteFlag == null)
                    {
                        goto Label_00C8;
                    }
                    this.SetProc(3);
                    this.OnEnd();
                Label_00C8:
                    return (this.mDeleteFlag == 0);
                }

                public SceneBattle scene
                {
                    get
                    {
                        return this.mSceneBattle;
                    }
                }

                public SceneBattle.State_MapDead state
                {
                    get
                    {
                        return this.mState;
                    }
                }

                protected enum Proc
                {
                    PREPARE,
                    BEGIN,
                    MAIN,
                    END
                }
            }

            public class TreasureDrop : SceneBattle.State_MapDead.DirectionBase
            {
                protected Unit m_Owner;
                protected Unit.UnitDrop m_Drop;
                protected TreasureBox m_TreasureBox;

                public TreasureDrop(SceneBattle self, SceneBattle.State_MapDead state)
                {
                    base..ctor(self, state);
                    return;
                }

                public void Initialize(int priority, Unit owner, Unit.UnitDrop drop, Vector3 pos)
                {
                    base.Initialize(priority);
                    this.m_Owner = owner;
                    if (this.m_Owner == null)
                    {
                        goto Label_0024;
                    }
                    this.m_Owner.BeginDropDirection();
                Label_0024:
                    this.m_Drop = drop;
                    this.m_TreasureBox = Object.Instantiate<TreasureBox>(base.scene.mTreasureBoxTemplate);
                    this.m_TreasureBox.owner = owner;
                    this.m_TreasureBox.get_transform().set_parent(base.scene.get_transform());
                    this.m_TreasureBox.get_transform().set_position(pos);
                    this.m_TreasureBox.get_gameObject().SetActive(0);
                    return;
                }

                protected override void OnBegin()
                {
                    Unit.DropItem item;
                    int num;
                    item = null;
                    num = this.m_Drop.items.Count - 1;
                    goto Label_0055;
                Label_001A:
                    if (Unit.DropItem.IsNullOrEmpty(this.m_Drop.items[num]) == null)
                    {
                        goto Label_003A;
                    }
                    goto Label_0051;
                Label_003A:
                    item = this.m_Drop.items[num];
                    goto Label_005C;
                Label_0051:
                    num -= 1;
                Label_0055:
                    if (num >= 0)
                    {
                        goto Label_001A;
                    }
                Label_005C:
                    SceneBattle.Instance.AddTreasureCount(1);
                    this.m_TreasureBox.Open(item, base.scene.mTreasureDropTemplate, this.m_Drop.gold, base.scene.mTreasureGoldTemplate);
                    return;
                }

                protected override bool OnMain()
                {
                    if ((this.m_TreasureBox != null) == null)
                    {
                        goto Label_0039;
                    }
                    if (this.m_TreasureBox.get_gameObject().get_activeInHierarchy() != null)
                    {
                        goto Label_0037;
                    }
                    this.m_TreasureBox.get_gameObject().SetActive(1);
                Label_0037:
                    return 1;
                Label_0039:
                    return 0;
                }

                public class Normal : SceneBattle.State_MapDead.TreasureDrop
                {
                    public Normal(SceneBattle self, SceneBattle.State_MapDead state)
                    {
                        base..ctor(self, state);
                        return;
                    }
                }
            }
        }

        private class State_MapEndV2 : State<SceneBattle>
        {
            public State_MapEndV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                int num;
                BattleCore.QuestResult result;
                BattleCore.QuestResult result2;
                self.SendCheckMultiPlay();
                self.RemoveLog();
                if (self.mTutorialTriggers == null)
                {
                    goto Label_003E;
                }
                num = 0;
                goto Label_0030;
            Label_001F:
                self.mTutorialTriggers[num].OnMapEnd();
                num += 1;
            Label_0030:
                if (num < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_001F;
                }
            Label_003E:
                switch ((self.Battle.GetQuestResult() - 1))
                {
                    case 0:
                        goto Label_0065;

                    case 1:
                        goto Label_00A1;

                    case 2:
                        goto Label_00A1;
                }
                goto Label_00A1;
            Label_0065:
                if (self.Battle.CheckNextMap() == null)
                {
                    goto Label_0096;
                }
                self.mTacticsUnits.Clear();
                self.Battle.IncrementMap();
                self.GotoMapStart();
                goto Label_009C;
            Label_0096:
                self.TriggerWinEvent();
            Label_009C:
                goto Label_00AC;
            Label_00A1:
                self.TriggerWinEvent();
            Label_00AC:
                return;
            }
        }

        private class State_MapMoveSelect_Stick : State<SceneBattle>
        {
            private const float STOP_RADIUS = 0.1f;
            private SceneBattle mScene;
            private TacticsUnitController mController;
            private Vector3 mTapStart;
            private float mPressTime;
            private bool mTapped;
            private GridMap<int> mAccessMap;
            private GridMap<int> mWalkableField;
            private Vector3 mStart;
            private bool mAllowTap;
            private int mDestX;
            private int mDestY;
            private Grid mStartGrid;
            private Vector2 mBasePos;
            private Vector2 mTargetPos;
            private bool mTargetSet;
            private bool mMoveStarted;
            private bool mClickedOK;
            private float mGridSnapTime;
            private bool mJumping;
            private bool mMoving;
            private bool mHasDesiredRotation;
            private bool mGridSnapping;
            private Quaternion mDesiredRotation;

            public State_MapMoveSelect_Stick()
            {
                this.mBasePos = Vector2.get_zero();
                this.mTargetPos = Vector2.get_zero();
                base..ctor();
                return;
            }

            private unsafe void AdjustTargetPos(ref Vector2 basePos, ref Vector2 targetPos, Vector2 inputDir, Vector2 unitPos)
            {
                Vector2[] vectorArray1;
                bool flag;
                Vector3 vector;
                float num;
                Vector2[] vectorArray;
                float[] numArray;
                int num2;
                int num3;
                int num4;
                Vector2 vector2;
                int num5;
                Vector2 vector3;
                if (this.CanMoveToAdj(*(basePos), *(targetPos)) == null)
                {
                    goto Label_0018;
                }
                return;
            Label_0018:
                flag = 0;
                vector3 = *(targetPos) - *(basePos);
                if (Vector3.Dot(&vector3.get_normalized(), unitPos - *(basePos)) < -0.1f)
                {
                    goto Label_0272;
                }
                vectorArray1 = new Vector2[8];
                *(&(vectorArray1[0])) = new Vector2(-1f, 1f);
                *(&(vectorArray1[1])) = new Vector2(0f, 1f);
                *(&(vectorArray1[2])) = new Vector2(1f, 1f);
                *(&(vectorArray1[3])) = new Vector2(1f, 0f);
                *(&(vectorArray1[4])) = new Vector2(1f, -1f);
                *(&(vectorArray1[5])) = new Vector2(0f, -1f);
                *(&(vectorArray1[6])) = new Vector2(-1f, -1f);
                *(&(vectorArray1[7])) = new Vector2(-1f, 0f);
                vectorArray = vectorArray1;
                numArray = new float[(int) vectorArray.Length];
                &inputDir.Normalize();
                num2 = 0;
                goto Label_0174;
            Label_0156:
                numArray[num2] = Vector2.Dot(&(vectorArray[num2]).get_normalized(), inputDir);
                num2 += 1;
            Label_0174:
                if (num2 < ((int) vectorArray.Length))
                {
                    goto Label_0156;
                }
                num3 = 0;
                goto Label_01E2;
            Label_0186:
                num4 = num3 + 1;
                goto Label_01D2;
            Label_0191:
                if (numArray[num3] >= numArray[num4])
                {
                    goto Label_01CC;
                }
                GameUtility.swap<float>(&(numArray[num3]), &(numArray[num4]));
                GameUtility.swap<Vector2>(&(vectorArray[num3]), &(vectorArray[num4]));
            Label_01CC:
                num4 += 1;
            Label_01D2:
                if (num4 < ((int) vectorArray.Length))
                {
                    goto Label_0191;
                }
                num3 += 1;
            Label_01E2:
                if (num3 < ((int) vectorArray.Length))
                {
                    goto Label_0186;
                }
                vector2 = Vector2.get_zero();
                num5 = 1;
                goto Label_0259;
            Label_01FB:
                &vector2.x = basePos.x + &(vectorArray[num5]).x;
                &vector2.y = basePos.y + &(vectorArray[num5]).y;
                if (this.CanMoveToAdj(this.mBasePos, vector2) == null)
                {
                    goto Label_0253;
                }
                *(targetPos) = vector2;
                flag = 1;
                goto Label_0272;
            Label_0253:
                num5 += 1;
            Label_0259:
                if (num5 >= ((int) vectorArray.Length))
                {
                    goto Label_0272;
                }
                if (numArray[num5] >= 0.5f)
                {
                    goto Label_01FB;
                }
            Label_0272:
                if (flag == null)
                {
                    goto Label_028F;
                }
                if (this.CanMoveToAdj(*(basePos), *(targetPos)) != null)
                {
                    goto Label_029B;
                }
            Label_028F:
                *(targetPos) = *(basePos);
            Label_029B:
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                Unit unit;
                BattleMap map;
                Grid grid;
                Vector3 vector;
                this.mScene = self;
                self.mAllowCameraTranslation = 0;
                unit = self.Battle.CurrentUnit;
                this.mController = self.FindUnitController(unit);
                this.mController.AutoUpdateRotation = 0;
                self.ShowUnitCursorOnCurrent();
                map = self.Battle.CurrentMap;
                this.mAccessMap = self.CreateCurrentAccessMap();
                this.mWalkableField = this.mAccessMap.clone();
                this.mController.WalkableField = this.mWalkableField;
                self.ShowWalkableGrids(this.mWalkableField, 0);
                grid = map[unit.x, unit.y];
                this.mStartGrid = grid;
                this.mStart = self.CalcGridCenter(grid);
                this.mDestX = Mathf.FloorToInt(&this.mStart.x);
                this.mDestY = Mathf.FloorToInt(&this.mStart.z - &self.mTacticsSceneRoot.get_transform().get_position().z);
                &this.mBasePos.x = ((float) unit.x) + 0.5f;
                &this.mBasePos.y = ((float) unit.y) + 0.5f;
                this.mTargetPos = this.mBasePos;
                self.SetMoveCamera();
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                self.SendInputMoveStart(self.Battle.CurrentUnit);
                return;
            }

            private unsafe bool CanMoveToAdj(Vector2 from, Vector2 to)
            {
                return ((this.IsGridBlocked(to) != null) ? 0 : ((this.IsGridBlocked(&from.x, &to.y) == null) ? 1 : (this.IsGridBlocked(&to.x, &from.y) == 0)));
            }

            private unsafe bool CanMoveToAdjDirect(Vector2 from, Vector2 to)
            {
                return ((this.IsGridBlocked(&from.x, &to.y) != null) ? 0 : (this.IsGridBlocked(&to.x, &from.y) == 0));
            }

            public override void End(SceneBattle self)
            {
                self.mAllowCameraTranslation = 1;
                if (this.mClickedOK != null)
                {
                    goto Label_0018;
                }
                this.Reset();
            Label_0018:
                this.mController.AutoUpdateRotation = 1;
                this.mController.StopRunning();
                this.mController.WalkableField = null;
                this.mController.HideCursor(0);
                self.mTacticsSceneRoot.HideGridLayer(0);
                return;
            }

            private unsafe bool GridEqualIn2D(Vector2 a, Vector2 b)
            {
                return ((((int) &a.x) != ((int) &b.x)) ? 0 : (((int) &a.y) == ((int) &b.y)));
            }

            private unsafe bool IsGridBlocked(Vector2 co)
            {
                return this.IsGridBlocked(&co.x, &co.y);
            }

            private bool IsGridBlocked(float x, float y)
            {
                int num;
                int num2;
                num = Mathf.FloorToInt(x);
                num2 = Mathf.FloorToInt(y);
                if (this.mAccessMap.isValid(num, num2) == null)
                {
                    goto Label_0031;
                }
                return (this.mAccessMap.get(num, num2) < 0);
            Label_0031:
                return 1;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes transition)
            {
                Grid grid;
                EUnitDirection direction;
                bool flag;
                if (transition != 1)
                {
                    goto Label_0020;
                }
                this.Reset();
                this.mClickedOK = 1;
                this.mScene.GotoMapCommand();
                return;
            Label_0020:
                if (transition != null)
                {
                    goto Label_015D;
                }
                grid = this.mScene.mBattle.CurrentMap[this.mDestX, this.mDestY];
                direction = this.mController.CalcUnitDirectionFromRotation();
                if (this.mScene.Battle.Move(this.mScene.Battle.CurrentUnit, grid, direction, 1, 0) == null)
                {
                    goto Label_0130;
                }
                this.mClickedOK = 1;
                this.mController.HideCursor(0);
                this.mController.get_transform().set_position(this.mScene.CalcGridCenter(grid));
                this.mScene.SendInputGridXY(this.mScene.Battle.CurrentUnit, this.mDestX, this.mDestY, this.mScene.Battle.CurrentUnit.Direction, 1);
                this.mScene.SendInputMoveEnd(this.mScene.Battle.CurrentUnit, 0);
                this.mScene.mBattleUI.OnInputMoveEnd();
                if (grid == this.mStartGrid)
                {
                    goto Label_012F;
                }
                base.self.mAutoActivateGimmick = 1;
            Label_012F:
                return;
            Label_0130:
                base.self.mCloseBattleUIWindow.Add(UIUtility.NegativeSystemMessage(LocalizedText.Get("sys.TITLE"), LocalizedText.Get("err.TARGET_GRID_BLOCKED"), null, null, 0, -1));
            Label_015D:
                return;
            }

            private void Reset()
            {
                this.mController.get_transform().set_position(this.mStart);
                this.mController.CancelAction();
                this.mScene.SendInputMoveEnd(this.mScene.Battle.CurrentUnit, 1);
                this.mMoveStarted = 0;
                return;
            }

            private unsafe void SyncCameraPosition()
            {
                Vector3 vector;
                vector = this.mController.get_transform().get_position();
                this.mScene.SetCameraTarget(&vector.x, &vector.z);
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                object[] objArray1;
                Unit unit;
                EUnitDirection direction;
                ObjectAnimator animator;
                bool flag;
                Transform transform;
                Vector2 vector;
                bool flag2;
                Vector2 vector2;
                float num;
                float num2;
                float num3;
                float num4;
                float num5;
                Vector3 vector3;
                Grid grid;
                Vector3 vector4;
                bool flag3;
                Quaternion quaternion;
                GameSettings settings;
                float num6;
                float num7;
                float num8;
                float num9;
                float num10;
                float num11;
                Vector3 vector5;
                Vector2 vector6;
                bool flag4;
                bool flag5;
                Vector3 vector7;
                Vector3 vector8;
                Vector3 vector9;
                Vector3 vector10;
                if (this.mGridSnapping == null)
                {
                    goto Label_0029;
                }
                this.SyncCameraPosition();
                if (this.mController.isIdle != null)
                {
                    goto Label_0022;
                }
                return;
            Label_0022:
                this.mGridSnapping = 0;
            Label_0029:
                if (((this.mMoving != null) || (this.mGridSnapTime > 0f)) || (self.Battle.EntryBattleMultiPlayTimeUp == null))
                {
                    goto Label_0155;
                }
                self.Battle.EntryBattleMultiPlayTimeUp = 0;
                unit = self.Battle.CurrentUnit;
                direction = this.mController.CalcUnitDirectionFromRotation();
                if (self.Battle.MoveMultiPlayer(unit, this.mDestX, this.mDestY, direction) != null)
                {
                    goto Label_00A1;
                }
                this.Reset();
                goto Label_0127;
            Label_00A1:
                self.SendInputGridXY(unit, unit.x, unit.y, unit.Direction, 1);
                self.SendInputMove(unit, this.mController);
                self.SendInputMoveEnd(unit, 0);
                objArray1 = new object[] { "MoveEnd x:", (int) unit.x, " y:", (int) unit.y, " action:", (bool) this.mController.IsPlayingFieldAction };
                DebugUtility.Log(string.Concat(objArray1));
            Label_0127:
                self.SendInputUnitTimeLimit(unit);
                self.SendInputFlush(0);
                self.Battle.EntryBattleMultiPlayTimeUp = 1;
                this.mClickedOK = 1;
                self.CloseBattleUI();
                self.GotoMapCommand();
                return;
            Label_0155:
                if (this.mClickedOK == null)
                {
                    goto Label_0167;
                }
                self.GotoState_WaitSignal<SceneBattle.State_WaitForLog>();
                return;
            Label_0167:
                if (ObjectAnimator.Get(Camera.get_main()).isMoving == null)
                {
                    goto Label_017E;
                }
                return;
            Label_017E:
                if (this.mController.IsPlayingFieldAction == null)
                {
                    goto Label_0195;
                }
                this.SyncCameraPosition();
                return;
            Label_0195:
                if (this.mJumping == null)
                {
                    goto Label_01E7;
                }
                this.mJumping = 0;
                flag = this.mScene.Battle.EntryBattleMultiPlayTimeUp;
                self.Battle.EntryBattleMultiPlayTimeUp = 0;
                self.SendInputMove(self.Battle.CurrentUnit, this.mController);
                self.Battle.EntryBattleMultiPlayTimeUp = flag;
            Label_01E7:
                transform = this.mController.get_transform();
                &vector..ctor(&transform.get_position().x, &transform.get_position().z);
                &vector.y -= &self.mTacticsSceneRoot.get_transform().get_position().z;
                if ((this.mTargetSet == null) || (this.GridEqualIn2D(vector, this.mTargetPos) == null))
                {
                    goto Label_02C3;
                }
                this.mBasePos = this.mTargetPos;
                this.mDestX = Mathf.FloorToInt(&this.mBasePos.x);
                this.mDestY = Mathf.FloorToInt(&this.mBasePos.y);
                flag2 = this.mScene.Battle.EntryBattleMultiPlayTimeUp;
                self.Battle.EntryBattleMultiPlayTimeUp = 0;
                self.Battle.EntryBattleMultiPlayTimeUp = flag2;
            Label_02C3:
                vector2 = this.Velocity;
                if (self.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_02E2;
                }
                vector2 = Vector2.get_zero();
            Label_02E2:
                if (&vector2.get_sqrMagnitude() <= 0f)
                {
                    goto Label_0438;
                }
                if (this.mMoveStarted != null)
                {
                    goto Label_0305;
                }
                this.mMoveStarted = 1;
            Label_0305:
                num = Mathf.Atan2(&vector2.y, &vector2.x) * 57.29578f;
                num = Mathf.Floor((num + 22.5f) / 45f) * 45f;
                num2 = Mathf.Cos(num * 0.01745329f);
                num3 = Mathf.Sin(num * 0.01745329f);
                num4 = (Mathf.Abs(num2) < 0.0001f) ? 0f : Mathf.Sign(num2);
                num5 = (Mathf.Abs(num3) < 0.0001f) ? 0f : Mathf.Sign(num3);
                &this.mTargetPos.x = &this.mBasePos.x + num4;
                &this.mTargetPos.y = &this.mBasePos.y + num5;
                this.AdjustTargetPos(&this.mBasePos, &this.mTargetPos, vector2, vector);
                &vector3..ctor(&vector2.x, 0f, &vector2.y);
                this.mDesiredRotation = Quaternion.LookRotation(vector3);
                this.mHasDesiredRotation = 1;
                this.mTargetSet = 1;
                this.mGridSnapTime = &GameSettings.Instance.Quest.GridSnapDelay;
                goto Label_0504;
            Label_0438:
                this.mMoving = 0;
                this.mTargetSet = 0;
                this.mController.StopRunning();
                if (this.mGridSnapTime < 0f)
                {
                    goto Label_0504;
                }
                if (this.mHasDesiredRotation != null)
                {
                    goto Label_0504;
                }
                this.mGridSnapTime -= Time.get_deltaTime();
                if (this.mGridSnapTime > 0f)
                {
                    goto Label_0504;
                }
                grid = self.mBattle.CurrentMap[this.mDestX, this.mDestY];
                this.mController.StepTo(self.CalcGridCenter(grid));
                this.mGridSnapping = 1;
                if (self.Battle.CurrentUnit == null)
                {
                    goto Label_0504;
                }
                self.SendInputGridXY(self.Battle.CurrentUnit, this.mDestX, this.mDestY, self.Battle.CurrentUnit.Direction, 1);
            Label_0504:
                vector4 = Vector3.get_zero();
                if (this.mTargetSet == null)
                {
                    goto Label_05EF;
                }
                if (this.CanMoveToAdjDirect(this.mBasePos, this.mTargetPos) == null)
                {
                    goto Label_0546;
                }
                vector4 = this.mTargetPos - vector;
                goto Label_05D2;
            Label_0546:
                if (this.IsGridBlocked(&vector.x, &this.mTargetPos.y) == null)
                {
                    goto Label_0582;
                }
                &vector4.x = &this.mTargetPos.x - &vector.x;
                goto Label_05D2;
            Label_0582:
                if (this.IsGridBlocked(&this.mTargetPos.x, &vector.y) == null)
                {
                    goto Label_05BE;
                }
                &vector4.y = &this.mTargetPos.y - &vector.y;
                goto Label_05D2;
            Label_05BE:
                vector4 = this.mTargetPos - vector;
            Label_05D2:
                if (&vector4.get_magnitude() >= 0.1f)
                {
                    goto Label_05EF;
                }
                vector4 = Vector2.get_zero();
            Label_05EF:
                flag3 = &vector4.get_sqrMagnitude() > 0f;
                if (this.mHasDesiredRotation != null)
                {
                    goto Label_0611;
                }
                if (flag3 == null)
                {
                    goto Label_08D9;
                }
            Label_0611:
                if (flag3 == null)
                {
                    goto Label_063C;
                }
                quaternion = Quaternion.LookRotation(new Vector3(&vector4.x, 0f, &vector4.y));
                goto Label_0644;
            Label_063C:
                quaternion = this.mDesiredRotation;
            Label_0644:
                settings = GameSettings.Instance;
                num6 = &vector2.get_magnitude();
                num7 = 0f;
                if (this.mMoving == null)
                {
                    goto Label_06A1;
                }
                num7 = num6;
                this.mController.get_transform().set_rotation(Quaternion.Slerp(this.mController.get_transform().get_rotation(), quaternion, Time.get_deltaTime() * 5f));
                goto Label_0759;
            Label_06A1:
                this.mController.get_transform().set_rotation(Quaternion.Slerp(this.mController.get_transform().get_rotation(), quaternion, Time.get_deltaTime() * 10f));
                num8 = Quaternion.Angle(quaternion, this.mController.get_transform().get_rotation());
                if (num6 <= 0.1f)
                {
                    goto Label_0734;
                }
                if (num8 >= 1f)
                {
                    goto Label_0714;
                }
                this.mMoving = 1;
                num7 = num6;
                goto Label_0734;
            Label_0714:
                num9 = 15f;
                num10 = Mathf.Clamp01(1f - (num8 / num9));
                num7 = num6 * num10;
            Label_0734:
                if (num8 >= 1f)
                {
                    goto Label_0759;
                }
                this.mController.get_transform().set_rotation(quaternion);
                this.mHasDesiredRotation = 0;
            Label_0759:
                if (num7 <= 0f)
                {
                    goto Label_0897;
                }
                if (flag3 == null)
                {
                    goto Label_0897;
                }
                this.mController.StartRunning();
                num11 = Mathf.Lerp(&settings.Quest.MapRunSpeedMin, &settings.Quest.MapRunSpeedMax, num7);
                &vector10..ctor(&vector4.x, 0f, &vector4.y);
                vector5 = &vector10.get_normalized() * num11;
                if (this.mController.TriggerFieldAction(vector5, 0) == null)
                {
                    goto Label_0879;
                }
                vector6 = this.mController.FieldActionPoint;
                this.mDestX = Mathf.FloorToInt(&vector6.x);
                this.mDestY = Mathf.FloorToInt(&vector6.y);
                this.mHasDesiredRotation = 0;
                this.mTargetSet = 0;
                this.mJumping = 1;
                flag4 = this.mScene.Battle.EntryBattleMultiPlayTimeUp;
                self.Battle.EntryBattleMultiPlayTimeUp = 0;
                self.SendInputGridXY(self.Battle.CurrentUnit, this.mDestX, this.mDestY, self.Battle.CurrentUnit.Direction, 1);
                self.Battle.EntryBattleMultiPlayTimeUp = flag4;
                goto Label_0897;
            Label_0879:
                transform.set_position(transform.get_position() + (vector5 * Time.get_deltaTime()));
            Label_0897:
                flag5 = this.mScene.Battle.EntryBattleMultiPlayTimeUp;
                self.Battle.EntryBattleMultiPlayTimeUp = 0;
                self.SendInputMove(self.Battle.CurrentUnit, this.mController);
                self.Battle.EntryBattleMultiPlayTimeUp = flag5;
            Label_08D9:
                this.SyncCameraPosition();
                return;
            }

            private Vector2 Velocity
            {
                get
                {
                    if ((VirtualStick.Instance != null) == null)
                    {
                        goto Label_0025;
                    }
                    return VirtualStick.Instance.GetVelocity(Camera.get_main().get_transform());
                Label_0025:
                    return Vector2.get_zero();
                }
            }
        }

        private class State_MapRevive : SceneBattle.State_SpawnUnit
        {
            public State_MapRevive()
            {
                base..ctor();
                return;
            }
        }

        private class State_MapStartV2 : State<SceneBattle>
        {
            public State_MapStartV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.QuestStart = 1;
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_MapTrick : State<SceneBattle>
        {
            private eSeqState mSeqState;
            private float mPassedTime;
            private LogMapTrick mLog;
            private LoadRequest mLoadReqEffect;
            private List<TucMapTrick> mTucMapTrickLists;
            private bool mIsAction;
            private bool mIsDamaged;
            private List<GameObject> mGoEffectLists;
            private List<GameObject> mGoPopupLists;

            public State_MapTrick()
            {
                this.mTucMapTrickLists = new List<TucMapTrick>();
                this.mGoEffectLists = new List<GameObject>();
                this.mGoPopupLists = new List<GameObject>();
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogMapTrick.TargetInfo info;
                List<LogMapTrick.TargetInfo>.Enumerator enumerator;
                TacticsUnitController controller;
                TucMapTrick trick;
                List<TucMapTrick>.Enumerator enumerator2;
                LogMapTrick.TargetInfo info2;
                this.mLog = self.Battle.Logs.Peek as LogMapTrick;
                if (this.mLog == null)
                {
                    goto Label_019B;
                }
                if (this.mLog.TrickData == null)
                {
                    goto Label_019B;
                }
                this.mTucMapTrickLists.Clear();
                enumerator = this.mLog.TargetInfoLists.GetEnumerator();
            Label_0052:
                try
                {
                    goto Label_008A;
                Label_0057:
                    info = &enumerator.Current;
                    controller = self.FindUnitController(info.Target);
                    if ((controller != null) == null)
                    {
                        goto Label_008A;
                    }
                    this.mTucMapTrickLists.Add(new TucMapTrick(controller, info));
                Label_008A:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0057;
                    }
                    goto Label_00A7;
                }
                finally
                {
                Label_009B:
                    ((List<LogMapTrick.TargetInfo>.Enumerator) enumerator).Dispose();
                }
            Label_00A7:
                if (this.mTucMapTrickLists.Count == null)
                {
                    goto Label_019B;
                }
                if (string.IsNullOrEmpty(this.mLog.TrickData.TrickParam.EffectName) != null)
                {
                    goto Label_00FB;
                }
                this.mLoadReqEffect = AssetManager.LoadAsync<GameObject>(AssetPath.TrickEffect(this.mLog.TrickData.TrickParam.EffectName));
            Label_00FB:
                enumerator2 = this.mTucMapTrickLists.GetEnumerator();
            Label_0108:
                try
                {
                    goto Label_015F;
                Label_010D:
                    trick = &enumerator2.Current;
                    info2 = trick.mTargetInfo;
                    if (info2.Damage != null)
                    {
                        goto Label_0141;
                    }
                    if (info2.Heal != null)
                    {
                        goto Label_0141;
                    }
                    if (info2.KnockBackGrid == null)
                    {
                        goto Label_015F;
                    }
                Label_0141:
                    if (info2.Damage == null)
                    {
                        goto Label_0158;
                    }
                    trick.mController.LoadDamageAnimations();
                Label_0158:
                    this.mIsAction = 1;
                Label_015F:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_010D;
                    }
                    goto Label_017D;
                }
                finally
                {
                Label_0170:
                    ((List<TucMapTrick>.Enumerator) enumerator2).Dispose();
                }
            Label_017D:
                if (this.mLoadReqEffect != null)
                {
                    goto Label_0193;
                }
                if (this.mIsAction == null)
                {
                    goto Label_019B;
                }
            Label_0193:
                this.mSeqState = 0;
                return;
            Label_019B:
                this.mSeqState = 5;
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                GameObject obj2;
                TucMapTrick trick;
                List<TucMapTrick>.Enumerator enumerator;
                GameObject obj3;
                ParticleSystem[] systemArray;
                ParticleSystem system;
                ParticleSystem[] systemArray2;
                int num;
                ParticleSystem.SubEmittersModule module;
                bool flag;
                int num2;
                bool flag2;
                TucMapTrick trick2;
                List<TucMapTrick>.Enumerator enumerator2;
                TucMapTrick trick3;
                List<TucMapTrick>.Enumerator enumerator3;
                TacticsUnitController controller;
                LogMapTrick.TargetInfo info;
                GameObject obj4;
                bool flag3;
                int num3;
                TucMapTrick trick4;
                List<TucMapTrick>.Enumerator enumerator4;
                TucMapTrick trick5;
                List<TucMapTrick>.Enumerator enumerator5;
                eSeqState state;
                if (this.mLog == null)
                {
                    goto Label_002B;
                }
                if (this.mLog.TrickData == null)
                {
                    goto Label_002B;
                }
                if (this.mTucMapTrickLists.Count != null)
                {
                    goto Label_0032;
                }
            Label_002B:
                this.mSeqState = 5;
            Label_0032:
                switch (this.mSeqState)
                {
                    case 0:
                        goto Label_005E;

                    case 1:
                        goto Label_0081;

                    case 2:
                        goto Label_01A8;

                    case 3:
                        goto Label_0257;

                    case 4:
                        goto Label_03F4;

                    case 5:
                        goto Label_050E;
                }
                goto Label_0553;
            Label_005E:
                if (this.mLoadReqEffect == null)
                {
                    goto Label_0075;
                }
                this.mSeqState = 1;
                goto Label_007C;
            Label_0075:
                this.mSeqState = 3;
            Label_007C:
                goto Label_0553;
            Label_0081:
                if (this.mLoadReqEffect == null)
                {
                    goto Label_019C;
                }
                if (this.mLoadReqEffect.isDone != null)
                {
                    goto Label_00A1;
                }
                goto Label_0553;
            Label_00A1:
                this.mGoEffectLists.Clear();
                obj2 = this.mLoadReqEffect.asset as GameObject;
                if (obj2 == null)
                {
                    goto Label_017E;
                }
                enumerator = this.mTucMapTrickLists.GetEnumerator();
            Label_00D4:
                try
                {
                    goto Label_0161;
                Label_00D9:
                    trick = &enumerator.Current;
                    obj3 = Object.Instantiate<GameObject>(obj2);
                    if (obj3 == null)
                    {
                        goto Label_0161;
                    }
                    obj3.get_transform().SetParent(trick.mController.get_transform(), 0);
                    systemArray = obj3.GetComponentsInChildren<ParticleSystem>();
                    if (systemArray == null)
                    {
                        goto Label_014E;
                    }
                    systemArray2 = systemArray;
                    num = 0;
                    goto Label_0143;
                Label_0125:
                    system = systemArray2[num];
                    &system.get_subEmitters().set_enabled(1);
                    num += 1;
                Label_0143:
                    if (num < ((int) systemArray2.Length))
                    {
                        goto Label_0125;
                    }
                Label_014E:
                    GameUtility.RequireComponent<OneShotParticle>(obj3);
                    this.mGoEffectLists.Add(obj3);
                Label_0161:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_00D9;
                    }
                    goto Label_017E;
                }
                finally
                {
                Label_0172:
                    ((List<TucMapTrick>.Enumerator) enumerator).Dispose();
                }
            Label_017E:
                this.mLoadReqEffect = null;
                this.mPassedTime = 0f;
                this.mSeqState = 2;
                goto Label_01A3;
            Label_019C:
                this.mSeqState = 3;
            Label_01A3:
                goto Label_0553;
            Label_01A8:
                flag = 0;
                this.mPassedTime += Time.get_deltaTime();
                if (this.mGoEffectLists.Count == null)
                {
                    goto Label_0234;
                }
                num2 = 0;
                goto Label_0222;
            Label_01D5:
                if (this.mPassedTime >= &GameSettings.Instance.Quest.TrickEffectWaitMaxTime)
                {
                    goto Label_020E;
                }
                if (this.mGoEffectLists[num2] == null)
                {
                    goto Label_020E;
                }
                flag = 1;
                goto Label_0234;
            Label_020E:
                this.mGoEffectLists[num2] = null;
                num2 += 1;
            Label_0222:
                if (num2 < this.mGoEffectLists.Count)
                {
                    goto Label_01D5;
                }
            Label_0234:
                if (flag == null)
                {
                    goto Label_0240;
                }
                goto Label_0553;
            Label_0240:
                this.mGoEffectLists.Clear();
                this.mSeqState = 3;
                goto Label_0553;
            Label_0257:
                if (this.mIsAction == null)
                {
                    goto Label_03E8;
                }
                flag2 = 0;
                enumerator2 = this.mTucMapTrickLists.GetEnumerator();
            Label_0272:
                try
                {
                    goto Label_0299;
                Label_0277:
                    trick2 = &enumerator2.Current;
                    if (trick2.mController.IsLoading == null)
                    {
                        goto Label_0299;
                    }
                    flag2 = 1;
                    goto Label_02A5;
                Label_0299:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_0277;
                    }
                Label_02A5:
                    goto Label_02B7;
                }
                finally
                {
                Label_02AA:
                    ((List<TucMapTrick>.Enumerator) enumerator2).Dispose();
                }
            Label_02B7:
                if (flag2 == null)
                {
                    goto Label_02C3;
                }
                goto Label_0553;
            Label_02C3:
                this.mGoPopupLists.Clear();
                enumerator3 = this.mTucMapTrickLists.GetEnumerator();
            Label_02DB:
                try
                {
                    goto Label_03BE;
                Label_02E0:
                    trick3 = &enumerator3.Current;
                    controller = trick3.mController;
                    info = trick3.mTargetInfo;
                    obj4 = null;
                    if (info.Damage == null)
                    {
                        goto Label_0361;
                    }
                    obj4 = self.PopupDamageNumber(controller.CenterPosition, info.Damage);
                    controller.PlayDamage(0);
                    MonoSingleton<GameManager>.Instance.Player.OnDamageToEnemy(this.mLog.TrickData.CreateUnit, info.Target, info.Damage);
                    this.mIsDamaged = 1;
                    goto Label_0383;
                Label_0361:
                    if (info.Heal == null)
                    {
                        goto Label_0383;
                    }
                    obj4 = self.PopupHpHealNumber(controller.CenterPosition, info.Heal);
                Label_0383:
                    if (obj4 == null)
                    {
                        goto Label_039C;
                    }
                    this.mGoPopupLists.Add(obj4);
                Label_039C:
                    if (info.KnockBackGrid == null)
                    {
                        goto Label_03BE;
                    }
                    controller.KnockBackGrid = info.KnockBackGrid;
                    controller.PlayTrickKnockBack(0);
                Label_03BE:
                    if (&enumerator3.MoveNext() != null)
                    {
                        goto Label_02E0;
                    }
                    goto Label_03DC;
                }
                finally
                {
                Label_03CF:
                    ((List<TucMapTrick>.Enumerator) enumerator3).Dispose();
                }
            Label_03DC:
                this.mSeqState = 4;
                goto Label_03EF;
            Label_03E8:
                this.mSeqState = 5;
            Label_03EF:
                goto Label_0553;
            Label_03F4:
                flag3 = 0;
                if (this.mGoPopupLists.Count == null)
                {
                    goto Label_0454;
                }
                num3 = 0;
                goto Label_0442;
            Label_040F:
                if (this.mGoPopupLists[num3] == null)
                {
                    goto Label_042E;
                }
                flag3 = 1;
                goto Label_0454;
            Label_042E:
                this.mGoPopupLists[num3] = null;
                num3 += 1;
            Label_0442:
                if (num3 < this.mGoPopupLists.Count)
                {
                    goto Label_040F;
                }
            Label_0454:
                enumerator4 = this.mTucMapTrickLists.GetEnumerator();
            Label_0461:
                try
                {
                    goto Label_0488;
                Label_0466:
                    trick4 = &enumerator4.Current;
                    if (trick4.mController.IsBusy == null)
                    {
                        goto Label_0488;
                    }
                    flag3 = 1;
                    goto Label_0494;
                Label_0488:
                    if (&enumerator4.MoveNext() != null)
                    {
                        goto Label_0466;
                    }
                Label_0494:
                    goto Label_04A6;
                }
                finally
                {
                Label_0499:
                    ((List<TucMapTrick>.Enumerator) enumerator4).Dispose();
                }
            Label_04A6:
                if (flag3 == null)
                {
                    goto Label_04B2;
                }
                goto Label_0553;
            Label_04B2:
                this.mGoPopupLists.Clear();
                enumerator5 = this.mTucMapTrickLists.GetEnumerator();
            Label_04CA:
                try
                {
                    goto Label_04E4;
                Label_04CF:
                    trick5 = &enumerator5.Current;
                    trick5.mController.UnloadBattleAnimations();
                Label_04E4:
                    if (&enumerator5.MoveNext() != null)
                    {
                        goto Label_04CF;
                    }
                    goto Label_0502;
                }
                finally
                {
                Label_04F5:
                    ((List<TucMapTrick>.Enumerator) enumerator5).Dispose();
                }
            Label_0502:
                this.mSeqState = 5;
                goto Label_0553;
            Label_050E:
                TrickData.CheckRemoveMarker(this.mLog.TrickData);
                self.RefreshJumpSpots();
                this.mLog = null;
                self.RemoveLog();
                if (this.mIsDamaged == null)
                {
                    goto Label_0548;
                }
                self.GotoState<SceneBattle.State_TriggerHPEvents>();
                goto Label_054E;
            Label_0548:
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_054E:;
            Label_0553:
                return;
            }

            private enum eSeqState
            {
                INIT,
                EFF_LOAD,
                EFF_PLAY,
                ACT_INIT,
                ACT_PLAY,
                EXIT
            }

            private class TucMapTrick
            {
                public TacticsUnitController mController;
                public LogMapTrick.TargetInfo mTargetInfo;

                public TucMapTrick(TacticsUnitController tuc, LogMapTrick.TargetInfo ti)
                {
                    base..ctor();
                    this.mController = tuc;
                    this.mTargetInfo = ti;
                    return;
                }
            }
        }

        private class State_MapWait : State<SceneBattle>
        {
            public State_MapWait()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.HideUnitCursor(self.mBattle.CurrentUnit);
                return;
            }

            public override void End(SceneBattle self)
            {
                self.RemoveLog();
                return;
            }

            public override void Update(SceneBattle self)
            {
                TacticsUnitController controller;
                if ((self.mEventScript != null) == null)
                {
                    goto Label_005F;
                }
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_005F;
                }
                self.mEventSequence = self.mEventScript.OnStandbyGrid(controller, self.mIsFirstPlay);
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_005F;
                }
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_WaitForLog>>();
                return;
            Label_005F:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }
        }

        private class State_MultiPlayContinue : SceneBattle.State_MultiPlayContinueBase
        {
            private bool mOpenMenu;
            private bool mOpenMenuReq;

            public State_MultiPlayContinue()
            {
                base..ctor();
                return;
            }

            protected override void Cancel()
            {
                if (this.mOpenMenu == null)
                {
                    goto Label_001B;
                }
                base.self.mBattleUI.OnMPSelectContinueWaitingEnd();
            Label_001B:
                base.self.mExecDisconnected = 1;
                base.self.SendIgnoreMyDisconnect();
                base.self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
                return;
            }

            protected override void CloseUI(bool roomOwner, bool decided)
            {
                if (roomOwner == null)
                {
                    goto Label_0012;
                }
                this.mOpenMenuReq = 0;
                goto Label_002F;
            Label_0012:
                base.self.mBattleUI_MultiPlay.HideWaitContinue();
                if (decided == null)
                {
                    goto Label_002F;
                }
                this.mOpenMenuReq = 0;
            Label_002F:
                return;
            }

            protected override unsafe void ExecContinue(List<int> units)
            {
                object[] objArray1;
                List<Unit> list;
                MyPhoton photon;
                bool flag;
                Unit unit;
                List<Unit>.Enumerator enumerator;
                TacticsUnitController controller;
                if (this.mOpenMenu == null)
                {
                    goto Label_001B;
                }
                base.self.mBattleUI.OnMPSelectContinueWaitingEnd();
            Label_001B:
                objArray1 = new object[] { "[MultiPlayContinue] btlid:", (long) base.self.Battle.BtlID, " > ", (long) base.BtlID, ", seed:", (int) base.Seed };
                base.self.MultiPlayLog(string.Concat(objArray1));
                list = base.self.Battle.ContinueStart(base.self.Battle.BtlID, base.Seed);
                photon = PunMonoSingleton<MyPhoton>.Instance;
                if (photon.IsHost() == null)
                {
                    goto Label_00DB;
                }
                flag = (base.self.Battle.IsMultiTower == null) ? 0 : 1;
                photon.OpenRoom(flag, 1);
            Label_00DB:
                enumerator = list.GetEnumerator();
            Label_00E3:
                try
                {
                    goto Label_012F;
                Label_00E8:
                    unit = &enumerator.Current;
                    controller = base.self.FindUnitController(unit);
                    if ((controller == null) == null)
                    {
                        goto Label_0110;
                    }
                    goto Label_012F;
                Label_0110:
                    base.self.mTacticsUnits.Remove(controller);
                    GameUtility.DestroyGameObject(controller.get_gameObject());
                Label_012F:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_00E8;
                    }
                    goto Label_014D;
                }
                finally
                {
                Label_0140:
                    ((List<Unit>.Enumerator) enumerator).Dispose();
                }
            Label_014D:
                base.self.RefreshJumpSpots();
                UnitQueue.Instance.Refresh(0);
                base.self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }

            protected override void OpenUI(bool roomOwner)
            {
                if (roomOwner == null)
                {
                    goto Label_0022;
                }
                base.self.mBattleUI_MultiPlay.StartSelectContinue();
                this.mOpenMenuReq = 0;
                goto Label_0039;
            Label_0022:
                base.self.mBattleUI_MultiPlay.ShowWaitContinue();
                this.mOpenMenuReq = 1;
            Label_0039:
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mOpenMenu == null)
                {
                    goto Label_0032;
                }
                if (this.mOpenMenuReq != null)
                {
                    goto Label_0032;
                }
                self.mBattleUI.OnMPSelectContinueWaitingEnd();
                this.mOpenMenu = this.mOpenMenuReq;
                goto Label_0084;
            Label_0032:
                if (this.mOpenMenu != null)
                {
                    goto Label_0084;
                }
                if (this.mOpenMenuReq == null)
                {
                    goto Label_0084;
                }
                if ((self.mBattleUI.get_gameObject().get_transform().Find("quest_lose(Clone)") == null) == null)
                {
                    goto Label_0084;
                }
                self.mBattleUI.OnMPSelectContinueWaitingStart();
                this.mOpenMenu = this.mOpenMenuReq;
            Label_0084:
                base.Update(self);
                return;
            }
        }

        private class State_MultiPlayContinueBase : State<SceneBattle>
        {
            private List<MultiPlayContinueRequest> mReqPool;
            private bool mInitFlag;
            private int mRoomOwnerPlayerID;
            [CompilerGenerated]
            private int <Seed>k__BackingField;
            [CompilerGenerated]
            private long <BtlID>k__BackingField;

            public State_MultiPlayContinueBase()
            {
                this.mReqPool = new List<MultiPlayContinueRequest>();
                base..ctor();
                return;
            }

            protected virtual void Cancel()
            {
            }

            protected virtual void CloseUI(bool roomOwner, bool decided)
            {
            }

            protected virtual void ExecContinue(List<int> units)
            {
            }

            protected virtual void OpenUI(bool roomOwner)
            {
            }

            private unsafe MultiPlayContinueRequest SendMultiPlayContinueRequest(SceneBattle self, bool flag, List<int> units, int seed, long btlid)
            {
                MyPhoton photon;
                MyPhoton.MyPlayer player;
                List<SceneBattle.MultiPlayInput> list;
                SceneBattle.MultiPlayInput input;
                int num;
                SceneBattle.MultiPlayInput input2;
                byte[] buffer;
                MultiPlayContinueRequest request;
                photon = PunMonoSingleton<MyPhoton>.Instance;
                player = photon.GetMyPlayer();
                if (player != null)
                {
                    goto Label_0015;
                }
                return null;
            Label_0015:
                list = new List<SceneBattle.MultiPlayInput>();
                if ((units != null) && (units.Count > 0))
                {
                    goto Label_0059;
                }
                input = new SceneBattle.MultiPlayInput();
                input.s = &seed.ToString();
                input.i = &btlid.ToString();
                list.Add(input);
                goto Label_00AE;
            Label_0059:
                num = 0;
                goto Label_00A1;
            Label_0061:
                input2 = new SceneBattle.MultiPlayInput();
                input2.s = &seed.ToString();
                input2.i = &btlid.ToString();
                input2.u = units[num];
                list.Add(input2);
                num += 1;
            Label_00A1:
                if (num < units.Count)
                {
                    goto Label_0061;
                }
            Label_00AE:
                buffer = self.CreateSendBinary(4, (flag == null) ? 0 : 1, list);
                photon.SendRoomMessageBinary(1, buffer, 0, 0);
                request = new MultiPlayContinueRequest();
                request.playerID = player.playerID;
                request.flag = flag;
                request.units = units;
                request.seed = seed;
                request.btlid = btlid;
                this.mReqPool.Add(request);
                return request;
            }

            public override unsafe void Update(SceneBattle self)
            {
                object[] objArray2;
                object[] objArray1;
                MyPhoton photon;
                List<MyPhoton.MyPlayer> list;
                List<JSON_MyPhotonPlayerParam> list2;
                MultiPlayContinueRequest request;
                int num;
                MultiPlayContinueRequest request2;
                MultiPlayContinueRequest request3;
                List<MyPhoton.MyPlayer>.Enumerator enumerator;
                MultiPlayContinueRequest request4;
                List<MultiPlayContinueRequest>.Enumerator enumerator2;
                <Update>c__AnonStorey1F0 storeyf;
                <Update>c__AnonStorey1EF storeyef;
                <Update>c__AnonStorey1F1 storeyf2;
                <Update>c__AnonStorey1F2 storeyf3;
                storeyf = new <Update>c__AnonStorey1F0();
                storeyf.<>f__this = this;
                photon = PunMonoSingleton<MyPhoton>.Instance;
                storeyf.me = photon.GetMyPlayer();
                list = photon.GetRoomPlayerList();
                list2 = photon.GetMyPlayersStarted();
                if (storeyf.me == null)
                {
                    goto Label_0059;
                }
                if (list == null)
                {
                    goto Label_0059;
                }
                if (list2 == null)
                {
                    goto Label_0059;
                }
                if ((self.mBattleUI_MultiPlay == null) == null)
                {
                    goto Label_0060;
                }
            Label_0059:
                this.Cancel();
                return;
            Label_0060:
                if (this.mInitFlag != null)
                {
                    goto Label_037D;
                }
                GlobalVars.SelectedMultiPlayContinue = 0;
                GlobalVars.SelectedMultiPlayerUnitIDs = null;
                this.mReqPool.Clear();
                this.mRoomOwnerPlayerID = photon.GetOldestPlayer();
                this.OpenUI(this.mRoomOwnerPlayerID == storeyf.me.playerID);
                this.mInitFlag = 1;
                goto Label_037D;
            Label_00B4:
                storeyef = new <Update>c__AnonStorey1EF();
                storeyef.data = self.mRecvContinue[0];
                if (storeyef.data.b <= self.UnitStartCountTotal)
                {
                    goto Label_018E;
                }
                objArray1 = new object[] { "[PUN] new turn data. sq:", (int) storeyef.data.sq, " h:", (SceneBattle.EMultiPlayRecvDataHeader) storeyef.data.h, " b:", (int) storeyef.data.b, "/", (int) self.UnitStartCountTotal, " test:", (int) self.mRecvBattle.FindIndex(new Predicate<SceneBattle.MultiPlayRecvData>(storeyef.<>m__C4)) };
                DebugUtility.LogWarning(string.Concat(objArray1));
                goto Label_038E;
            Label_018E:
                if (storeyef.data.b >= self.UnitStartCountTotal)
                {
                    goto Label_0224;
                }
                objArray2 = new object[] { "[PUN] old turn data. sq:", (int) storeyef.data.sq, " h:", (SceneBattle.EMultiPlayRecvDataHeader) storeyef.data.h, " b:", (int) storeyef.data.b, "/", (int) self.UnitStartCountTotal };
                DebugUtility.LogWarning(string.Concat(objArray2));
                goto Label_0371;
            Label_0224:
                if (storeyef.data.h != 4)
                {
                    goto Label_0371;
                }
                this.mReqPool.RemoveAll(new Predicate<MultiPlayContinueRequest>(storeyef.<>m__C5));
                request = new MultiPlayContinueRequest();
                request.playerID = storeyef.data.pid;
                request.flag = (storeyef.data.uid == 0) == 0;
                if (storeyef.data.i == null)
                {
                    goto Label_02BE;
                }
                if (((int) storeyef.data.i.Length) <= 0)
                {
                    goto Label_02BE;
                }
                long.TryParse(storeyef.data.i[0], &request.btlid);
            Label_02BE:
                if (storeyef.data.s == null)
                {
                    goto Label_02FD;
                }
                if (((int) storeyef.data.s.Length) <= 0)
                {
                    goto Label_02FD;
                }
                int.TryParse(storeyef.data.s[0], &request.seed);
            Label_02FD:
                if (storeyef.data.u == null)
                {
                    goto Label_0365;
                }
                num = 0;
                goto Label_0350;
            Label_0316:
                if (storeyef.data.u[num] >= 0)
                {
                    goto Label_0330;
                }
                goto Label_034A;
            Label_0330:
                request.units.Add(storeyef.data.u[num]);
            Label_034A:
                num += 1;
            Label_0350:
                if (num < ((int) storeyef.data.u.Length))
                {
                    goto Label_0316;
                }
            Label_0365:
                this.mReqPool.Add(request);
            Label_0371:
                self.mRecvContinue.RemoveAt(0);
            Label_037D:
                if (self.mRecvContinue.Count > 0)
                {
                    goto Label_00B4;
                }
            Label_038E:
                if (this.mReqPool.Count != null)
                {
                    goto Label_03D9;
                }
                if (list.Find(new Predicate<MyPhoton.MyPlayer>(storeyf.<>m__C6)) != null)
                {
                    goto Label_03D9;
                }
                this.mInitFlag = 0;
                this.CloseUI(this.mRoomOwnerPlayerID == storeyf.me.playerID, 0);
                return;
            Label_03D9:
                request2 = this.mReqPool.Find(new Predicate<MultiPlayContinueRequest>(storeyf.<>m__C7));
                if (request2 == null)
                {
                    goto Label_03FF;
                }
                goto Label_04F9;
            Label_03FF:
                if (storeyf.me.playerID != this.mRoomOwnerPlayerID)
                {
                    goto Label_0486;
                }
                if (GlobalVars.SelectedMultiPlayContinue != null)
                {
                    goto Label_0421;
                }
                return;
            Label_0421:
                if (GlobalVars.MultiPlayBattleCont == null)
                {
                    goto Label_045F;
                }
                if (GlobalVars.MultiPlayBattleCont.btlinfo == null)
                {
                    goto Label_045F;
                }
                this.BtlID = GlobalVars.MultiPlayBattleCont.btlid;
                this.Seed = GlobalVars.MultiPlayBattleCont.btlinfo.seed;
            Label_045F:
                request2 = this.SendMultiPlayContinueRequest(self, GlobalVars.SelectedMultiPlayContinue == 1, GlobalVars.SelectedMultiPlayerUnitIDs, this.Seed, this.BtlID);
                goto Label_04F9;
            Label_0486:
                storeyf2 = new <Update>c__AnonStorey1F1();
                storeyf2.roomOwnerPlayerID = photon.GetOldestPlayer();
                request3 = this.mReqPool.Find(new Predicate<MultiPlayContinueRequest>(storeyf2.<>m__C8));
                if (request3 != null)
                {
                    goto Label_04BC;
                }
                return;
            Label_04BC:
                this.BtlID = request3.btlid;
                this.Seed = request3.seed;
                request2 = this.SendMultiPlayContinueRequest(self, request3.flag, request3.units, this.Seed, this.BtlID);
            Label_04F9:
                storeyf3 = new <Update>c__AnonStorey1F2();
                enumerator = list.GetEnumerator();
            Label_0508:
                try
                {
                    goto Label_0553;
                Label_050D:
                    storeyf3.player = &enumerator.Current;
                    if (storeyf3.player.start != null)
                    {
                        goto Label_0531;
                    }
                    goto Label_0553;
                Label_0531:
                    if (this.mReqPool.Find(new Predicate<MultiPlayContinueRequest>(storeyf3.<>m__C9)) != null)
                    {
                        goto Label_0553;
                    }
                    goto Label_0663;
                Label_0553:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_050D;
                    }
                    goto Label_0571;
                }
                finally
                {
                Label_0564:
                    ((List<MyPhoton.MyPlayer>.Enumerator) enumerator).Dispose();
                }
            Label_0571:
                enumerator2 = this.mReqPool.GetEnumerator();
            Label_057E:
                try
                {
                    goto Label_0604;
                Label_0583:
                    request4 = &enumerator2.Current;
                    if (request2.flag != request4.flag)
                    {
                        goto Label_05DD;
                    }
                    if (Enumerable.SequenceEqual<int>(request2.units, request4.units) == null)
                    {
                        goto Label_05DD;
                    }
                    if (request2.seed != request4.seed)
                    {
                        goto Label_05DD;
                    }
                    if (request2.btlid == request4.btlid)
                    {
                        goto Label_0604;
                    }
                Label_05DD:
                    this.mInitFlag = 0;
                    this.CloseUI(this.mRoomOwnerPlayerID == storeyf.me.playerID, 0);
                    goto Label_0663;
                Label_0604:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_0583;
                    }
                    goto Label_0622;
                }
                finally
                {
                Label_0615:
                    ((List<MultiPlayContinueRequest>.Enumerator) enumerator2).Dispose();
                }
            Label_0622:
                this.CloseUI(this.mRoomOwnerPlayerID == storeyf.me.playerID, 1);
                if (request2.flag != null)
                {
                    goto Label_0650;
                }
                this.Cancel();
                return;
            Label_0650:
                this.ExecContinue(request2.units);
                self.ResetCheckData();
            Label_0663:
                return;
            }

            public int Seed
            {
                [CompilerGenerated]
                get
                {
                    return this.<Seed>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<Seed>k__BackingField = value;
                    return;
                }
            }

            public long BtlID
            {
                [CompilerGenerated]
                get
                {
                    return this.<BtlID>k__BackingField;
                }
                [CompilerGenerated]
                set
                {
                    this.<BtlID>k__BackingField = value;
                    return;
                }
            }

            [CompilerGenerated]
            private sealed class <Update>c__AnonStorey1EF
            {
                internal SceneBattle.MultiPlayRecvData data;

                public <Update>c__AnonStorey1EF()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__C4(SceneBattle.MultiPlayRecvData r)
                {
                    return (r.b < this.data.b);
                }

                internal bool <>m__C5(SceneBattle.State_MultiPlayContinueBase.MultiPlayContinueRequest r)
                {
                    return (r.playerID == this.data.pid);
                }
            }

            [CompilerGenerated]
            private sealed class <Update>c__AnonStorey1F0
            {
                internal MyPhoton.MyPlayer me;
                internal SceneBattle.State_MultiPlayContinueBase <>f__this;

                public <Update>c__AnonStorey1F0()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__C6(MyPhoton.MyPlayer p)
                {
                    return (p.playerID == this.<>f__this.mRoomOwnerPlayerID);
                }

                internal bool <>m__C7(SceneBattle.State_MultiPlayContinueBase.MultiPlayContinueRequest r)
                {
                    return (r.playerID == this.me.playerID);
                }
            }

            [CompilerGenerated]
            private sealed class <Update>c__AnonStorey1F1
            {
                internal int roomOwnerPlayerID;

                public <Update>c__AnonStorey1F1()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__C8(SceneBattle.State_MultiPlayContinueBase.MultiPlayContinueRequest r)
                {
                    return (r.playerID == this.roomOwnerPlayerID);
                }
            }

            [CompilerGenerated]
            private sealed class <Update>c__AnonStorey1F2
            {
                internal MyPhoton.MyPlayer player;

                public <Update>c__AnonStorey1F2()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__C9(SceneBattle.State_MultiPlayContinueBase.MultiPlayContinueRequest r)
                {
                    return (r.playerID == this.player.playerID);
                }
            }

            protected class MultiPlayContinueRequest
            {
                public int playerID;
                public bool flag;
                public long btlid;
                public int seed;
                public List<int> units;

                public MultiPlayContinueRequest()
                {
                    this.units = new List<int>();
                    base..ctor();
                    return;
                }
            }
        }

        private class State_MultiPlayRevive : SceneBattle.State_MultiPlayContinueBase
        {
            public State_MultiPlayRevive()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                int num;
                Unit unit;
                List<Unit>.Enumerator enumerator;
                QuestParam param;
                int num2;
                num = 0;
                enumerator = self.Battle.Units.GetEnumerator();
            Label_0013:
                try
                {
                    goto Label_003B;
                Label_0018:
                    unit = &enumerator.Current;
                    if (unit.OwnerPlayerIndex <= 0)
                    {
                        goto Label_003B;
                    }
                    if (unit.IsDead == null)
                    {
                        goto Label_003B;
                    }
                    num += 1;
                Label_003B:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0018;
                    }
                    goto Label_0058;
                }
                finally
                {
                Label_004C:
                    ((List<Unit>.Enumerator) enumerator).Dispose();
                }
            Label_0058:
                param = self.Battle.GetQuest();
                num2 = (param != null) ? param.multiDead : 1;
                num2 = Math.Max(1, num2);
                if (num >= num2)
                {
                    goto Label_0096;
                }
                this.Cancel();
                return;
            Label_0096:
                return;
            }

            protected override void Cancel()
            {
                base.self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }

            protected override void CloseUI(bool roomOwner, bool decided)
            {
                if (roomOwner == null)
                {
                    goto Label_000B;
                }
                goto Label_001B;
            Label_000B:
                base.self.mBattleUI_MultiPlay.HideWaitRevive();
            Label_001B:
                return;
            }

            protected override void ExecContinue(List<int> units)
            {
                int num;
                Unit unit;
                if (units == null)
                {
                    goto Label_008A;
                }
                num = 0;
                goto Label_007E;
            Label_000D:
                if (units[num] < 0)
                {
                    goto Label_007A;
                }
                if (units[num] < base.self.Battle.AllUnits.Count)
                {
                    goto Label_0040;
                }
                goto Label_007A;
            Label_0040:
                unit = base.self.Battle.AllUnits[units[num]];
                if (unit == null)
                {
                    goto Label_007A;
                }
                if (unit.IsDead != null)
                {
                    goto Label_0073;
                }
                goto Label_007A;
            Label_0073:
                unit.ReqRevive = 1;
            Label_007A:
                num += 1;
            Label_007E:
                if (num < units.Count)
                {
                    goto Label_000D;
                }
            Label_008A:
                base.self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }

            protected override void OpenUI(bool roomOwner)
            {
                if (roomOwner == null)
                {
                    goto Label_001B;
                }
                base.self.mBattleUI_MultiPlay.StartSelectRevive();
                goto Label_002B;
            Label_001B:
                base.self.mBattleUI_MultiPlay.ShowWaitRevive();
            Label_002B:
                return;
            }
        }

        private class State_MultiPlaySync : State<SceneBattle>
        {
            private bool mSend;
            private bool mSendResume;

            public State_MultiPlaySync()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                MyPhoton photon;
                photon = PunMonoSingleton<MyPhoton>.Instance;
                this.mSend = 0;
                this.mSendResume = 0;
                if (photon.GetCurrentRoom().playerCount <= 1)
                {
                    goto Label_0030;
                }
                self.mBattleUI_MultiPlay.OnOtherPlayerSyncStart();
            Label_0030:
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            private void SendSync()
            {
                MyPhoton photon;
                byte[] buffer;
                if (MonoSingleton<GameManager>.Instance.AudienceMode == null)
                {
                    goto Label_0010;
                }
                return;
            Label_0010:
                if (base.self.mRestSyncInterval <= 0f)
                {
                    goto Label_0026;
                }
                return;
            Label_0026:
                base.self.mRestSyncInterval = base.self.SYNC_INTERVAL;
                photon = PunMonoSingleton<MyPhoton>.Instance;
                buffer = null;
                if (base.self.Battle.ResumeState == null)
                {
                    goto Label_0080;
                }
                buffer = base.self.CreateSendBinary(11, 0, null);
                photon.SendRoomMessageBinary(1, buffer, 0, 0);
                this.mSendResume = 1;
                goto Label_009B;
            Label_0080:
                buffer = base.self.CreateSendBinary(10, 0, null);
                photon.SendRoomMessageBinary(1, buffer, 0, 0);
            Label_009B:
                if (base.self.ResumeSuccess == null)
                {
                    goto Label_00DC;
                }
                base.self.SendResumeSuccess();
                if (base.self.IsExistResume == null)
                {
                    goto Label_00DC;
                }
                base.self.ResetSync();
                base.self.GotoState<SceneBattle.State_SyncResume>();
            Label_00DC:
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mSend == null)
                {
                    goto Label_0026;
                }
                if (this.mSendResume != null)
                {
                    goto Label_002C;
                }
                if (self.Battle.ResumeState == null)
                {
                    goto Label_002C;
                }
            Label_0026:
                this.SendSync();
            Label_002C:
                if (self.CheckSync() != null)
                {
                    goto Label_0042;
                }
                if (self.CheckResumeSync() == null)
                {
                    goto Label_0096;
                }
            Label_0042:
                self.ResetSync();
                if (self.ResumeSuccess == null)
                {
                    goto Label_0068;
                }
                self.Battle.StartOrder(0, 0, 1);
                self.ResumeSuccess = 0;
            Label_0068:
                if (self.IsExistResume == null)
                {
                    goto Label_0085;
                }
                self.Battle.SetResumeWait();
                self.GotoState<SceneBattle.State_SyncResume>();
                return;
            Label_0085:
                self.mBattleUI_MultiPlay.OnOtherPlayerSyncEnd();
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_0096:
                return;
            }
        }

        private class State_OrdealChangeNext : State<SceneBattle>
        {
            private bool mIsFinished;

            public State_OrdealChangeNext()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.mIsFinished = 0;
                self.StartCoroutine(this.StepOrdealChangeNextTeam());
                return;
            }

            [DebuggerHidden]
            private IEnumerator StepOrdealChangeNextTeam()
            {
                <StepOrdealChangeNextTeam>c__Iterator3B iteratorb;
                iteratorb = new <StepOrdealChangeNextTeam>c__Iterator3B();
                iteratorb.<>f__this = this;
                return iteratorb;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mIsFinished != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            }

            [CompilerGenerated]
            private sealed class <StepOrdealChangeNextTeam>c__Iterator3B : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal List<Unit>.Enumerator <$s_277>__0;
                internal Unit <unit>__1;
                internal TacticsUnitController <tuc>__2;
                internal List<Unit>.Enumerator <$s_278>__3;
                internal Unit <unit>__4;
                internal TacticsUnitController <tuc>__5;
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_OrdealChangeNext <>f__this;

                public <StepOrdealChangeNextTeam>c__Iterator3B()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0029;

                        case 1:
                            goto Label_0041;

                        case 2:
                            goto Label_0078;

                        case 3:
                            goto Label_0261;
                    }
                    goto Label_027E;
                Label_0029:
                    goto Label_0041;
                Label_002E:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_0280;
                Label_0041:
                    if (this.<>f__this.self.IsCameraMoving != null)
                    {
                        goto Label_002E;
                    }
                    GameUtility.FadeOut(1f);
                    goto Label_0078;
                Label_0065:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0280;
                Label_0078:
                    if (GameUtility.IsScreenFading != null)
                    {
                        goto Label_0065;
                    }
                    this.<>f__this.self.CloseBattleUI();
                    this.<$s_277>__0 = this.<>f__this.self.Battle.Player.GetEnumerator();
                Label_00B2:
                    try
                    {
                        goto Label_0150;
                    Label_00B7:
                        this.<unit>__1 = &this.<$s_277>__0.Current;
                        if (this.<unit>__1.IsDead != null)
                        {
                            goto Label_0150;
                        }
                        if (this.<unit>__1.IsUnitFlag(0x1000000) == null)
                        {
                            goto Label_00F2;
                        }
                        goto Label_0150;
                    Label_00F2:
                        this.<tuc>__2 = this.<>f__this.self.FindUnitController(this.<unit>__1);
                        if ((this.<tuc>__2 == null) == null)
                        {
                            goto Label_0124;
                        }
                        goto Label_0150;
                    Label_0124:
                        this.<>f__this.self.mTacticsUnits.Remove(this.<tuc>__2);
                        GameUtility.DestroyGameObject(this.<tuc>__2.get_gameObject());
                    Label_0150:
                        if (&this.<$s_277>__0.MoveNext() != null)
                        {
                            goto Label_00B7;
                        }
                        goto Label_0176;
                    }
                    finally
                    {
                    Label_0165:
                        ((List<Unit>.Enumerator) this.<$s_277>__0).Dispose();
                    }
                Label_0176:
                    this.<>f__this.self.Battle.OrdealChangeNext();
                    this.<>f__this.self.RefreshJumpSpots();
                    this.<$s_278>__3 = this.<>f__this.self.Battle.Player.GetEnumerator();
                Label_01BB:
                    try
                    {
                        goto Label_020E;
                    Label_01C0:
                        this.<unit>__4 = &this.<$s_278>__3.Current;
                        this.<tuc>__5 = this.<>f__this.self.FindUnitController(this.<unit>__4);
                        if ((this.<tuc>__5 == null) == null)
                        {
                            goto Label_0203;
                        }
                        goto Label_020E;
                    Label_0203:
                        this.<tuc>__5.UpdateBadStatus();
                    Label_020E:
                        if (&this.<$s_278>__3.MoveNext() != null)
                        {
                            goto Label_01C0;
                        }
                        goto Label_0234;
                    }
                    finally
                    {
                    Label_0223:
                        ((List<Unit>.Enumerator) this.<$s_278>__3).Dispose();
                    }
                Label_0234:
                    UnitQueue.Instance.Refresh(0);
                    GameUtility.FadeIn(1f);
                    goto Label_0261;
                Label_024E:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_0280;
                Label_0261:
                    if (GameUtility.IsScreenFading != null)
                    {
                        goto Label_024E;
                    }
                    this.<>f__this.mIsFinished = 1;
                    this.$PC = -1;
                Label_027E:
                    return 0;
                Label_0280:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_PickupGimmick : State<SceneBattle>
        {
            private SceneBattle mScene;
            private TacticsUnitController mUnitController;
            private TacticsUnitController mGimmickController;
            private Unit.UnitDrop mDrop;
            private MapPickup mPickup;
            private bool mLoadFinished;
            private bool mItemDrop;
            private LogMapEvent mLog;
            private DropItemEffect mDropItemEffect;

            public State_PickupGimmick()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                Quaternion quaternion;
                this.mLog = (LogMapEvent) self.mBattle.Logs.Peek;
                this.mScene = self;
                this.mGimmickController = self.FindUnitController(this.mLog.target);
                this.mUnitController = self.FindUnitController(this.mLog.self);
                if ((this.mUnitController == null) == null)
                {
                    goto Label_006E;
                }
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_006E:
                if (this.mLog.target == null)
                {
                    goto Label_008E;
                }
                this.mLog.target.BeginDropDirection();
            Label_008E:
                self.mUpdateCameraPosition = 1;
                self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                self.InterpCameraTarget(this.mUnitController);
                this.mGimmickController.ResetScale();
                this.mDrop = this.mLog.target.Drop;
                if (this.mDrop == null)
                {
                    goto Label_0127;
                }
                this.mItemDrop = (this.mGimmickController.Unit == null) ? 0 : this.mGimmickController.Unit.CheckItemDrop(0);
                if (this.mItemDrop == null)
                {
                    goto Label_0127;
                }
                SceneBattle.Instance.AddTreasureCount(1);
            Label_0127:
                this.mUnitController.BeginLoadPickupAnimation();
                this.mPickup = this.mGimmickController.GetComponentInChildren<MapPickup>();
                this.mPickup.OnPickup = new MapPickup.PickupEvent(this.OnPickupDone);
                this.mGimmickController.BeginLoadPickupAnimation();
                if (this.mItemDrop == null)
                {
                    goto Label_0228;
                }
                if (this.mDrop == null)
                {
                    goto Label_0228;
                }
                if (this.mDrop.items.Count <= 0)
                {
                    goto Label_0228;
                }
                this.mDropItemEffect = Object.Instantiate(this.mScene.mTreasureDropTemplate, this.mGimmickController.get_transform().get_position() + this.mPickup.DropEffectOffset, new Quaternion()) as DropItemEffect;
                if ((this.mDropItemEffect != null) == null)
                {
                    goto Label_0228;
                }
                this.mDropItemEffect.get_transform().SetParent(self.OverlayCanvas.get_transform(), 0);
                this.mDropItemEffect.get_gameObject().GetComponent<DropItemIcon>().UpdateValue();
                this.mDropItemEffect.get_gameObject().SetActive(0);
            Label_0228:
                return;
            }

            public override void End(SceneBattle self)
            {
                this.mPickup.OnPickup = null;
                this.mGimmickController.PlayIdle(0f);
                this.mGimmickController.UnloadPickupAnimation();
                this.mGimmickController.get_gameObject().SetActive(0);
                self.RefreshUnitStatus(this.mUnitController.Unit);
                if (this.mLog.target == null)
                {
                    goto Label_0069;
                }
                this.mLog.target.EndDropDirection();
            Label_0069:
                return;
            }

            [DebuggerHidden]
            private IEnumerator GemPramChangePopup()
            {
                <GemPramChangePopup>c__Iterator3A iteratora;
                iteratora = new <GemPramChangePopup>c__Iterator3A();
                iteratora.<>f__this = this;
                return iteratora;
            }

            private void OnPickupDone()
            {
                Transform transform;
                Vector3 vector;
                DropGoldEffect effect;
                if (this.mUnitController.Unit.Side == null)
                {
                    goto Label_0016;
                }
                return;
            Label_0016:
                if (this.mDrop == null)
                {
                    goto Label_012A;
                }
                vector = this.mGimmickController.get_transform().get_position();
                if (this.mDrop.gold <= 0)
                {
                    goto Label_008D;
                }
                effect = Object.Instantiate(this.mScene.mTreasureGoldTemplate, vector, Quaternion.get_identity()) as DropGoldEffect;
                effect.DropOwner = this.mLog.target;
                effect.Gold = this.mDrop.gold;
            Label_008D:
                if (this.mDrop.items.Count <= 0)
                {
                    goto Label_0102;
                }
                if (this.mItemDrop == null)
                {
                    goto Label_0102;
                }
                this.mDropItemEffect.get_gameObject().SetActive(1);
                this.mDropItemEffect.DropOwner = this.mLog.target;
                this.mDropItemEffect.DropItem = this.mDrop.items[this.mDrop.items.Count - 1];
            Label_0102:
                if (this.mDrop.gems <= 0)
                {
                    goto Label_012A;
                }
                base.self.StartCoroutine(this.GemPramChangePopup());
            Label_012A:
                this.mGimmickController.PlayTakenAnimation();
                return;
            }

            public override void Update(SceneBattle self)
            {
                LogMapEvent event2;
                if (this.mUnitController.IsLoading == null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                if (this.mGimmickController.IsLoading == null)
                {
                    goto Label_0022;
                }
                return;
            Label_0022:
                this.mGimmickController.CollideGround = 0;
                if (this.mLoadFinished != null)
                {
                    goto Label_00A0;
                }
                this.mLoadFinished = 1;
                event2 = (LogMapEvent) self.mBattle.Logs.Peek;
                if (event2.type != 3)
                {
                    goto Label_008A;
                }
                MonoSingleton<MySound>.Instance.PlaySEOneShot("SE_0504", 0f);
                MonoSingleton<MySound>.Instance.PlaySEOneShot("SE_0501", 0f);
            Label_008A:
                this.mUnitController.PlayPickup(this.mGimmickController.get_gameObject());
            Label_00A0:
                if (this.mUnitController.isIdle == null)
                {
                    goto Label_00BD;
                }
                self.RemoveLog();
                self.FinishGimmickState();
                return;
            Label_00BD:
                return;
            }

            [CompilerGenerated]
            private sealed class <GemPramChangePopup>c__Iterator3A : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal GameObject <effect>__0;
                internal ParamTypes[] <buffs>__1;
                internal ParamTypes <param>__2;
                internal int <i>__3;
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_PickupGimmick <>f__this;

                public <GemPramChangePopup>c__Iterator3A()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    ParamTypes types;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_00C2;

                        case 2:
                            goto Label_0181;
                    }
                    goto Label_02BC;
                Label_0025:
                    SceneBattle.Instance.PopupHpHealNumber(this.<>f__this.mUnitController.CenterPosition, this.<>f__this.mDrop.gems);
                    this.<effect>__0 = Object.Instantiate(this.<>f__this.mScene.mMapAddGemEffectTemplate, this.<>f__this.mUnitController.CenterPosition, this.<>f__this.mUnitController.get_transform().get_rotation()) as GameObject;
                    GameUtility.RequireComponent<OneShotParticle>(this.<effect>__0);
                    goto Label_00C2;
                Label_00AB:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 1;
                    goto Label_02BE;
                Label_00C2:
                    if ((this.<effect>__0 != null) != null)
                    {
                        goto Label_00AB;
                    }
                    if (this.<>f__this.mLog.heal <= 0)
                    {
                        goto Label_0181;
                    }
                    SceneBattle.Instance.PopupHpHealNumber(this.<>f__this.mUnitController.CenterPosition, this.<>f__this.mLog.heal);
                    this.<effect>__0 = Object.Instantiate(this.<>f__this.mScene.mAutoHealEffectTemplate, this.<>f__this.mUnitController.CenterPosition, this.<>f__this.mUnitController.get_transform().get_rotation()) as GameObject;
                    GameUtility.RequireComponent<OneShotParticle>(this.<effect>__0);
                    goto Label_0181;
                Label_016A:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 2;
                    goto Label_02BE;
                Label_0181:
                    if ((this.<effect>__0 != null) != null)
                    {
                        goto Label_016A;
                    }
                    if (this.<>f__this.mLog.IsBuffEffect() != null)
                    {
                        goto Label_01AC;
                    }
                    goto Label_02BC;
                Label_01AC:
                    this.<buffs>__1 = (ParamTypes[]) Enum.GetValues(typeof(ParamTypes));
                    this.<param>__2 = 0;
                    this.<i>__3 = 0;
                    goto Label_0221;
                Label_01D9:
                    if (this.<>f__this.mLog.buff.CheckBit(this.<buffs>__1[this.<i>__3]) == null)
                    {
                        goto Label_0213;
                    }
                    this.<param>__2 = this.<buffs>__1[this.<i>__3];
                Label_0213:
                    this.<i>__3 += 1;
                Label_0221:
                    if (this.<i>__3 < ((int) this.<buffs>__1.Length))
                    {
                        goto Label_01D9;
                    }
                    switch ((this.<param>__2 - 5))
                    {
                        case 0:
                            goto Label_0270;

                        case 1:
                            goto Label_0270;

                        case 2:
                            goto Label_0270;

                        case 3:
                            goto Label_0270;

                        case 4:
                            goto Label_0270;

                        case 5:
                            goto Label_0270;

                        case 6:
                            goto Label_0270;

                        case 7:
                            goto Label_0270;

                        case 8:
                            goto Label_0270;

                        case 9:
                            goto Label_0270;
                    }
                    goto Label_02B0;
                Label_0270:
                    SceneBattle.Instance.PopupParamChange(this.<>f__this.mUnitController.CenterPosition, this.<>f__this.mLog.buff, this.<>f__this.mLog.debuff, 0);
                    goto Label_02B5;
                Label_02B0:;
                Label_02B5:
                    this.$PC = -1;
                Label_02BC:
                    return 0;
                Label_02BE:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_PreMapviewV2 : State<SceneBattle>
        {
            public State_PreMapviewV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.UIParam_TargetValid = 0;
                self.mBattleUI.OnMapStart();
                self.GotoState_WaitSignal<SceneBattle.State_SelectTargetV2>();
                return;
            }
        }

        private class State_PrepareCast : State<SceneBattle>
        {
            public State_PrepareCast()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                LogCast cast;
                ECastTypes types;
                cast = self.Battle.Logs.Peek as LogCast;
                switch (cast.type)
                {
                    case 0:
                        goto Label_0034;

                    case 1:
                        goto Label_004C;

                    case 2:
                        goto Label_0064;
                }
                goto Label_006F;
            Label_0034:
                this.EnterChant(cast);
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                goto Label_006F;
            Label_004C:
                this.EnterChant(cast);
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
                goto Label_006F;
            Label_0064:
                self.GotoState<SceneBattle.State_JumpCastStart>();
            Label_006F:
                return;
            }

            private void EnterChant(LogCast Log)
            {
                TacticsUnitController controller;
                controller = base.self.FindUnitController(Log.self);
                if ((controller != null) == null)
                {
                    goto Label_0029;
                }
                controller.ChargeIcon.Open();
            Label_0029:
                if (Log.self == null)
                {
                    goto Label_0064;
                }
                if (Log.self.CastSkill == null)
                {
                    goto Label_0064;
                }
                if (Log.self.CastSkill.TeleportType == null)
                {
                    goto Label_0064;
                }
                base.self.RefreshJumpSpots();
            Label_0064:
                return;
            }
        }

        private class State_PrepareSkill : State<SceneBattle>
        {
            private bool mLoadSplash;
            private float mWaitCount;
            private bool mIsLoadTransformUnit;
            private bool mIsLoadBreakObjUnit;

            public State_PrepareSkill()
            {
                base..ctor();
                return;
            }

            [CompilerGenerated]
            private void <Begin>m__C0()
            {
                this.mIsLoadTransformUnit = 0;
                return;
            }

            [CompilerGenerated]
            private void <Begin>m__C1()
            {
                this.mIsLoadBreakObjUnit = 0;
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                LogSkill skill;
                SkillData data;
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                GridMap<bool> map;
                Color32 color;
                GridMap<Color32> map2;
                int num;
                int num2;
                GridMap<bool> map3;
                Color32 color2;
                GridMap<Color32> map4;
                int num3;
                int num4;
                skill = self.mBattle.Logs.Peek as LogSkill;
                data = skill.skill;
                if (data != null)
                {
                    goto Label_002E;
                }
                DebugUtility.LogError("SkillParam が存在しません。");
                return;
            Label_002E:
                this.mLoadSplash = skill.is_append == 0;
                self.LoadShieldEffects();
                unit = skill.self;
                controller = self.FindUnitController(unit);
                this.mIsLoadTransformUnit = data.IsTransformSkill();
                if (this.mIsLoadTransformUnit == null)
                {
                    goto Label_00BB;
                }
                if (skill.targets == null)
                {
                    goto Label_00B4;
                }
                if (skill.targets.Count == null)
                {
                    goto Label_00B4;
                }
                self.StartCoroutine(loadTransformUnit(self, skill.targets[0].target, controller, new Action(this.<Begin>m__C0)));
                goto Label_00BB;
            Label_00B4:
                this.mIsLoadTransformUnit = 0;
            Label_00BB:
                this.mIsLoadBreakObjUnit = data.IsSetBreakObjSkill();
                if (this.mIsLoadBreakObjUnit == null)
                {
                    goto Label_0123;
                }
                if (skill.targets == null)
                {
                    goto Label_011C;
                }
                if (skill.targets.Count == null)
                {
                    goto Label_011C;
                }
                self.StartCoroutine(loadBreakObjUnit(self, skill.targets[0].target, new Action(this.<Begin>m__C1)));
                goto Label_0123;
            Label_011C:
                this.mIsLoadBreakObjUnit = 0;
            Label_0123:
                if (data.SkillParam.absorb_damage_rate <= 0)
                {
                    goto Label_0188;
                }
                if ((self.mDrainMpEffectTemplate != null) == null)
                {
                    goto Label_016B;
                }
                if (data.SkillParam.IsJewelAttack() == null)
                {
                    goto Label_016B;
                }
                controller.SetDrainEffect(self.mDrainMpEffectTemplate);
                goto Label_0188;
            Label_016B:
                if ((self.mDrainHpEffectTemplate != null) == null)
                {
                    goto Label_0188;
                }
                controller.SetDrainEffect(self.mDrainHpEffectTemplate);
            Label_0188:
                if (self.Battle.IsUnitAuto(unit) != null)
                {
                    goto Label_01A9;
                }
                if (self.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_033B;
                }
            Label_01A9:
                if (data.IsTransformSkill() != null)
                {
                    goto Label_033B;
                }
                vector = self.CalcCoord(controller.CenterPosition);
                map = self.Battle.CreateSelectGridMap(unit, &vector.x, &vector.y, data);
                color = &GameSettings.Instance.Colors.AttackArea;
                map2 = new GridMap<Color32>(map.w, map.h);
                num = 0;
                goto Label_0251;
            Label_0212:
                num2 = 0;
                goto Label_023D;
            Label_021A:
                if (map.get(num, num2) == null)
                {
                    goto Label_0237;
                }
                map2.set(num, num2, color);
            Label_0237:
                num2 += 1;
            Label_023D:
                if (num2 < map.h)
                {
                    goto Label_021A;
                }
                num += 1;
            Label_0251:
                if (num < map.w)
                {
                    goto Label_0212;
                }
                map3 = self.mBattle.CreateScopeGridMap(unit, &vector.x, &vector.y, &skill.pos.x, &skill.pos.y, data);
                color2 = &GameSettings.Instance.Colors.AttackArea2;
                map4 = new GridMap<Color32>(map3.w, map3.h);
                num3 = 0;
                goto Label_0304;
            Label_02C5:
                num4 = 0;
                goto Label_02F0;
            Label_02CD:
                if (map3.get(num3, num4) == null)
                {
                    goto Label_02EA;
                }
                map4.set(num3, num4, color2);
            Label_02EA:
                num4 += 1;
            Label_02F0:
                if (num4 < map3.h)
                {
                    goto Label_02CD;
                }
                num3 += 1;
            Label_0304:
                if (num3 < map3.w)
                {
                    goto Label_02C5;
                }
                self.mTacticsSceneRoot.ShowGridLayer(1, map2, 1);
                self.mTacticsSceneRoot.ShowGridLayer(2, map4, 0);
                this.mWaitCount = 1f;
            Label_033B:
                self.DeleteOnGimmickIcon();
                return;
            }

            [DebuggerHidden]
            private IEnumerator cutinVoice(Unit unit, SkillData skill)
            {
                <cutinVoice>c__Iterator3F iteratorf;
                iteratorf = new <cutinVoice>c__Iterator3F();
                iteratorf.unit = unit;
                iteratorf.skill = skill;
                iteratorf.<$>unit = unit;
                iteratorf.<$>skill = skill;
                iteratorf.<>f__this = this;
                return iteratorf;
            }

            [DebuggerHidden]
            public static IEnumerator loadBreakObjUnit(SceneBattle self, Unit unit, Action callback)
            {
                <loadBreakObjUnit>c__Iterator41 iterator;
                iterator = new <loadBreakObjUnit>c__Iterator41();
                iterator.unit = unit;
                iterator.self = self;
                iterator.callback = callback;
                iterator.<$>unit = unit;
                iterator.<$>self = self;
                iterator.<$>callback = callback;
                return iterator;
            }

            [DebuggerHidden]
            public static IEnumerator loadTransformUnit(SceneBattle self, Unit unit, TacticsUnitController bef_tuc, Action callback)
            {
                <loadTransformUnit>c__Iterator40 iterator;
                iterator = new <loadTransformUnit>c__Iterator40();
                iterator.unit = unit;
                iterator.self = self;
                iterator.bef_tuc = bef_tuc;
                iterator.callback = callback;
                iterator.<$>unit = unit;
                iterator.<$>self = self;
                iterator.<$>bef_tuc = bef_tuc;
                iterator.<$>callback = callback;
                return iterator;
            }

            [DebuggerHidden]
            private IEnumerator PrepareSkill(Unit unit, SkillData skill)
            {
                <PrepareSkill>c__Iterator3E iteratore;
                iteratore = new <PrepareSkill>c__Iterator3E();
                iteratore.skill = skill;
                iteratore.unit = unit;
                iteratore.<$>skill = skill;
                iteratore.<$>unit = unit;
                iteratore.<>f__this = this;
                return iteratore;
            }

            public override void Update(SceneBattle self)
            {
                float num;
                float num2;
                LogSkill skill;
                SkillData data;
                Unit unit;
                Unit unit2;
                if (this.mIsLoadTransformUnit == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if (this.mIsLoadBreakObjUnit == null)
                {
                    goto Label_0018;
                }
                return;
            Label_0018:
                num2 = GameSettings.Instance.AiUnit_SkillWait * Time.get_deltaTime();
                this.mWaitCount -= num2;
                if (0f >= this.mWaitCount)
                {
                    goto Label_004A;
                }
                return;
            Label_004A:
                skill = self.mBattle.Logs.Peek as LogSkill;
                data = skill.skill;
                self.mCollaboMainUnit = skill.self;
                self.mCollaboTargetTuc = null;
                self.mIsInstigatorSubUnit = 0;
                if (skill.skill.IsCollabo == null)
                {
                    goto Label_00FC;
                }
                unit = skill.self.GetUnitUseCollaboSkill(skill.skill, skill.self.x, skill.self.y);
                if (unit == null)
                {
                    goto Label_00FC;
                }
                self.mCollaboTargetTuc = self.FindUnitController(unit);
                if ((unit.UnitParam.iname == data.SkillParam.CollaboMainId) == null)
                {
                    goto Label_00FC;
                }
                self.mIsInstigatorSubUnit = 1;
            Label_00FC:
                self.StartCoroutine(this.PrepareSkill(skill.self, data));
                unit2 = skill.self;
                if (self.Battle.IsUnitAuto(unit2) != null)
                {
                    goto Label_013A;
                }
                if (self.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_0152;
                }
            Label_013A:
                self.mTacticsSceneRoot.HideGridLayer(1);
                self.mTacticsSceneRoot.HideGridLayer(2);
            Label_0152:
                if (data.IsMapSkill() == null)
                {
                    goto Label_0168;
                }
                self.GotoState<SceneBattle.State_Map_PrepareSkill>();
                goto Label_0184;
            Label_0168:
                self.mBattleUI.OnBattleStart();
                self.mBattleUI.OnCommandSelect();
                self.GotoState_WaitSignal<SceneBattle.State_Battle_PrepareSkill>();
            Label_0184:
                return;
            }

            [CompilerGenerated]
            private sealed class <cutinVoice>c__Iterator3F : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal Unit unit;
                internal Unit <unit_main>__0;
                internal Unit <unit_sub>__1;
                internal Unit <unit_tmp>__2;
                internal SkillData skill;
                internal int $PC;
                internal object $current;
                internal Unit <$>unit;
                internal SkillData <$>skill;
                internal SceneBattle.State_PrepareSkill <>f__this;

                public <cutinVoice>c__Iterator3F()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0021;

                        case 1:
                            goto Label_00E9;
                    }
                    goto Label_010B;
                Label_0021:
                    if (this.<>f__this.self.mCollaboTargetTuc != null)
                    {
                        goto Label_0040;
                    }
                    goto Label_010B;
                Label_0040:
                    this.<unit_main>__0 = this.unit;
                    this.<unit_sub>__1 = this.<>f__this.self.mCollaboTargetTuc.Unit;
                    if (this.<>f__this.self.mIsInstigatorSubUnit == null)
                    {
                        goto Label_00A0;
                    }
                    this.<unit_tmp>__2 = this.<unit_main>__0;
                    this.<unit_main>__0 = this.<unit_sub>__1;
                    this.<unit_sub>__1 = this.<unit_tmp>__2;
                Label_00A0:
                    this.<unit_main>__0.PlayBattleVoice(this.skill.SkillParam.CollaboVoiceId);
                    this.$current = new WaitForSeconds(((float) this.skill.SkillParam.CollaboVoicePlayDelayFrame) / 30f);
                    this.$PC = 1;
                    goto Label_010D;
                Label_00E9:
                    this.<unit_sub>__1.PlayBattleVoice(this.skill.SkillParam.CollaboVoiceId);
                    this.$PC = -1;
                Label_010B:
                    return 0;
                Label_010D:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <loadBreakObjUnit>c__Iterator41 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal Unit unit;
                internal GameObject <new_unit>__0;
                internal Transform <tr>__1;
                internal SceneBattle self;
                internal TacticsUnitController <tuc>__2;
                internal int <job_idx>__3;
                internal Action callback;
                internal int $PC;
                internal object $current;
                internal Unit <$>unit;
                internal SceneBattle <$>self;
                internal Action <$>callback;

                public <loadBreakObjUnit>c__Iterator41()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    Type[] typeArray1;
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0025;

                        case 1:
                            goto Label_0132;

                        case 2:
                            goto Label_0191;
                    }
                    goto Label_0241;
                Label_0025:
                    if (this.unit != null)
                    {
                        goto Label_0035;
                    }
                    goto Label_0241;
                Label_0035:
                    typeArray1 = new Type[] { typeof(TacticsUnitController) };
                    this.<new_unit>__0 = new GameObject(this.unit.UnitName, typeArray1);
                    this.<tr>__1 = this.<new_unit>__0.get_transform();
                    this.<tr>__1.SetParent(this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<tr>__1.set_position(this.self.CalcGridCenter(this.self.Battle.GetUnitGridPosition(this.unit)));
                    this.<tr>__1.set_rotation(SRPG_Extensions.ToRotation(this.unit.Direction));
                    this.<tuc>__2 = this.<new_unit>__0.GetComponent<TacticsUnitController>();
                    this.self.mTacticsUnits.Add(this.<tuc>__2);
                    this.<tuc>__2.SetupUnit(this.unit);
                    this.<tuc>__2.KeepUnitHidden = 1;
                    goto Label_0132;
                Label_011B:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 1;
                    goto Label_0243;
                Label_0132:
                    if (this.<tuc>__2.IsLoading != null)
                    {
                        goto Label_011B;
                    }
                    if (this.<tuc>__2.Unit.IsBreakObj == null)
                    {
                        goto Label_01DA;
                    }
                    this.<job_idx>__3 = 1;
                    goto Label_01AF;
                Label_0163:
                    if (this.<tuc>__2.LoadAddModels(this.<job_idx>__3) == null)
                    {
                        goto Label_01A1;
                    }
                    goto Label_0191;
                Label_017E:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0243;
                Label_0191:
                    if (this.<tuc>__2.IsLoading != null)
                    {
                        goto Label_017E;
                    }
                Label_01A1:
                    this.<job_idx>__3 += 1;
                Label_01AF:
                    if (this.<job_idx>__3 < this.<tuc>__2.Unit.UnitParam.search)
                    {
                        goto Label_0163;
                    }
                    this.<tuc>__2.ReflectDispModel();
                Label_01DA:
                    this.<tuc>__2.InitHPGauge(this.self.OverlayCanvas, this.self.GetGaugeTemplateFor(this.unit));
                    this.<tuc>__2.ShowHPGauge(0);
                    this.unit.LoadBattleVoice();
                    this.<tuc>__2.SetVisible(0);
                    if (this.callback == null)
                    {
                        goto Label_023A;
                    }
                    this.callback();
                Label_023A:
                    this.$PC = -1;
                Label_0241:
                    return 0;
                Label_0243:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <loadTransformUnit>c__Iterator40 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal Unit unit;
                internal GameObject <new_unit>__0;
                internal Transform <tr>__1;
                internal SceneBattle self;
                internal TacticsUnitController <tuc>__2;
                internal TacticsUnitController bef_tuc;
                internal Action callback;
                internal int $PC;
                internal object $current;
                internal Unit <$>unit;
                internal SceneBattle <$>self;
                internal TacticsUnitController <$>bef_tuc;
                internal Action <$>callback;

                public <loadTransformUnit>c__Iterator40()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    Type[] typeArray1;
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0021;

                        case 1:
                            goto Label_0113;
                    }
                    goto Label_01D3;
                Label_0021:
                    if (this.unit != null)
                    {
                        goto Label_0031;
                    }
                    goto Label_01D3;
                Label_0031:
                    typeArray1 = new Type[] { typeof(TacticsUnitController) };
                    this.<new_unit>__0 = new GameObject(this.unit.UnitName, typeArray1);
                    this.<tr>__1 = this.<new_unit>__0.get_transform();
                    this.<tr>__1.SetParent(this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<tr>__1.set_position(this.self.CalcGridCenter(this.self.Battle.GetUnitGridPosition(this.unit)));
                    this.<tuc>__2 = this.<new_unit>__0.GetComponent<TacticsUnitController>();
                    this.self.mTacticsUnits.Add(this.<tuc>__2);
                    this.<tuc>__2.SetupUnit(this.unit);
                    this.<tuc>__2.KeepUnitHidden = 1;
                    goto Label_0113;
                Label_00FC:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 1;
                    goto Label_01D5;
                Label_0113:
                    if (this.<tuc>__2.IsLoading != null)
                    {
                        goto Label_00FC;
                    }
                    this.<tuc>__2.InitHPGauge(this.self.OverlayCanvas, this.self.GetGaugeTemplateFor(this.unit));
                    this.<tuc>__2.ShowHPGauge(0);
                    this.unit.LoadBattleVoice();
                    if ((this.bef_tuc != null) == null)
                    {
                        goto Label_01AA;
                    }
                    this.<tuc>__2.AutoUpdateRotation = 0;
                    this.<tuc>__2.get_transform().set_rotation(this.bef_tuc.get_transform().get_rotation());
                    this.bef_tuc.ShowHPGauge(0);
                Label_01AA:
                    this.<tuc>__2.SetVisible(0);
                    if (this.callback == null)
                    {
                        goto Label_01CC;
                    }
                    this.callback();
                Label_01CC:
                    this.$PC = -1;
                Label_01D3:
                    return 0;
                Label_01D5:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }

            [CompilerGenerated]
            private sealed class <PrepareSkill>c__Iterator3E : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal SkillData skill;
                internal Unit unit;
                internal Unit <unit_main>__0;
                internal Unit <unit_sub>__1;
                internal Unit <unit_tmp>__2;
                internal ArtifactParam <skin_main>__3;
                internal ArtifactParam <skin_sub>__4;
                internal string <job_main>__5;
                internal string <job_sub>__6;
                internal LoadRequest[] <lrs>__7;
                internal int <idx>__8;
                internal Texture2D[] <t2ds>__9;
                internal int <idx>__10;
                internal int <idx>__11;
                internal LoadRequest <req>__12;
                internal ConceptCardParam <ccp>__13;
                internal LoadRequest <cc_img1>__14;
                internal LoadRequest <req>__15;
                internal ArtifactParam <skin>__16;
                internal string <jobId>__17;
                internal LoadRequest <chara_image_1>__18;
                internal LoadRequest <chara_image_2>__19;
                internal LoadRequest <req>__20;
                internal TacticsUnitController <controller>__21;
                internal int <i>__22;
                internal int $PC;
                internal object $current;
                internal SkillData <$>skill;
                internal Unit <$>unit;
                internal SceneBattle.State_PrepareSkill <>f__this;

                public <PrepareSkill>c__Iterator3E()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0039;

                        case 1:
                            goto Label_02F6;

                        case 2:
                            goto Label_03A0;

                        case 3:
                            goto Label_04AA;

                        case 4:
                            goto Label_04FD;

                        case 5:
                            goto Label_0630;

                        case 6:
                            goto Label_065D;

                        case 7:
                            goto Label_06D1;
                    }
                    goto Label_08B2;
                Label_0039:
                    if (this.skill.SkillType != 1)
                    {
                        goto Label_07F1;
                    }
                    if (this.<>f__this.mLoadSplash == null)
                    {
                        goto Label_0741;
                    }
                    if (this.skill.CastType != 2)
                    {
                        goto Label_0081;
                    }
                    this.<>f__this.self.mWaitSkillSplashClose = 1;
                    goto Label_0092;
                Label_0081:
                    this.<>f__this.self.mWaitSkillSplashClose = 0;
                Label_0092:
                    if (this.<>f__this.self.mCollaboTargetTuc == null)
                    {
                        goto Label_0415;
                    }
                    this.<unit_main>__0 = this.unit;
                    this.<unit_sub>__1 = this.<>f__this.self.mCollaboTargetTuc.Unit;
                    if (this.<>f__this.self.mIsInstigatorSubUnit == null)
                    {
                        goto Label_010C;
                    }
                    this.<unit_tmp>__2 = this.<unit_main>__0;
                    this.<unit_main>__0 = this.<unit_sub>__1;
                    this.<unit_sub>__1 = this.<unit_tmp>__2;
                Label_010C:
                    this.<skin_main>__3 = this.<unit_main>__0.UnitData.GetSelectedSkin(-1);
                    this.<skin_sub>__4 = this.<unit_sub>__1.UnitData.GetSelectedSkin(-1);
                    this.<job_main>__5 = this.<unit_main>__0.UnitData.CurrentJobId;
                    this.<job_sub>__6 = this.<unit_sub>__1.UnitData.CurrentJobId;
                    this.<lrs>__7 = new LoadRequest[4];
                    this.<idx>__8 = 0;
                    goto Label_019A;
                Label_017E:
                    this.<lrs>__7[this.<idx>__8] = null;
                    this.<idx>__8 += 1;
                Label_019A:
                    if (this.<idx>__8 < ((int) this.<lrs>__7.Length))
                    {
                        goto Label_017E;
                    }
                    this.<t2ds>__9 = new Texture2D[4];
                    this.<idx>__10 = 0;
                    goto Label_01E1;
                Label_01C5:
                    this.<t2ds>__9[this.<idx>__10] = null;
                    this.<idx>__10 += 1;
                Label_01E1:
                    if (this.<idx>__10 < ((int) this.<t2ds>__9.Length))
                    {
                        goto Label_01C5;
                    }
                    this.<lrs>__7[0] = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinImage2(this.<unit_main>__0.UnitParam, this.<skin_main>__3, this.<job_main>__5));
                    this.<lrs>__7[1] = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinImage2(this.<unit_sub>__1.UnitParam, this.<skin_sub>__4, this.<job_sub>__6));
                    this.<lrs>__7[2] = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinEyeImage(this.<unit_main>__0.UnitParam, this.<skin_main>__3, this.<job_main>__5));
                    this.<lrs>__7[3] = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinEyeImage(this.<unit_sub>__1.UnitParam, this.<skin_sub>__4, this.<job_sub>__6));
                    this.<idx>__11 = 0;
                    goto Label_0345;
                Label_02A4:
                    if (this.<lrs>__7[this.<idx>__11] != null)
                    {
                        goto Label_02BB;
                    }
                    goto Label_0337;
                Label_02BB:
                    if (this.<lrs>__7[this.<idx>__11].isDone != null)
                    {
                        goto Label_02F6;
                    }
                    this.$current = this.<lrs>__7[this.<idx>__11].StartCoroutine();
                    this.$PC = 1;
                    goto Label_08B4;
                Label_02F6:
                    if ((this.<lrs>__7[this.<idx>__11].asset != null) == null)
                    {
                        goto Label_0337;
                    }
                    this.<t2ds>__9[this.<idx>__11] = this.<lrs>__7[this.<idx>__11].asset as Texture2D;
                Label_0337:
                    this.<idx>__11 += 1;
                Label_0345:
                    if (this.<idx>__11 < ((int) this.<lrs>__7.Length))
                    {
                        goto Label_02A4;
                    }
                    this.<req>__12 = GameUtility.LoadResourceAsync<SkillSplashCollabo>("SkillCollabo/collabo_base");
                    if (this.<req>__12 == null)
                    {
                        goto Label_0741;
                    }
                    if (this.<req>__12.isDone != null)
                    {
                        goto Label_03A0;
                    }
                    this.$current = this.<req>__12.StartCoroutine();
                    this.$PC = 2;
                    goto Label_08B4;
                Label_03A0:
                    if ((this.<req>__12.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    this.<>f__this.self.mSkillSplashCollabo = Object.Instantiate(this.<req>__12.asset) as SkillSplashCollabo;
                    this.<>f__this.self.mSkillSplashCollabo.SetCharaImages(this.<t2ds>__9[0], this.<t2ds>__9[1], this.<t2ds>__9[2], this.<t2ds>__9[3]);
                    goto Label_0741;
                Label_0415:
                    this.<ccp>__13 = null;
                    if (string.IsNullOrEmpty(this.skill.CutInConceptCardId) != null)
                    {
                        goto Label_0451;
                    }
                    this.<ccp>__13 = MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(this.skill.CutInConceptCardId);
                Label_0451:
                    if (this.<ccp>__13 == null)
                    {
                        goto Label_0588;
                    }
                    this.<cc_img1>__14 = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.ConceptCard(this.<ccp>__13));
                    if (this.<cc_img1>__14 == null)
                    {
                        goto Label_0741;
                    }
                    if (this.<cc_img1>__14.isDone != null)
                    {
                        goto Label_04AA;
                    }
                    this.$current = this.<cc_img1>__14.StartCoroutine();
                    this.$PC = 3;
                    goto Label_08B4;
                Label_04AA:
                    if ((this.<cc_img1>__14.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    this.<req>__15 = GameUtility.LoadResourceAsync<SkillSplash>("SkillSplash/splash_concept");
                    if (this.<req>__15.isDone != null)
                    {
                        goto Label_04FD;
                    }
                    this.$current = this.<req>__15.StartCoroutine();
                    this.$PC = 4;
                    goto Label_08B4;
                Label_04FD:
                    if (this.<req>__15 == null)
                    {
                        goto Label_0741;
                    }
                    if ((this.<req>__15.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    this.<>f__this.self.mSkillSplash = Object.Instantiate(this.<req>__15.asset) as SkillSplash;
                    if (this.<>f__this.self.mSkillSplash == null)
                    {
                        goto Label_0741;
                    }
                    this.<>f__this.self.mSkillSplash.SetCharaImages(this.<cc_img1>__14.asset as Texture2D, null);
                    goto Label_0741;
                Label_0588:
                    this.<skin>__16 = this.unit.UnitData.GetSelectedSkin(-1);
                    this.<jobId>__17 = this.unit.UnitData.CurrentJobId;
                    this.<chara_image_1>__18 = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinIconMedium(this.unit.UnitParam, this.<skin>__16, this.<jobId>__17));
                    this.<chara_image_2>__19 = GameUtility.LoadResourceAsync<Texture2D>(AssetPath.UnitSkinEyeImage(this.unit.UnitParam, this.<skin>__16, this.<jobId>__17));
                    if (this.<chara_image_1>__18.isDone != null)
                    {
                        goto Label_0630;
                    }
                    this.$current = this.<chara_image_1>__18.StartCoroutine();
                    this.$PC = 5;
                    goto Label_08B4;
                Label_0630:
                    if (this.<chara_image_2>__19.isDone != null)
                    {
                        goto Label_065D;
                    }
                    this.$current = this.<chara_image_2>__19.StartCoroutine();
                    this.$PC = 6;
                    goto Label_08B4;
                Label_065D:
                    if ((this.<chara_image_1>__18.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    if ((this.<chara_image_2>__19.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    this.<req>__20 = GameUtility.LoadResourceAsync<SkillSplash>("SkillSplash/splash_base");
                    if (this.<req>__20 == null)
                    {
                        goto Label_0741;
                    }
                    if (this.<req>__20.isDone != null)
                    {
                        goto Label_06D1;
                    }
                    this.$current = this.<req>__20.StartCoroutine();
                    this.$PC = 7;
                    goto Label_08B4;
                Label_06D1:
                    if ((this.<req>__20.asset != null) == null)
                    {
                        goto Label_0741;
                    }
                    this.<>f__this.self.mSkillSplash = Object.Instantiate(this.<req>__20.asset) as SkillSplash;
                    this.<>f__this.self.mSkillSplash.SetCharaImages(this.<chara_image_1>__18.asset as Texture2D, this.<chara_image_2>__19.asset as Texture2D);
                Label_0741:
                    if (string.IsNullOrEmpty(this.skill.SkillParam.CollaboVoiceId) != null)
                    {
                        goto Label_07E1;
                    }
                    if ((this.skill.SkillParam.CollaboVoiceId != "NONE") == null)
                    {
                        goto Label_07F1;
                    }
                    if (this.<>f__this.self.mCollaboTargetTuc == null)
                    {
                        goto Label_07C1;
                    }
                    this.<>f__this.self.StartCoroutine(this.<>f__this.cutinVoice(this.unit, this.skill));
                    goto Label_07DC;
                Label_07C1:
                    this.unit.PlayBattleVoice(this.skill.SkillParam.CollaboVoiceId);
                Label_07DC:
                    goto Label_07F1;
                Label_07E1:
                    this.unit.PlayBattleVoice("battle_0014");
                Label_07F1:
                    if (this.<>f__this.self.mTutorialTriggers == null)
                    {
                        goto Label_08AB;
                    }
                    this.<controller>__21 = this.<>f__this.self.FindUnitController(this.<>f__this.self.mBattle.CurrentUnit);
                    if ((this.<controller>__21 != null) == null)
                    {
                        goto Label_08AB;
                    }
                    this.<i>__22 = 0;
                    goto Label_088E;
                Label_084E:
                    this.<>f__this.self.mTutorialTriggers[this.<i>__22].OnUnitSkillStart(this.unit, this.<controller>__21.Unit.TurnCount);
                    this.<i>__22 += 1;
                Label_088E:
                    if (this.<i>__22 < ((int) this.<>f__this.self.mTutorialTriggers.Length))
                    {
                        goto Label_084E;
                    }
                Label_08AB:
                    this.$PC = -1;
                Label_08B2:
                    return 0;
                Label_08B4:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_PreQuestResult : State<SceneBattle>
        {
            public State_PreQuestResult()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                BattleCore.QuestResult result;
                MyPhoton photon;
                bool flag;
                MyPhoton photon2;
                Unit unit;
                Unit unit2;
                bool flag2;
                BattleMap map;
                <Begin>c__AnonStorey1ED storeyed;
                BattleCore.QuestResult result2;
                storeyed = new <Begin>c__AnonStorey1ED();
                storeyed.self = self;
                result = storeyed.self.Battle.GetQuestResult();
                if (storeyed.self.IsPlayingArenaQuest != null)
                {
                    goto Label_0049;
                }
                storeyed.self.SaveResult();
                GlobalVars.LastQuestResult.Set(result);
            Label_0049:
                if (storeyed.self.Battle.IsMultiTower == null)
                {
                    goto Label_0077;
                }
                photon = PunMonoSingleton<MyPhoton>.Instance;
                if ((photon != null) == null)
                {
                    goto Label_0077;
                }
                photon.ForceCloseRoom();
            Label_0077:
                result2 = result;
                switch ((result2 - 1))
                {
                    case 0:
                        goto Label_0098;

                    case 1:
                        goto Label_031D;

                    case 2:
                        goto Label_0698;

                    case 3:
                        goto Label_0618;
                }
                goto Label_0698;
            Label_0098:
                if ((((storeyed.self.Battle.IsMultiPlay == null) || (storeyed.self.Battle.IsMultiTower != null)) ? 0 : (storeyed.self.Battle.IsMultiVersus == 0)) == null)
                {
                    goto Label_00FA;
                }
                photon2 = PunMonoSingleton<MyPhoton>.Instance;
                if ((photon2 != null) == null)
                {
                    goto Label_00FA;
                }
                photon2.ForceCloseRoom();
            Label_00FA:
                storeyed.self.SendIgnoreMyDisconnect();
                storeyed.self.OnQuestEnd();
                if (storeyed.self.Battle.IsMultiPlay == null)
                {
                    goto Label_013D;
                }
                MonoSingleton<GameManager>.Instance.Player.IncrementChallengeMultiNum();
            Label_013D:
                if (storeyed.self.IsPlayingArenaQuest != null)
                {
                    goto Label_015A;
                }
                storeyed.self.SubmitResult();
            Label_015A:
                if (storeyed.self.CurrentQuest.Silent != null)
                {
                    goto Label_0295;
                }
                if (storeyed.self.IsPlayingArenaQuest == null)
                {
                    goto Label_0197;
                }
                storeyed.self.mBattleUI.OnArenaWin();
                goto Label_01D4;
            Label_0197:
                if (storeyed.self.Battle.IsMultiVersus == null)
                {
                    goto Label_01C3;
                }
                storeyed.self.mBattleUI.OnVersusWin();
                goto Label_01D4;
            Label_01C3:
                storeyed.self.mBattleUI.OnQuestWin();
            Label_01D4:
                MonoSingleton<MySound>.Instance.PlayJingle("JIN_0002", 0f, null);
                unit = null;
                if (storeyed.self.IsPlayingArenaQuest == null)
                {
                    goto Label_023D;
                }
                if (storeyed.self.Battle.IsArenaSkip == null)
                {
                    goto Label_023D;
                }
                unit = storeyed.self.Battle.Units.Find(new Predicate<Unit>(storeyed.<>m__BD));
                goto Label_0282;
            Label_023D:
                unit = storeyed.self.Battle.CurrentUnit;
                if (unit == null)
                {
                    goto Label_0282;
                }
                if (unit.Side == null)
                {
                    goto Label_0282;
                }
                if (storeyed.self.mLastPlayerSideUseSkillUnit == null)
                {
                    goto Label_0282;
                }
                unit = storeyed.self.mLastPlayerSideUseSkillUnit;
            Label_0282:
                if (unit == null)
                {
                    goto Label_0295;
                }
                unit.PlayBattleVoice("battle_0029");
            Label_0295:
                if ((storeyed.self.mBattleUI_MultiPlay != null) == null)
                {
                    goto Label_02E5;
                }
                if (storeyed.self.Battle.IsMultiVersus != null)
                {
                    goto Label_02D8;
                }
                storeyed.self.mBattleUI_MultiPlay.OnQuestWin();
                goto Label_02E5;
            Label_02D8:
                storeyed.self.mExecDisconnected = 1;
            Label_02E5:
                if (storeyed.self.IsPlayingArenaQuest == null)
                {
                    goto Label_030C;
                }
                GameUtility.SetDefaultSleepSetting();
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
                goto Label_0318;
            Label_030C:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
            Label_0318:
                goto Label_06DB;
            Label_031D:
                storeyed.self.OnQuestEnd();
                if (storeyed.self.IsPlayingArenaQuest == null)
                {
                    goto Label_0355;
                }
                storeyed.self.mBattleUI.OnArenaLose();
                goto Label_0392;
            Label_0355:
                if (storeyed.self.Battle.IsMultiVersus == null)
                {
                    goto Label_0381;
                }
                storeyed.self.mBattleUI.OnVersusLose();
                goto Label_0392;
            Label_0381:
                storeyed.self.mBattleUI.OnQuestLose();
            Label_0392:
                if ((storeyed.self.mBattleUI_MultiPlay != null) == null)
                {
                    goto Label_03D0;
                }
                if (storeyed.self.Battle.IsMultiVersus != null)
                {
                    goto Label_03D0;
                }
                storeyed.self.mBattleUI_MultiPlay.OnQuestLose();
            Label_03D0:
                MonoSingleton<MySound>.Instance.PlayJingle("JIN_0003", 0f, null);
                if (storeyed.self.Battle.IsMultiPlay == null)
                {
                    goto Label_04A7;
                }
                if (storeyed.self.CurrentQuest.CheckDisableContinue() != null)
                {
                    goto Label_0438;
                }
                if (storeyed.self.Battle.IsMultiVersus != null)
                {
                    goto Label_0438;
                }
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_MultiPlayContinue>();
                goto Label_04A2;
            Label_0438:
                storeyed.self.mExecDisconnected = 1;
                storeyed.self.SendIgnoreMyDisconnect();
                if (storeyed.self.Battle.IsMultiVersus != null)
                {
                    goto Label_0479;
                }
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
                goto Label_04A2;
            Label_0479:
                if (storeyed.self.mQuestResultSent != null)
                {
                    goto Label_0496;
                }
                storeyed.self.SubmitResult();
            Label_0496:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
            Label_04A2:
                goto Label_0613;
            Label_04A7:
                if (storeyed.self.IsPlayingArenaQuest == null)
                {
                    goto Label_051C;
                }
                if (storeyed.self.Battle.IsArenaSkip == null)
                {
                    goto Label_0506;
                }
                unit2 = storeyed.self.Battle.Units.Find(new Predicate<Unit>(storeyed.<>m__BE));
                if (unit2 == null)
                {
                    goto Label_0506;
                }
                unit2.PlayBattleVoice("battle_0028");
            Label_0506:
                GameUtility.SetDefaultSleepSetting();
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
                goto Label_0613;
            Label_051C:
                if (storeyed.self.IsPlayingTower == null)
                {
                    goto Label_0582;
                }
                if (storeyed.self.mCurrentQuest.HasMission() == null)
                {
                    goto Label_0571;
                }
                if (storeyed.self.mQuestResultSent != null)
                {
                    goto Label_0560;
                }
                storeyed.self.SubmitResult();
            Label_0560:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
                goto Label_057D;
            Label_0571:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
            Label_057D:
                goto Label_0613;
            Label_0582:
                flag2 = storeyed.self.CurrentQuest.CheckDisableContinue() == 0;
                if (flag2 == null)
                {
                    goto Label_05D6;
                }
                map = storeyed.self.Battle.CurrentMap;
                if (map == null)
                {
                    goto Label_05D6;
                }
                flag2 = storeyed.self.Battle.CheckMonitorActionCount(map.LoseMonitorCondition) == 0;
            Label_05D6:
                if (storeyed.self.Battle.IsOrdeal == null)
                {
                    goto Label_05EF;
                }
                flag2 = 0;
            Label_05EF:
                if (flag2 == null)
                {
                    goto Label_0607;
                }
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_ConfirmContinue>();
                goto Label_0613;
            Label_0607:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
            Label_0613:
                goto Label_06DB;
            Label_0618:
                if (storeyed.self.Battle.IsMultiVersus == null)
                {
                    goto Label_06DB;
                }
                storeyed.self.OnQuestEnd();
                storeyed.self.mBattleUI.OnVersusDraw();
                storeyed.self.mExecDisconnected = 1;
                storeyed.self.SendIgnoreMyDisconnect();
                if (storeyed.self.mQuestResultSent != null)
                {
                    goto Label_0687;
                }
                storeyed.self.SubmitResult();
            Label_0687:
                storeyed.self.GotoState_WaitSignal<SceneBattle.State_Result>();
                goto Label_06DB;
            Label_0698:
                if ((storeyed.self.mBattleUI_MultiPlay != null) == null)
                {
                    goto Label_06C0;
                }
                storeyed.self.mBattleUI_MultiPlay.OnQuestRetreat();
            Label_06C0:
                GameUtility.FadeOut(2f);
                storeyed.self.GotoState<SceneBattle.State_ExitQuest>();
            Label_06DB:
                return;
            }

            [CompilerGenerated]
            private sealed class <Begin>c__AnonStorey1ED
            {
                internal SceneBattle self;

                public <Begin>c__AnonStorey1ED()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__BD(Unit u)
                {
                    return ((((u != this.self.Battle.Leader) || (u.Side != null)) || (u.IsEntry == null)) ? 0 : (u.IsSub == 0));
                }

                internal bool <>m__BE(Unit u)
                {
                    return ((((u != this.self.Battle.Leader) || (u.Side != null)) || (u.IsEntry == null)) ? 0 : (u.IsSub == 0));
                }
            }
        }

        private class State_PreSelectTargetV2 : State<SceneBattle>
        {
            public State_PreSelectTargetV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.UIParam_TargetValid = 0;
                self.mBattleUI.OnVersusStart();
                self.mBattleUI.OnTargetSelectStart();
                self.GotoState_WaitSignal<SceneBattle.State_SelectTargetV2>();
                return;
            }
        }

        private class State_PreThrowTargetSelect : State<SceneBattle>
        {
            public State_PreThrowTargetSelect()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.UIParam_TargetValid = 0;
                self.mBattleUI.OnThrowTargetSelectStart();
                self.GotoState_WaitSignal<SceneBattle.State_ThrowTargetSelect>();
                return;
            }
        }

        private class State_PreUnitStart : State<SceneBattle>
        {
            private IEnumerator m_Task;

            public State_PreUnitStart()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.RemoveLog();
                this.m_Task = this.Task_Begin(self);
                return;
            }

            [DebuggerHidden]
            private IEnumerator Task_Begin(SceneBattle self)
            {
                <Task_Begin>c__Iterator4C iteratorc;
                iteratorc = new <Task_Begin>c__Iterator4C();
                iteratorc.self = self;
                iteratorc.<$>self = self;
                return iteratorc;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                int num2;
                TacticsUnitController controller;
                if (this.m_Task == null)
                {
                    goto Label_0023;
                }
                if (this.m_Task.MoveNext() == null)
                {
                    goto Label_001C;
                }
                return;
            Label_001C:
                this.m_Task = null;
            Label_0023:
                num = 0;
                goto Label_005C;
            Label_002A:
                if ((self.mTacticsUnits[num] != null) == null)
                {
                    goto Label_0058;
                }
                if (self.mTacticsUnits[num].IsHPGaugeChanging == null)
                {
                    goto Label_0058;
                }
                return;
            Label_0058:
                num += 1;
            Label_005C:
                if (num < self.mTacticsUnits.Count)
                {
                    goto Label_002A;
                }
                num2 = 0;
                goto Label_00A0;
            Label_0074:
                if ((self.mTacticsUnits[num2] != null) == null)
                {
                    goto Label_009C;
                }
                self.mTacticsUnits[num2].ResetHPGauge();
            Label_009C:
                num2 += 1;
            Label_00A0:
                if (num2 < self.mTacticsUnits.Count)
                {
                    goto Label_0074;
                }
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((self.mEventScript != null) == null)
                {
                    goto Label_00E6;
                }
                self.mEventSequence = self.mEventScript.OnUnitStart(controller);
            Label_00E6:
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_UnitStartV2>>();
                return;
            }

            [CompilerGenerated]
            private sealed class <Task_Begin>c__Iterator4C : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal SceneBattle self;
                internal IEnumerator <task>__0;
                internal BattleMap <map>__1;
                internal int <pc_count>__2;
                internal int <ec_count>__3;
                internal TacticsUnitController <controller>__4;
                internal int $PC;
                internal object $current;
                internal SceneBattle <$>self;

                public <Task_Begin>c__Iterator4C()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    Unit unit1;
                    uint num;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0021;

                        case 1:
                            goto Label_004F;
                    }
                    goto Label_01A9;
                Label_0021:
                    this.<task>__0 = this.self.Battle.UnitStartAsync();
                    goto Label_004F;
                Label_003C:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_01AB;
                Label_004F:
                    if (this.<task>__0.MoveNext() != null)
                    {
                        goto Label_003C;
                    }
                    this.<map>__1 = this.self.Battle.CurrentMap;
                    if (this.<map>__1 == null)
                    {
                        goto Label_00E7;
                    }
                    this.<pc_count>__2 = 0;
                    this.<ec_count>__3 = 0;
                    this.<pc_count>__2 = this.self.Battle.GetRemainingActionCount(this.<map>__1.WinMonitorCondition);
                    this.<ec_count>__3 = this.self.Battle.GetRemainingActionCount(this.<map>__1.LoseMonitorCondition);
                    this.self.RemainingActionCountSet(this.<pc_count>__2, this.<ec_count>__3);
                Label_00E7:
                    if (this.self.Battle.IsRankingQuest == null)
                    {
                        goto Label_0117;
                    }
                    this.self.RankingQuestActionCountSet(this.self.Battle.ActionCount);
                Label_0117:
                    this.<controller>__4 = this.self.FindUnitController(this.self.mBattle.CurrentUnit);
                    if ((this.<controller>__4 != null) == null)
                    {
                        goto Label_0182;
                    }
                    unit1 = this.<controller>__4.Unit;
                    unit1.TurnCount += 1;
                    if (this.self.Battle.IsMultiVersus == null)
                    {
                        goto Label_0182;
                    }
                    this.<controller>__4.PlayVersusCursor(1);
                Label_0182:
                    this.self.SetUnitUiHeight(this.self.mBattle.CurrentUnit);
                    goto Label_01A9;
                Label_01A9:
                    return 0;
                Label_01AB:
                    return 1;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_QuestStartV2 : State<SceneBattle>
        {
            private bool is_call_map_start;

            public State_QuestStartV2()
            {
                base..ctor();
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.is_call_map_start != null)
                {
                    goto Label_0018;
                }
                self.GotoMapStart();
                this.is_call_map_start = 1;
            Label_0018:
                return;
            }
        }

        private class State_ReqBtlComReq : State<SceneBattle>
        {
            private const int HistoryMax = 10;
            private GUIEventListener mGUIEvent;
            private bool mQuestStarting;
            private int mSelectedPartyIndex;
            private Vector2 mQuestListScrollPos;
            private int mSelectedQuestIndex;
            private GUIStyle mItemStyle;
            private bool mShowParty;
            private Vector2 mPartyScrollPos;
            private int mSelectChangeUnitIndex;
            private UnitData[] mPartyUnits;
            private bool[] mEnableUnitTypeToggle;
            private string mUnitFilter;
            private int mUnitDispType;
            private bool mShowInventory;
            private Vector2 mInventoryScrollPos;
            private int mSelectChangeInventoryIndex;
            private bool mShowArtifact;
            private int mArtifactTab;
            private int mSelectChangeArtifactUnitIndex;
            private int mSelectChangeArtifactJobIndex;
            private int mSelectChangeArtifactIndex;
            private string mFindQuestName;
            private List<string> mQuestHistoryIds;
            private bool mShowHistory;
            private List<QuestParam> QuestParamList;
            private int mQuestFilterFlg;
            private bool mInitialized;

            public State_ReqBtlComReq()
            {
                this.mItemStyle = new GUIStyle();
                this.mSelectChangeUnitIndex = -1;
                this.mEnableUnitTypeToggle = new bool[4];
                this.mUnitFilter = string.Empty;
                this.mSelectChangeInventoryIndex = -1;
                this.mSelectChangeArtifactUnitIndex = -1;
                this.mSelectChangeArtifactJobIndex = -1;
                this.mSelectChangeArtifactIndex = -1;
                this.mFindQuestName = string.Empty;
                this.mQuestHistoryIds = new List<string>();
                base..ctor();
                return;
            }

            private void AddHistory(string newIdName)
            {
                if (this.mQuestHistoryIds.Contains(newIdName) == null)
                {
                    goto Label_001E;
                }
                this.mQuestHistoryIds.Remove(newIdName);
            Label_001E:
                this.mQuestHistoryIds.Insert(0, newIdName);
                if (this.mQuestHistoryIds.Count <= 10)
                {
                    goto Label_0058;
                }
                this.mQuestHistoryIds.RemoveRange(10, this.mQuestHistoryIds.Count - 10);
            Label_0058:
                return;
            }

            public override void Begin(SceneBattle self)
            {
            }

            private void CreateSaveHistory()
            {
                if (this.mQuestHistoryIds.Count <= 10)
                {
                    goto Label_002D;
                }
                this.mQuestHistoryIds.RemoveRange(10, this.mQuestHistoryIds.Count - 10);
            Label_002D:
                return;
            }

            public override void End(SceneBattle self)
            {
                if ((this.mGUIEvent != null) == null)
                {
                    goto Label_0023;
                }
                Object.Destroy(this.mGUIEvent);
                this.mGUIEvent = null;
            Label_0023:
                return;
            }

            private bool GetQuestFilter(EQuestFilter type)
            {
                return (0 < (this.mQuestFilterFlg & type));
            }

            private void Init()
            {
                char[] chArray1;
                string str;
                string str2;
                string str3;
                GameManager manager;
                List<QuestParam> list;
                int num;
                List<TowerFloorParam> list2;
                int num2;
                int num3;
                bool flag;
                string[] strArray;
                int num4;
                int num5;
                PartyData data;
                str = "Debug_Quest_History_Show";
                if (EditorPlayerPrefs.HasKey(str) == null)
                {
                    goto Label_0023;
                }
                this.mShowHistory = (EditorPlayerPrefs.GetInt(str) == 0) == 0;
            Label_0023:
                str2 = "Debug_Quest_History";
                str3 = string.Empty;
                if (EditorPlayerPrefs.HasKey(str2) == null)
                {
                    goto Label_0045;
                }
                str3 = EditorPlayerPrefs.GetString("Debug_Quest_History");
            Label_0045:
                manager = MonoSingleton<GameManager>.GetInstanceDirect();
                this.QuestParamList = new List<QuestParam>(manager.Quests);
                list = new List<QuestParam>();
                num = 0;
                goto Label_00F6;
            Label_006B:
                list2 = manager.FindTowerFloors(this.QuestParamList[num].iname);
                if (list2 == null)
                {
                    goto Label_00F0;
                }
                if (list2.Count <= 0)
                {
                    goto Label_00F0;
                }
                num2 = 0;
                goto Label_00CE;
            Label_00A1:
                this.QuestParamList.Add(list2[num2].Clone(this.QuestParamList[num], 0));
                num2 += 1;
            Label_00CE:
                if (num2 < list2.Count)
                {
                    goto Label_00A1;
                }
                list.Add(this.QuestParamList[num]);
            Label_00F0:
                num += 1;
            Label_00F6:
                if (num < this.QuestParamList.Count)
                {
                    goto Label_006B;
                }
                num3 = 0;
                goto Label_012B;
            Label_0110:
                this.QuestParamList.Remove(list[num3]);
                num3 += 1;
            Label_012B:
                if (num3 < list.Count)
                {
                    goto Label_0110;
                }
                if (string.IsNullOrEmpty(str3) != null)
                {
                    goto Label_020F;
                }
                flag = 0;
                chArray1 = new char[] { 0x2c };
                strArray = str3.Split(chArray1);
                num4 = 0;
                goto Label_0204;
            Label_0162:
                num5 = 0;
                goto Label_01EC;
            Label_016A:
                if ((this.QuestParamList[num5].iname == strArray[num4]) == null)
                {
                    goto Label_019B;
                }
                this.mQuestHistoryIds.Add(strArray[num4]);
            Label_019B:
                if (flag != null)
                {
                    goto Label_01E6;
                }
                if (0 >= this.mQuestHistoryIds.Count)
                {
                    goto Label_01E6;
                }
                if ((this.mQuestHistoryIds[0] == this.QuestParamList[num5].iname) == null)
                {
                    goto Label_01E6;
                }
                flag = 1;
                this.mSelectedQuestIndex = num5;
            Label_01E6:
                num5 += 1;
            Label_01EC:
                if (num5 < this.QuestParamList.Count)
                {
                    goto Label_016A;
                }
                num4 += 1;
            Label_0204:
                if (num4 < ((int) strArray.Length))
                {
                    goto Label_0162;
                }
            Label_020F:
                this.mQuestFilterFlg = 15;
                data = MonoSingleton<GameManager>.Instance.Player.Partys[this.mSelectedPartyIndex];
                this.mPartyUnits = new UnitData[data.MAX_UNIT];
                this.mInitialized = 1;
                return;
            }

            private void OnGUI(GameObject go)
            {
            }

            private void SetQuestFilter(EQuestFilter type, bool flag)
            {
                if (flag == null)
                {
                    goto Label_0019;
                }
                this.mQuestFilterFlg |= type;
                goto Label_0028;
            Label_0019:
                this.mQuestFilterFlg &= ~type;
            Label_0028:
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (string.IsNullOrEmpty(GlobalVars.SelectedQuestID) == null)
                {
                    goto Label_005D;
                }
                if ((this.mGUIEvent == null) == null)
                {
                    goto Label_005D;
                }
                if (Network.Mode != 1)
                {
                    goto Label_005D;
                }
                this.mGUIEvent = self.get_gameObject().AddComponent<GUIEventListener>();
                this.mGUIEvent.Listeners = new GUIEventListener.GUIEvent(this.OnGUI);
                GameUtility.FadeOut(0f);
            Label_005D:
                return;
            }

            private enum EQuestFilter
            {
                Normal = 1,
                Hard = 2,
                Event = 4,
                Opening = 8
            }
        }

        private class State_Restart_SelectSupport : State<SceneBattle>
        {
            public State_Restart_SelectSupport()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                self.mBattleUI.OnSupportSelectStart();
                return;
            }

            public override void End(SceneBattle self)
            {
                self.mOnRequestStateChange = null;
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                SupportData data;
                if (req != null)
                {
                    goto Label_0038;
                }
                data = GlobalVars.SelectedSupport;
                GlobalVars.SelectedFriendID = (data == null) ? null : data.FUID;
                base.self.GotoState<SceneBattle.State_RestartQuest>();
                goto Label_0043;
            Label_0038:
                base.self.GotoState<SceneBattle.State_ExitQuest>();
            Label_0043:
                return;
            }
        }

        private class State_RestartQuest : State<SceneBattle>
        {
            private bool mRequested;

            public State_RestartQuest()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                GameUtility.FadeOut(1f);
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_000B;
                }
                return;
            Label_000B:
                if (this.mRequested == null)
                {
                    goto Label_0017;
                }
                return;
            Label_0017:
                this.mRequested = 1;
                GameUtility.RequestScene("Battle");
                return;
            }
        }

        private class State_Result : State<SceneBattle>
        {
            private bool mIsResDestroy;
            private LoadRequest mResLoadReq;
            private float mResPassedTime;
            private bool mOnResult;

            public State_Result()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                BattleCore.Record record;
                bool flag;
                bool flag2;
                List<MultiFuid> list;
                MyPhoton photon;
                List<JSON_MyPhotonPlayerParam> list2;
                int num;
                MultiFuid fuid;
                GameManager manager;
                string str;
                ItemParam param;
                UnitParam param2;
                int num2;
                BattleCore.DropItemParam param3;
                string str2;
                <Begin>c__AnonStorey1EE storeyee;
                record = self.mBattle.GetQuestRecord();
                if (self.IsPlayingArenaQuest == null)
                {
                    goto Label_003B;
                }
                this.mOnResult = 1;
                MonoSingleton<MySound>.Instance.PlayBGM("BGM_0006", null, 0);
                self.mBattleUI.OnResult_Arena();
                return;
            Label_003B:
                flag = 0;
                flag2 = 0;
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_014E;
                }
                list = MonoSingleton<GameManager>.Instance.Player.MultiFuids;
                photon = PunMonoSingleton<MyPhoton>.Instance;
                list2 = photon.GetMyPlayersStarted();
                if ((list2 == null) || (MonoSingleton<GameManager>.Instance.Player == null))
                {
                    goto Label_014E;
                }
                num = 0;
                goto Label_0138;
            Label_008D:
                storeyee = new <Begin>c__AnonStorey1EE();
                storeyee.startedPlayer = list2[num];
                if (storeyee.startedPlayer != null)
                {
                    goto Label_00B5;
                }
                goto Label_0132;
            Label_00B5:
                if (storeyee.startedPlayer.playerIndex != photon.MyPlayerIndex)
                {
                    goto Label_00D2;
                }
                goto Label_0132;
            Label_00D2:
                if (string.IsNullOrEmpty(storeyee.startedPlayer.FUID) == null)
                {
                    goto Label_00ED;
                }
                goto Label_0132;
            Label_00ED:
                fuid = (list != null) ? list.Find(new Predicate<MultiFuid>(storeyee.<>m__BF)) : null;
                if (fuid == null)
                {
                    goto Label_0132;
                }
                if (fuid.status.Equals("follower") == null)
                {
                    goto Label_0132;
                }
                flag = 1;
                goto Label_0146;
            Label_0132:
                num += 1;
            Label_0138:
                if (num < list2.Count)
                {
                    goto Label_008D;
                }
            Label_0146:
                flag2 = photon.IsMultiVersus;
            Label_014E:
                if (record.IsZero == null)
                {
                    goto Label_01A1;
                }
                if (flag != null)
                {
                    goto Label_01A1;
                }
                if (self.CurrentQuest.type == 7)
                {
                    goto Label_01A1;
                }
                if (flag2 != null)
                {
                    goto Label_01A1;
                }
                if (self.Battle.IsMultiTower != null)
                {
                    goto Label_01A1;
                }
                if (MonoSingleton<GameManager>.Instance.IsVSCpuBattle != null)
                {
                    goto Label_01A1;
                }
                self.ExitRequest = 1;
                goto Label_02B8;
            Label_01A1:
                if (self.IsOrdealQuest == null)
                {
                    goto Label_0205;
                }
                if (string.IsNullOrEmpty(self.FirstClearItemId) != null)
                {
                    goto Label_0205;
                }
                manager = MonoSingleton<GameManager>.Instance;
                str = self.FirstClearItemId;
                param = manager.GetItemParam(str);
                if (param == null)
                {
                    goto Label_0205;
                }
                if (param.type != 0x10)
                {
                    goto Label_0205;
                }
                param2 = manager.GetUnitParam(str);
                if (param2 == null)
                {
                    goto Label_0205;
                }
                DownloadUtility.DownloadUnit(param2, null);
            Label_0205:
                num2 = 0;
                goto Label_0250;
            Label_020D:
                param3 = record.items[num2];
                if (param3.IsConceptCard == null)
                {
                    goto Label_024A;
                }
                if (string.IsNullOrEmpty(param3.conceptCardParam.first_get_unit) != null)
                {
                    goto Label_024A;
                }
                DownloadUtility.DownloadConceptCard(param3.conceptCardParam);
            Label_024A:
                num2 += 1;
            Label_0250:
                if (num2 < record.items.Count)
                {
                    goto Label_020D;
                }
                if (AssetDownloader.isDone != null)
                {
                    goto Label_0275;
                }
                AssetDownloader.StartDownload(0, 1, 2);
            Label_0275:
                str2 = GameSettings.Instance.BattleResultBg_ResourcePath;
                if (string.IsNullOrEmpty(str2) != null)
                {
                    goto Label_02B1;
                }
                this.mResLoadReq = AssetManager.LoadAsync<GameObject>(str2);
                if (this.mResLoadReq != null)
                {
                    goto Label_02B8;
                }
                this.mIsResDestroy = 1;
                goto Label_02B8;
            Label_02B1:
                this.mIsResDestroy = 1;
            Label_02B8:
                return;
            }

            private void StartResult()
            {
                if (this.mOnResult == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                this.mOnResult = 1;
                MonoSingleton<MySound>.Instance.PlayBGM("BGM_0006", null, 0);
                if (base.self.Battle.IsMultiPlay == null)
                {
                    goto Label_00C4;
                }
                if (base.self.Battle.IsMultiVersus == null)
                {
                    goto Label_008F;
                }
                if (base.self.Battle.QuestType != 0x10)
                {
                    goto Label_007A;
                }
                base.self.mBattleUI.OnResult_RankMatch();
                goto Label_008A;
            Label_007A:
                base.self.mBattleUI.OnResult_Versus();
            Label_008A:
                goto Label_00BF;
            Label_008F:
                if (GlobalVars.SelectedMultiPlayRoomType != 2)
                {
                    goto Label_00AF;
                }
                base.self.mBattleUI.OnResult_MultiTower();
                goto Label_00BF;
            Label_00AF:
                base.self.mBattleUI.OnResult_MP();
            Label_00BF:
                goto Label_0141;
            Label_00C4:
                if (base.self.Battle.QuestType != 7)
                {
                    goto Label_00EF;
                }
                base.self.mBattleUI.OnResult_Tower();
                goto Label_0141;
            Label_00EF:
                if (base.self.Battle.QuestType == 8)
                {
                    goto Label_011C;
                }
                if (base.self.Battle.QuestType != 9)
                {
                    goto Label_0131;
                }
            Label_011C:
                base.self.mBattleUI.OnResult_Versus();
                goto Label_0141;
            Label_0131:
                base.self.mBattleUI.OnResult();
            Label_0141:
                return;
            }

            public override void Update(SceneBattle self)
            {
                ResultMask mask;
                RenderPipeline pipeline;
                int num;
                TacticsUnitController controller;
                if (self.mQuestResultSent != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if (AssetDownloader.isDone != null)
                {
                    goto Label_0017;
                }
                return;
            Label_0017:
                if (this.mIsResDestroy != null)
                {
                    goto Label_01B2;
                }
                if (this.mResLoadReq == null)
                {
                    goto Label_0112;
                }
                if (this.mResLoadReq.isDone != null)
                {
                    goto Label_003E;
                }
                return;
            Label_003E:
                this.mIsResDestroy = 1;
                if ((this.mResLoadReq.asset != null) == null)
                {
                    goto Label_010A;
                }
                self.GoResultBg = Object.Instantiate(this.mResLoadReq.asset) as GameObject;
                if (self.GoResultBg == null)
                {
                    goto Label_010A;
                }
                self.GoResultBg.get_transform().SetParent(self.mBattleUI.get_transform(), 0);
                if (GameSettings.Instance.BattleResultBg_UseBattleBG == null)
                {
                    goto Label_0103;
                }
                mask = self.GoResultBg.GetComponent<ResultMask>();
                if (mask == null)
                {
                    goto Label_0103;
                }
                if (Camera.get_main() == null)
                {
                    goto Label_0103;
                }
                pipeline = GameUtility.RequireComponent<RenderPipeline>(Camera.get_main().get_gameObject());
                if (pipeline == null)
                {
                    goto Label_0103;
                }
                mask.SetBg(pipeline.BackgroundImage as Texture2D);
            Label_0103:
                this.mIsResDestroy = 0;
            Label_010A:
                this.mResLoadReq = null;
                return;
            Label_0112:
                this.mResPassedTime += Time.get_deltaTime();
                if (this.mResPassedTime >= GameSettings.Instance.BattleResultBg_WaitTime)
                {
                    goto Label_013A;
                }
                return;
            Label_013A:
                num = self.mTacticsUnits.Count - 1;
                goto Label_0175;
            Label_014D:
                controller = self.mTacticsUnits[num];
                Object.Destroy(controller.get_gameObject());
                self.mTacticsUnits.RemoveAt(num);
                num -= 1;
            Label_0175:
                if (num >= 0)
                {
                    goto Label_014D;
                }
                if ((self.mTacticsSceneRoot != null) == null)
                {
                    goto Label_01A4;
                }
                Object.Destroy(self.mTacticsSceneRoot.get_gameObject());
                self.mTacticsSceneRoot = null;
            Label_01A4:
                self.DestroyUI(1);
                this.mIsResDestroy = 1;
            Label_01B2:
                if (self.ExitRequest != 1)
                {
                    goto Label_0207;
                }
                if (self.mBattle.GetQuestResult() != 1)
                {
                    goto Label_01FC;
                }
                if (this.mOnResult != null)
                {
                    goto Label_01FC;
                }
                if (self.IsPlayingMultiQuest == null)
                {
                    goto Label_01FC;
                }
                if (self.mFirstContact <= 0)
                {
                    goto Label_01FC;
                }
                self.mBattleUI.OnFirstContact();
            Label_01FC:
                self.GotoState_WaitSignal<SceneBattle.State_ExitQuest>();
                goto Label_0224;
            Label_0207:
                if (self.ExitRequest != 2)
                {
                    goto Label_021E;
                }
                self.GotoState<SceneBattle.State_Restart_SelectSupport>();
                goto Label_0224;
            Label_021E:
                this.StartResult();
            Label_0224:
                return;
            }

            [CompilerGenerated]
            private sealed class <Begin>c__AnonStorey1EE
            {
                internal JSON_MyPhotonPlayerParam startedPlayer;

                public <Begin>c__AnonStorey1EE()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__BF(MultiFuid f)
                {
                    return ((f.fuid == null) ? 0 : f.fuid.Equals(this.startedPlayer.FUID));
                }
            }
        }

        private class State_SelectGridEventV2 : State<SceneBattle>
        {
            public State_SelectGridEventV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.InterpCameraTargetToCurrent();
                self.mBattleUI.OnGridEventSelectStart();
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                return;
            }

            public override void End(SceneBattle self)
            {
                self.mOnRequestStateChange = null;
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                if (req != null)
                {
                    goto Label_0068;
                }
                if (base.self.ApplyUnitMovement(0) == null)
                {
                    goto Label_0083;
                }
                if (base.self.Battle.ExecuteEventTriggerOnGrid(base.self.Battle.CurrentUnit, 3) == null)
                {
                    goto Label_0058;
                }
                base.self.SendInputGridEvent(base.self.Battle.CurrentUnit);
            Label_0058:
                base.self.GotoState_WaitSignal<SceneBattle.State_WaitForLog>();
                goto Label_0083;
            Label_0068:
                base.self.mBattleUI.OnGridEventSelectEnd();
                base.self.GotoMapCommand();
            Label_0083:
                return;
            }
        }

        private class State_SelectItemV2 : State<SceneBattle>
        {
            public State_SelectItemV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.InterpCameraTargetToCurrent();
                if ((self.mBattleUI.ItemWindow != null) == null)
                {
                    goto Label_0038;
                }
                self.mBattleUI.ItemWindow.OnSelectItem = new BattleInventory.SelectEvent(this.OnSelectItem);
            Label_0038:
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                self.StepToNear(self.Battle.CurrentUnit);
                return;
            }

            public override void End(SceneBattle self)
            {
                if ((self.mBattleUI.ItemWindow != null) == null)
                {
                    goto Label_0027;
                }
                self.mBattleUI.ItemWindow.OnSelectItem = null;
            Label_0027:
                self.mOnRequestStateChange = null;
                return;
            }

            private void OnSelectItem(ItemData itemData)
            {
                base.self.mBattleUI.OnItemSelectEnd();
                base.self.GotoSelectTarget(itemData, new SceneBattle.SelectTargetCallback(base.self.GotoItemSelect), new SceneBattle.SelectTargetPositionWithItem(base.self.OnSelectItemTarget), null, 1);
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                if (req != null)
                {
                    goto Label_000B;
                }
                goto Label_0026;
            Label_000B:
                base.self.mBattleUI.OnItemSelectEnd();
                base.self.GotoMapCommand();
            Label_0026:
                return;
            }
        }

        private class State_SelectSkillV2 : State<SceneBattle>
        {
            private UnitAbilitySkillList mSkillList;

            public State_SelectSkillV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                Unit unit;
                TacticsUnitController controller;
                EUnitDirection direction;
                self.InterpCameraTargetToCurrent();
                this.mSkillList = self.mBattleUI.SkillWindow;
                unit = self.mBattle.CurrentUnit;
                controller = self.FindUnitController(unit);
                direction = controller.CalcUnitDirectionFromRotation();
                controller.get_transform().set_rotation(SRPG_Extensions.ToRotation(direction));
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                if ((this.mSkillList != null) == null)
                {
                    goto Label_007D;
                }
                this.mSkillList.OnSelectSkill = new UnitAbilitySkillList.SelectSkillEvent(this.OnSelectSkill);
            Label_007D:
                self.StepToNear(unit);
                return;
            }

            public override void End(SceneBattle self)
            {
                self.mOnRequestStateChange = null;
                if ((this.mSkillList != null) == null)
                {
                    goto Label_0024;
                }
                this.mSkillList.OnSelectSkill = null;
            Label_0024:
                return;
            }

            private void OnSelectSkill(SkillData skill)
            {
                base.self.mBattleUI.OnSkillSelectEnd();
                base.self.GotoSelectTarget(skill, new SceneBattle.SelectTargetCallback(base.self.GotoSkillSelect), new SceneBattle.SelectTargetPositionWithSkill(base.self.OnSelectSkillTarget), null, 1);
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                if (req != null)
                {
                    goto Label_001B;
                }
                base.self.mBattleUI.OnSkillSelectEnd();
                goto Label_0036;
            Label_001B:
                base.self.mBattleUI.OnSkillSelectEnd();
                base.self.GotoMapCommand();
            Label_0036:
                return;
            }
        }

        private class State_SelectTargetV2 : State<SceneBattle>
        {
            private SceneBattle mScene;
            private TacticsUnitController mSelectedTarget;
            private GridMap<bool> mTargetGrids;
            private GridMap<bool> mTargetAreaGridMap;
            private bool mSelectGrid;
            private IntVector2 mTargetPosition;
            private List<TacticsUnitController> mTargets;
            private bool mDragScroll;
            private float mYScrollPos;
            private bool mIgnoreDragVelocity;
            private float mDragY;
            private GUIEventListener mGUIEvent;

            public State_SelectTargetV2()
            {
                this.mSelectGrid = 1;
                this.mTargets = new List<TacticsUnitController>(0x20);
                base..ctor();
                return;
            }

            [CompilerGenerated]
            private bool <OnFocus>m__CB(BattleCore.UnitResult p)
            {
                return (p.unit == base.self.mSelectedTarget);
            }

            public override unsafe void Begin(SceneBattle self)
            {
                UnitCommands commands2;
                UnitCommands commands1;
                bool flag;
                SkillData data;
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                int num;
                int num2;
                List<Unit> list;
                int num3;
                TacticsUnitController controller2;
                Color32 color;
                GridMap<Color32> map;
                int num4;
                int num5;
                bool flag2;
                Unit unit2;
                int num6;
                int num7;
                GridMap<int> map2;
                Unit unit3;
                List<Unit>.Enumerator enumerator;
                TacticsUnitController controller3;
                TacticsUnitController controller4;
                IntVector2 vector2;
                Grid grid;
                bool flag3;
                bool flag4;
                ESkillTarget target;
                flag = 1;
                this.mScene = self;
                data = &self.mTargetSelectorParam.Skill;
                self.mSelectedTarget = self.Battle.CurrentUnit;
                unit = self.mBattle.CurrentUnit;
                controller = self.FindUnitController(unit);
                vector = self.CalcCoord(controller.CenterPosition);
                this.mTargets.Clear();
                if (data == null)
                {
                    goto Label_03FC;
                }
                this.mSelectGrid = data.SkillParam.IsAreaSkill();
                if (data.IsTargetGridNoUnit != null)
                {
                    goto Label_0080;
                }
                if (data.IsTargetValidGrid == null)
                {
                    goto Label_0087;
                }
            Label_0080:
                this.mSelectGrid = 1;
            Label_0087:
                this.mTargetGrids = self.Battle.CreateSelectGridMap(unit, &vector.x, &vector.y, &self.mTargetSelectorParam.Skill);
                if (this.mSelectGrid != null)
                {
                    goto Label_01B5;
                }
                num = unit.x;
                num2 = unit.y;
                unit.x = &vector.x;
                unit.y = &vector.y;
                list = self.mBattle.CreateAttackTargetsAI(unit, &self.mTargetSelectorParam.Skill, 0);
                if (list.Count <= 0)
                {
                    goto Label_01A5;
                }
                num3 = 0;
                goto Label_0195;
            Label_0116:
                controller2 = self.FindUnitController(list[num3]);
                if ((controller2 != null) == null)
                {
                    goto Label_018F;
                }
                if (this.mTargetGrids.get(list[num3].x, list[num3].y) == null)
                {
                    goto Label_018F;
                }
                if (controller2.Unit.IsBreakObj == null)
                {
                    goto Label_0182;
                }
                if (controller2.Unit.IsBreakDispUI == null)
                {
                    goto Label_018F;
                }
            Label_0182:
                this.mTargets.Add(controller2);
            Label_018F:
                num3 += 1;
            Label_0195:
                if (num3 < list.Count)
                {
                    goto Label_0116;
                }
                flag = 0;
            Label_01A5:
                unit.x = num;
                unit.y = num2;
            Label_01B5:
                color = &GameSettings.Instance.Colors.AttackArea;
                map = new GridMap<Color32>(this.mTargetGrids.w, this.mTargetGrids.h);
                num4 = 0;
                goto Label_0237;
            Label_01F0:
                num5 = 0;
                goto Label_021F;
            Label_01F8:
                if (this.mTargetGrids.get(num4, num5) == null)
                {
                    goto Label_0219;
                }
                map.set(num4, num5, color);
            Label_0219:
                num5 += 1;
            Label_021F:
                if (num5 < this.mTargetGrids.h)
                {
                    goto Label_01F8;
                }
                num4 += 1;
            Label_0237:
                if (num4 < this.mTargetGrids.w)
                {
                    goto Label_01F0;
                }
                flag2 = 0;
                if (&self.mTargetSelectorParam.DefaultTarget == null)
                {
                    goto Label_0261;
                }
                goto Label_036D;
            Label_0261:
                unit2 = null;
                switch (data.SkillParam.target)
                {
                    case 0:
                        goto Label_0299;

                    case 1:
                        goto Label_0299;

                    case 2:
                        goto Label_02AF;

                    case 3:
                        goto Label_02C5;

                    case 4:
                        goto Label_02C5;

                    case 5:
                        goto Label_0349;

                    case 6:
                        goto Label_0349;
                }
                goto Label_0351;
            Label_0299:
                unit2 = self.FindTarget(unit, data, this.mTargetGrids, 0);
                goto Label_0356;
            Label_02AF:
                unit2 = self.FindTarget(unit, data, this.mTargetGrids, 1);
                goto Label_0356;
            Label_02C5:
                unit2 = self.FindTarget(unit, data, this.mTargetGrids, 1);
                if (unit2 != null)
                {
                    goto Label_032C;
                }
                unit2 = self.FindTarget(unit, data, this.mTargetGrids, 0);
                if (unit2 == null)
                {
                    goto Label_032C;
                }
                if (data.SkillParam.IsSelfTargetSelect() != null)
                {
                    goto Label_032C;
                }
                if (unit2.x != unit.x)
                {
                    goto Label_032C;
                }
                if (unit2.y != unit.y)
                {
                    goto Label_032C;
                }
                unit2 = null;
            Label_032C:
                if (unit2 != null)
                {
                    goto Label_0356;
                }
                unit2 = self.FindTarget(unit, data, this.mTargetGrids, 2);
                goto Label_0356;
            Label_0349:
                unit2 = unit;
                goto Label_0356;
            Label_0351:;
            Label_0356:
                &self.mTargetSelectorParam.DefaultTarget = unit2;
                flag2 = (unit2 == null) == 0;
            Label_036D:
                self.mTacticsSceneRoot.ShowGridLayer(1, map, 1);
                self.ShowCastSkill();
                if (&self.mTargetSelectorParam.AllowTargetChange == null)
                {
                    goto Label_051F;
                }
                if (flag2 != null)
                {
                    goto Label_051F;
                }
                if (&self.mTargetSelectorParam.DefaultTarget == null)
                {
                    goto Label_03D3;
                }
                if (&self.mTargetSelectorParam.DefaultTarget.IsBreakObj == null)
                {
                    goto Label_03D3;
                }
                if (&self.mTargetSelectorParam.DefaultTarget.IsBreakDispUI == null)
                {
                    goto Label_051F;
                }
            Label_03D3:
                this.OnFocusGrid(self.Battle.CurrentMap[&vector.x, &vector.y]);
                goto Label_051F;
            Label_03FC:
                num6 = unit.x;
                num7 = unit.y;
                unit.x = &vector.x;
                unit.y = &vector.y;
                map2 = self.mBattle.CreateMoveMap(unit, 0);
                unit.x = num6;
                unit.y = num7;
                self.ShowWalkableGrids(map2, 0);
                this.HilitNormalAttack(self.mBattle.CurrentUnit, 0);
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_MapDistance);
                this.OnFocusGrid(self.Battle.CurrentMap[self.mSelectedTarget.x, self.mSelectedTarget.y]);
                enumerator = self.mBattle.Units.GetEnumerator();
            Label_04AE:
                try
                {
                    goto Label_0501;
                Label_04B3:
                    unit3 = &enumerator.Current;
                    if (unit3.IsGimmick == null)
                    {
                        goto Label_04D9;
                    }
                    if (unit3.IsBreakObj != null)
                    {
                        goto Label_04D9;
                    }
                    goto Label_0501;
                Label_04D9:
                    controller3 = self.FindUnitController(unit3);
                    if (controller3 != null)
                    {
                        goto Label_04F4;
                    }
                    goto Label_0501;
                Label_04F4:
                    this.mTargets.Add(controller3);
                Label_0501:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_04B3;
                    }
                    goto Label_051F;
                }
                finally
                {
                Label_0512:
                    ((List<Unit>.Enumerator) enumerator).Dispose();
                }
            Label_051F:
                if (&self.mTargetSelectorParam.AllowTargetChange == null)
                {
                    goto Label_05BE;
                }
                if (this.mSelectGrid == null)
                {
                    goto Label_0587;
                }
                self.mOnGridClick = new SceneBattle.GridClickEvent(this.OnClickGrid);
                &this.mTargetPosition.x = Mathf.FloorToInt(&self.m_CameraPosition.x);
                &this.mTargetPosition.y = Mathf.FloorToInt(&self.m_CameraPosition.y);
                goto Label_05AB;
            Label_0587:
                self.mOnUnitClick = new SceneBattle.UnitClickEvent(this.OnClickUnit);
                self.mOnUnitFocus = new SceneBattle.UnitFocusEvent(this.OnFocus);
            Label_05AB:
                self.m_AllowCameraRotation = flag;
                self.m_AllowCameraTranslation = flag;
                goto Label_05CC;
            Label_05BE:
                self.m_AllowCameraRotation = 0;
                self.m_AllowCameraTranslation = 0;
            Label_05CC:
                if (&self.mTargetSelectorParam.DefaultTarget == null)
                {
                    goto Label_06FC;
                }
                controller4 = self.FindUnitController(&self.mTargetSelectorParam.DefaultTarget);
                if ((controller4 != null) == null)
                {
                    goto Label_0647;
                }
                this.OnFocus(controller4);
                vector2 = self.CalcCoord(controller4.CenterPosition);
                grid = self.Battle.CurrentMap[&vector2.x, &vector2.y];
                this.HilitArea(grid.x, grid.y);
            Label_0647:
                self.InterpCameraTarget(controller4);
                flag3 = 1;
                if (data.IsTargetGridNoUnit == null)
                {
                    goto Label_0665;
                }
                flag3 = 0;
                goto Label_0697;
            Label_0665:
                if (data.IsTargetValidGrid == null)
                {
                    goto Label_0697;
                }
                self.mFocusedUnit = controller4;
                self.mMapModeFocusedUnit = self.mFocusedUnit;
                flag3 = this.IsGridSelectable(&self.mTargetSelectorParam.DefaultTarget);
            Label_0697:
                if (data.IsTargetTeleport == null)
                {
                    goto Label_06E8;
                }
                if (&self.mTargetSelectorParam.DefaultTarget == null)
                {
                    goto Label_06E8;
                }
                flag4 = 0;
                self.mBattle.GetTeleportGrid(unit, &vector.x, &vector.y, &self.mTargetSelectorParam.DefaultTarget, data, &flag4);
                if (flag4 != null)
                {
                    goto Label_06E8;
                }
                flag3 = 0;
            Label_06E8:
                self.UIParam_TargetValid = flag3;
                this.SetYesButtonEnable(self.UIParam_TargetValid);
            Label_06FC:
                commands1 = self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Combine(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                commands2 = self.mBattleUI.CommandWindow;
                commands2.OnMapExitSelect = (UnitCommands.MapExitEvent) Delegate.Combine(commands2.OnMapExitSelect, new UnitCommands.MapExitEvent(this.OnMapExitSelect));
                self.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Combine(self.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                self.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Combine(self.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                if (self.mBattleUI.TargetSub == null)
                {
                    goto Label_0827;
                }
                if (this.mTargets.Count < 2)
                {
                    goto Label_0805;
                }
                self.mBattleUI.TargetSub.ActivateNextTargetArrow(new ButtonExt.ButtonClickEvent(this.OnNextTargetClick));
                self.mBattleUI.TargetSub.ActivatePrevTargetArrow(new ButtonExt.ButtonClickEvent(this.OnPrevTargetClick));
                goto Label_0827;
            Label_0805:
                self.mBattleUI.TargetSub.SetNextTargetArrowActive(0);
                self.mBattleUI.TargetSub.SetPrevTargetArrowActive(0);
            Label_0827:
                self.StepToNear(self.Battle.CurrentUnit);
                self.OnGimmickUpdate();
                return;
            }

            public override unsafe void End(SceneBattle self)
            {
                UnitCommands commands2;
                UnitCommands commands1;
                SkillData data;
                if (self.mBattleUI.TargetSub == null)
                {
                    goto Label_004D;
                }
                self.mBattleUI.TargetSub.DeactivateNextTargetArrow(new ButtonExt.ButtonClickEvent(this.OnNextTargetClick));
                self.mBattleUI.TargetSub.DeactivatePrevTargetArrow(new ButtonExt.ButtonClickEvent(this.OnPrevTargetClick));
            Label_004D:
                if ((this.mGUIEvent != null) == null)
                {
                    goto Label_0070;
                }
                Object.Destroy(this.mGUIEvent);
                this.mGUIEvent = null;
            Label_0070:
                this.SetYesButtonEnable(1);
                commands1 = self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Remove(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                commands2 = self.mBattleUI.CommandWindow;
                commands2.OnMapExitSelect = (UnitCommands.MapExitEvent) Delegate.Remove(commands2.OnMapExitSelect, new UnitCommands.MapExitEvent(this.OnMapExitSelect));
                self.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Remove(self.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                self.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Remove(self.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                self.HideUnitMarkers(0);
                self.m_AllowCameraRotation = 0;
                self.m_AllowCameraTranslation = 0;
                self.mOnUnitFocus = null;
                self.mOnUnitClick = null;
                self.mOnGridClick = null;
                data = &self.mTargetSelectorParam.Skill;
                if (data == null)
                {
                    goto Label_0172;
                }
                if (data.IsTargetTeleport == null)
                {
                    goto Label_0172;
                }
                self.mDisplayBlockedGridMarker = 0;
                self.mGridDisplayBlockedGridMarker = null;
            Label_0172:
                if (self.mIsBackSelectSkill == null)
                {
                    goto Label_01A6;
                }
                self.mTacticsSceneRoot.HideGridLayer(0);
                self.mTacticsSceneRoot.HideGridLayer(1);
                self.mTacticsSceneRoot.HideGridLayer(2);
                goto Label_01AC;
            Label_01A6:
                self.HideGrid();
            Label_01AC:
                self.SetUnitUiHeight(self.mBattle.CurrentUnit);
                return;
            }

            private unsafe void HilitArea(int x, int y)
            {
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                if (&base.self.mTargetSelectorParam.Skill != null)
                {
                    goto Label_0016;
                }
                return;
            Label_0016:
                unit = base.self.mBattle.CurrentUnit;
                controller = base.self.FindUnitController(unit);
                vector = base.self.CalcCoord(controller.CenterPosition);
                this.mTargetAreaGridMap = base.self.mBattle.CreateScopeGridMap(base.self.mBattle.CurrentUnit, &vector.x, &vector.y, x, y, &base.self.mTargetSelectorParam.Skill);
                if (SkillParam.IsTypeLaser(&base.self.mTargetSelectorParam.Skill.SkillParam.select_scope) == null)
                {
                    goto Label_00CE;
                }
                if (this.mTargetAreaGridMap.get(x, y) != null)
                {
                    goto Label_00CE;
                }
                this.mTargetAreaGridMap.fill(0);
            Label_00CE:
                base.self.mTacticsSceneRoot.ShowGridLayer(2, this.mTargetAreaGridMap, &GameSettings.Instance.Colors.AttackArea2, 0);
                return;
            }

            private unsafe void HilitNormalAttack(Unit Attacker, bool showOnly)
            {
                SkillData data;
                TacticsUnitController controller;
                IntVector2 vector;
                if (showOnly != null)
                {
                    goto Label_0052;
                }
                data = Attacker.GetAttackSkill();
                controller = base.self.FindUnitController(Attacker);
                vector = base.self.CalcCoord(controller.CenterPosition);
                this.mTargetAreaGridMap = base.self.mBattle.CreateSelectGridMap(Attacker, &vector.x, &vector.y, data);
            Label_0052:
                base.self.mTacticsSceneRoot.ShowGridLayer(1, this.mTargetAreaGridMap, &GameSettings.Instance.Colors.AttackArea, 1);
                base.self.ShowCastSkill();
                return;
            }

            private unsafe bool IsGridSelectable(Unit unit)
            {
                int num;
                int num2;
                IntVector2 vector;
                num = unit.x;
                num2 = unit.y;
                if ((this.mScene.mFocusedUnit != null) == null)
                {
                    goto Label_007B;
                }
                if (this.mScene.mFocusedUnit.Unit == null)
                {
                    goto Label_007B;
                }
                if (this.mScene.mFocusedUnit.Unit != unit)
                {
                    goto Label_007B;
                }
                vector = this.mScene.CalcCoord(this.mScene.mFocusedUnit.CenterPosition);
                num = &vector.x;
                num2 = &vector.y;
            Label_007B:
                return this.IsGridSelectable(num, num2);
            }

            private bool IsGridSelectable(int x, int y)
            {
                return this.mTargetGrids.get(x, y);
            }

            private unsafe bool IsValidSkillTarget(Unit target)
            {
                if ((target != null) && (&base.self.mTargetSelectorParam.Skill != null))
                {
                    goto Label_001D;
                }
                return 0;
            Label_001D:
                return ((this.IsGridSelectable(target) == null) ? 0 : base.self.mBattle.CheckSkillTarget(base.self.mBattle.CurrentUnit, target, &base.self.mTargetSelectorParam.Skill));
            }

            private unsafe bool NeedsTargetKakunin(Unit unit)
            {
                SkillData data;
                Grid grid;
                TacticsUnitController controller;
                IntVector2 vector;
                int num;
                int num2;
                Unit unit2;
                data = &base.self.mTargetSelectorParam.Skill;
                if (data == null)
                {
                    goto Label_00EF;
                }
                if (data.IsCastSkill() == null)
                {
                    goto Label_00EF;
                }
                if (data.IsEnableUnitLockTarget() == null)
                {
                    goto Label_00EF;
                }
                grid = this.mScene.Battle.CurrentMap[&this.mTargetPosition.x, &this.mTargetPosition.y];
                controller = base.self.FindUnitController(unit);
                vector = base.self.CalcCoord(controller.CenterPosition);
                num = unit.x;
                num2 = unit.y;
                unit.x = &vector.x;
                unit.y = &vector.y;
                unit2 = this.mScene.Battle.FindUnitAtGrid(grid);
                unit.x = num;
                unit.y = num2;
                if (this.mScene.Battle.CheckSkillTarget(base.self.Battle.CurrentUnit, unit2, data) == null)
                {
                    goto Label_00EF;
                }
                return 1;
            Label_00EF:
                return 0;
            }

            private void OnCancelTarget()
            {
                base.self.mSkillTargetWindow.Hide();
                return;
            }

            private void OnClickGrid(Grid grid)
            {
                base.self.InterpCameraTarget(base.self.CalcGridCenter(grid));
                this.OnFocusGrid(grid);
                return;
            }

            private void OnClickUnit(TacticsUnitController controller)
            {
                base.self.InterpCameraTarget(controller);
                base.self.mFocusedUnit = controller;
                base.self.mMapModeFocusedUnit = base.self.mFocusedUnit;
                this.OnFocus(controller);
                return;
            }

            private unsafe void OnDrag()
            {
                if (this.mIgnoreDragVelocity != null)
                {
                    goto Label_002D;
                }
                this.mDragY += &base.self.mTouchController.DragDelta.y;
            Label_002D:
                if (this.mTargets.Count == null)
                {
                    goto Label_0044;
                }
                this.mDragScroll = 1;
            Label_0044:
                return;
            }

            private void OnDragEnd()
            {
                this.mDragY = 0f;
                this.mYScrollPos = 0f;
                this.mDragScroll = 0;
                this.mIgnoreDragVelocity = 0;
                return;
            }

            private unsafe void OnFocus(TacticsUnitController controller)
            {
                SkillData data;
                int num;
                IntVector2 vector;
                Unit unit;
                TacticsUnitController controller2;
                int num2;
                GridMap<int> map;
                bool flag;
                BattleCore.UnitResult result;
                int num3;
                int num4;
                IntVector2 vector2;
                int num5;
                int num6;
                BattleCore.CommandResult result2;
                int num7;
                int num8;
                TacticsUnitController controller3;
                int num9;
                int num10;
                int num11;
                bool flag2;
                int num12;
                BattleCore.UnitResult result3;
                EUnitSide side;
                int num13;
                int num14;
                int num15;
                bool flag3;
                Grid grid;
                BattleMap map2;
                GridMap<int> map3;
                int num16;
                TrickData data2;
                bool flag4;
                if ((controller != null) == null)
                {
                    goto Label_11A5;
                }
                data = &base.self.mTargetSelectorParam.Skill;
                if ((data != null) || (controller.Unit.IsGimmick == null))
                {
                    goto Label_007A;
                }
                if (base.self.mBattle.CurrentMap == null)
                {
                    goto Label_0079;
                }
                this.OnFocusGrid(base.self.Battle.CurrentMap[controller.Unit.x, controller.Unit.y]);
            Label_0079:
                return;
            Label_007A:
                if (data == null)
                {
                    goto Label_018A;
                }
                if (data.IsAllEffect() == null)
                {
                    goto Label_00AD;
                }
                controller = base.self.FindUnitController(base.self.mBattle.CurrentUnit);
                goto Label_018A;
            Label_00AD:
                if (this.IsValidSkillTarget(controller.Unit) != null)
                {
                    goto Label_018A;
                }
                num = 0;
                goto Label_0174;
            Label_00C5:
                if ((((base.self.mTacticsUnits[num] != controller) == null) || (base.self.mTacticsUnits[num].Unit.x != controller.Unit.x)) || ((base.self.mTacticsUnits[num].Unit.y != controller.Unit.y) || (this.IsValidSkillTarget(base.self.mTacticsUnits[num].Unit) == null)))
                {
                    goto Label_0170;
                }
                controller = base.self.mTacticsUnits[num];
                goto Label_018A;
            Label_0170:
                num += 1;
            Label_0174:
                if (num < base.self.mTacticsUnits.Count)
                {
                    goto Label_00C5;
                }
            Label_018A:
                if ((controller.Unit.IsGimmick == null) || (controller.Unit.IsDisableGimmick() == null))
                {
                    goto Label_01AB;
                }
                return;
            Label_01AB:
                if (this.mSelectGrid != null)
                {
                    goto Label_01EF;
                }
                if ((this.mSelectedTarget != null) == null)
                {
                    goto Label_01DD;
                }
                base.self.HideUnitMarkers(this.mSelectedTarget.Unit);
            Label_01DD:
                base.self.ShowUnitMarker(controller.Unit, 0);
            Label_01EF:
                this.mSelectedTarget = controller;
                vector = base.self.CalcCoord(controller.CenterPosition);
                &this.mTargetPosition.x = &vector.x;
                &this.mTargetPosition.y = &vector.y;
                base.self.mSelectedTarget = controller.Unit;
                base.self.UIParam_TargetValid = 0;
                unit = base.self.mBattle.CurrentUnit;
                controller2 = base.self.FindUnitController(unit);
                num2 = (data == null) ? 0 : data.GetHpCost(unit);
                if (data != null)
                {
                    goto Label_02C8;
                }
                map = base.self.mBattle.CreateMoveMap(controller.Unit, controller.Unit.CurrentStatus.param.mov);
                base.self.ShowWalkableGrids(map, 0);
                goto Label_02FC;
            Label_02C8:
                if (data.IsTargetTeleport == null)
                {
                    goto Label_02FC;
                }
                base.self.mTacticsSceneRoot.HideGridLayer(0);
                base.self.mDisplayBlockedGridMarker = 0;
                base.self.mGridDisplayBlockedGridMarker = null;
            Label_02FC:
                controller2.SetHPChangeYosou(unit.CurrentStatus.param.hp - num2, 0);
                base.self.mBattleUI.TargetMain.SetHpGaugeParam(unit.Side, unit.CurrentStatus.param.hp, unit.MaximumStatus.param.hp, num2, 0, 0);
                base.self.mBattleUI.TargetMain.UpdateHpGauge();
                base.self.mBattleUI.TargetSub.ResetHpGauge(base.self.mSelectedTarget.Side, base.self.mSelectedTarget.CurrentStatus.param.hp, base.self.mSelectedTarget.MaximumStatus.param.hp);
                flag = 0;
                result = null;
                if (&base.self.mTargetSelectorParam.Skill == null)
                {
                    goto Label_0C89;
                }
                if (((controller != null) == null) || (base.self.mTutorialTriggers == null))
                {
                    goto Label_045F;
                }
                num3 = 0;
                goto Label_044B;
            Label_041C:
                base.self.mTutorialTriggers[num3].OnTargetChange(this.mSelectedTarget.Unit, controller.Unit.TurnCount);
                num3 += 1;
            Label_044B:
                if (num3 < ((int) base.self.mTutorialTriggers.Length))
                {
                    goto Label_041C;
                }
            Label_045F:
                num4 = 0;
                goto Label_04E1;
            Label_0467:
                base.self.mTacticsUnits[num4].SetHPGaugeMode(0, null, null);
                if ((0 >= num2) || ((base.self.mTacticsUnits[num4] == controller2) == null))
                {
                    goto Label_04AC;
                }
                goto Label_04DB;
            Label_04AC:
                base.self.mTacticsUnits[num4].SetHPChangeYosou(base.self.mTacticsUnits[num4].VisibleHPValue, 0);
            Label_04DB:
                num4 += 1;
            Label_04E1:
                if (num4 < base.self.mTacticsUnits.Count)
                {
                    goto Label_0467;
                }
                if ((&base.self.mTargetSelectorParam.OnAccept == null) || (this.IsGridSelectable(base.self.mSelectedTarget) == null))
                {
                    goto Label_0C96;
                }
                vector2 = base.self.CalcCoord(controller2.CenterPosition);
                num5 = base.self.mSelectedTarget.x;
                num6 = base.self.mSelectedTarget.y;
                if (unit != base.self.mSelectedTarget)
                {
                    goto Label_057E;
                }
                num5 = &vector2.x;
                num6 = &vector2.y;
            Label_057E:
                if (this.mSelectGrid != null)
                {
                    goto Label_0593;
                }
                this.HilitArea(num5, num6);
            Label_0593:
                if (data.IsTargetGridNoUnit == null)
                {
                    goto Label_05A3;
                }
                goto Label_0C84;
            Label_05A3:
                if (data.IsTargetValidGrid == null)
                {
                    goto Label_05BF;
                }
                base.self.UIParam_TargetValid = 1;
                goto Label_0C84;
            Label_05BF:
                result2 = base.self.mBattle.GetCommandResult(unit, &vector2.x, &vector2.y, num5, num6, data);
                if ((result2 == null) || (result2.targets == null))
                {
                    goto Label_0C96;
                }
                num7 = 0;
                goto Label_0657;
            Label_0600:
                if ((base.self.mSelectedTarget != result2.reactions[num7].react_unit) || (unit != result2.reactions[num7].unit))
                {
                    goto Label_0651;
                }
                result = result2.reactions[num7];
                goto Label_066A;
            Label_0651:
                num7 += 1;
            Label_0657:
                if (num7 < result2.reactions.Count)
                {
                    goto Label_0600;
                }
            Label_066A:
                num8 = 0;
                goto Label_079F;
            Label_0672:
                controller3 = base.self.FindUnitController(result2.targets[num8].unit);
                if (result2.skill.IsDamagedSkill() == null)
                {
                    goto Label_074C;
                }
                controller3.SetHPGaugeMode(1, data, unit);
                num9 = result2.targets[num8].unit.CurrentStatus.param.hp - result2.targets[num8].hp_damage;
                num10 = 0;
                if (result2.skill.IsMhmDamage() == null)
                {
                    goto Label_073C;
                }
                num9 = result2.targets[num8].unit.CurrentStatus.param.hp;
                num10 = result2.targets[num8].hp_damage;
            Label_073C:
                controller3.SetHPChangeYosou(num9, num10);
                goto Label_0799;
            Label_074C:
                controller3.SetHPGaugeMode(2, null, null);
                controller3.SetHPChangeYosou(result2.targets[num8].unit.CurrentStatus.param.hp + result2.targets[num8].hp_heal, 0);
            Label_0799:
                num8 += 1;
            Label_079F:
                if (num8 < result2.targets.Count)
                {
                    goto Label_0672;
                }
                if ((result2.self_effect.hp_damage <= 0) && (result2.self_effect.hp_heal <= 0))
                {
                    goto Label_08AB;
                }
                num11 = 0;
                num11 = ((unit.CurrentStatus.param.hp - result2.self_effect.hp_damage) + result2.self_effect.hp_heal) - num2;
                num11 = Mathf.Min(num11, unit.MaximumStatus.param.hp);
                controller2.SetHPChangeYosou(num11, 0);
                base.self.mBattleUI.TargetMain.SetHpGaugeParam(unit.Side, unit.CurrentStatus.param.hp, unit.MaximumStatus.param.hp, result2.self_effect.hp_damage + num2, result2.self_effect.hp_heal, 0);
                base.self.mBattleUI.TargetMain.UpdateHpGauge();
            Label_08AB:
                if (result2.targets.Count <= 0)
                {
                    goto Label_0C96;
                }
                flag2 = data.IsNormalAttack();
                num12 = result2.targets.FindIndex(new Predicate<BattleCore.UnitResult>(this.<OnFocus>m__CB));
                if ((num12 == -1) || ((base.self.mBattleUI.TargetMain != null) == null))
                {
                    goto Label_0B4D;
                }
                result3 = result2.targets[num12];
                side = result2.targets[num12].unit.Side;
                num13 = result2.targets[num12].unit.CurrentStatus.param.hp;
                num14 = result2.targets[num12].unit.MaximumStatus.param.hp;
                if (data.SkillParam.IsHealSkill() == null)
                {
                    goto Label_09FD;
                }
                base.self.mBattleUI.TargetMain.SetHealAction(base.self.mBattle.CurrentUnit, result3.hp_heal, result3.critical, result3.avoid);
                base.self.mBattleUI.TargetSub.SetHpGaugeParam(side, num13, num14, 0, result2.targets[num12].hp_heal, 0);
                goto Label_0B35;
            Label_09FD:
                if ((data.SkillParam.IsDamagedSkill() == null) && (data.SkillParam.effect_type != 6))
                {
                    goto Label_0B09;
                }
                if (flag2 == null)
                {
                    goto Label_0A6E;
                }
                base.self.mBattleUI.TargetMain.SetAttackAction(base.self.mBattle.CurrentUnit, result3.hp_damage, result3.critical, 100 - result3.avoid, result3.cond_hit_lists);
                goto Label_0ACF;
            Label_0A6E:
                num15 = (result3.hp_damage <= 0) ? result3.mp_damage : result3.hp_damage;
                base.self.mBattleUI.TargetMain.SetSkillAction(base.self.mBattle.CurrentUnit, num15, result3.critical, 100 - result3.avoid, result3.cond_hit_lists);
            Label_0ACF:
                base.self.mBattleUI.TargetSub.SetHpGaugeParam(side, num13, num14, result2.targets[num12].hp_damage, 0, data.IsMhmDamage());
                goto Label_0B35;
            Label_0B09:
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, result3.cond_hit_lists);
            Label_0B35:
                base.self.mBattleUI.TargetSub.UpdateHpGauge();
                flag = 1;
            Label_0B4D:
                base.self.UIParam_TargetValid = 1;
                if ((data.IsAreaSkill() != null) || (base.self.mSelectedTarget == null))
                {
                    goto Label_0B9C;
                }
                base.self.UIParam_TargetValid = base.self.Battle.CheckSkillTarget(unit, base.self.mSelectedTarget, data);
            Label_0B9C:
                if ((data.IsTargetTeleport == null) || (base.self.mSelectedTarget == null))
                {
                    goto Label_0C96;
                }
                flag3 = 0;
                grid = base.self.mBattle.GetTeleportGrid(unit, &vector2.x, &vector2.y, base.self.mSelectedTarget, data, &flag3);
                if ((grid == null) || (base.self.mBattle.CurrentMap == null))
                {
                    goto Label_0C58;
                }
                map2 = base.self.mBattle.CurrentMap;
                map3 = new GridMap<int>(map2.Width, map2.Height);
                map3.fill(-1);
                map3.set(grid.x, grid.y, 0);
                base.self.ShowWalkableGrids(map3, 0);
            Label_0C58:
                if (flag3 != null)
                {
                    goto Label_0C96;
                }
                base.self.mDisplayBlockedGridMarker = 1;
                base.self.mGridDisplayBlockedGridMarker = grid;
                base.self.UIParam_TargetValid = 0;
            Label_0C84:
                goto Label_0C96;
            Label_0C89:
                this.HilitNormalAttack(controller.Unit, 0);
            Label_0C96:
                this.SetYesButtonEnable(base.self.UIParam_TargetValid);
                if ((base.self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_0D4A;
                }
                if (data != null)
                {
                    goto Label_0D08;
                }
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, null);
                base.self.mBattleUI.TargetMain.Close();
                goto Label_0D4A;
            Label_0D08:
                if (flag != null)
                {
                    goto Label_0D35;
                }
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, null);
            Label_0D35:
                base.self.mBattleUI.TargetMain.Open();
            Label_0D4A:
                base.self.mBattleUI.ClearEnableAll();
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_0FA1;
                }
                if (data != null)
                {
                    goto Label_0E12;
                }
                if (controller.Unit.IsGimmick == null)
                {
                    goto Label_0DB6;
                }
                base.self.mBattleUI.TargetSub.ForceClose(0);
                base.self.mBattleUI.OnMapViewSelectGrid();
                goto Label_0E0D;
            Label_0DB6:
                base.self.mBattleUI.TargetSub.SetNoAction(base.self.mSelectedTarget, null);
                base.self.mBattleUI.TargetSub.Open();
                base.self.mBattleUI.OnMapViewSelectUnit();
                base.self.mBattleUI.IsEnableUnit = 1;
            Label_0E0D:
                goto Label_0FA1;
            Label_0E12:
                if (flag == null)
                {
                    goto Label_0EFB;
                }
                if ((base.self.mSelectedTarget.IsBreakObj != null) && (base.self.mSelectedTarget.IsBreakDispUI == null))
                {
                    goto Label_0EE0;
                }
                if (result == null)
                {
                    goto Label_0EA5;
                }
                num16 = (result.hp_damage <= 0) ? result.mp_damage : result.hp_damage;
                base.self.mBattleUI.TargetSub.SetAttackAction(base.self.mSelectedTarget, num16, 0, 100 - result.avoid, result.cond_hit_lists);
                goto Label_0EC6;
            Label_0EA5:
                base.self.mBattleUI.TargetSub.SetNoAction(base.self.mSelectedTarget, null);
            Label_0EC6:
                base.self.mBattleUI.TargetSub.Open();
                goto Label_0EF6;
            Label_0EE0:
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_0EF6:
                goto Label_0FA1;
            Label_0EFB:
                if (base.self.mSelectedTarget.UnitType == null)
                {
                    goto Label_0F50;
                }
                if (base.self.mSelectedTarget.UnitType == 3)
                {
                    goto Label_0F50;
                }
                if (base.self.mSelectedTarget.IsBreakObj == null)
                {
                    goto Label_0F8B;
                }
                if (base.self.mSelectedTarget.IsBreakDispUI == null)
                {
                    goto Label_0F8B;
                }
            Label_0F50:
                base.self.mBattleUI.TargetSub.SetNoAction(base.self.mSelectedTarget, null);
                base.self.mBattleUI.TargetSub.Open();
                goto Label_0FA1;
            Label_0F8B:
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_0FA1:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_105C;
                }
                if (data != null)
                {
                    goto Label_1047;
                }
                if (controller.Unit.IsGimmick == null)
                {
                    goto Label_101D;
                }
                if (controller.Unit.IsDisableGimmick() != null)
                {
                    goto Label_101D;
                }
                base.self.mBattleUI.OnMapViewSelectGrid();
                base.self.mBattleUI.TargetObjectSub.Open();
                base.self.mBattleUI.IsEnableGimmick = 1;
                goto Label_1042;
            Label_101D:
                base.self.mBattleUI.OnMapViewSelectUnit();
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_1042:
                goto Label_105C;
            Label_1047:
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_105C:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_10E1;
                }
                data2 = TrickData.SearchEffect(&vector.x, &vector.y);
                if (data2 == null)
                {
                    goto Label_10CC;
                }
                if (data2.IsVisualized() == null)
                {
                    goto Label_10CC;
                }
                base.self.mBattleUI.TargetTrickSub.SetTrick(data2.TrickParam);
                base.self.mBattleUI.IsEnableTrick = 1;
            Label_10CC:
                base.self.mBattleUI.TargetTrickSub.Close();
            Label_10E1:
                flag4 = base.self.mBattleUI.IsNeedFlip();
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_1125;
                }
                base.self.mBattleUI.TargetSub.SetEnableFlipButton(flag4);
            Label_1125:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_1157;
                }
                base.self.mBattleUI.TargetObjectSub.SetEnableFlipButton(flag4);
            Label_1157:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_1189;
                }
                base.self.mBattleUI.TargetTrickSub.SetEnableFlipButton(flag4);
            Label_1189:
                base.self.OnGimmickUpdate();
                base.self.SetUnitUiHeight(controller.Unit);
            Label_11A5:
                return;
            }

            private unsafe void OnFocusGrid(Grid grid)
            {
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                IntVector2 vector2;
                Unit unit2;
                TacticsUnitController controller2;
                int num;
                SkillData data;
                Unit unit3;
                int num2;
                bool flag;
                Unit unit4;
                BattleCore.CommandResult result;
                int num3;
                TacticsUnitController controller3;
                int num4;
                int num5;
                TrickData data2;
                TrickData data3;
                bool flag2;
                unit = base.self.mBattle.CurrentUnit;
                controller = base.self.FindUnitController(unit);
                &vector.x = unit.x;
                &vector.y = unit.y;
                vector2 = base.self.CalcCoord(controller.CenterPosition);
                unit.x = &vector2.x;
                unit.y = &vector2.y;
                this.HilitArea(grid.x, grid.y);
                unit2 = base.self.mBattle.FindUnitAtGrid(grid);
                if (unit2 == null)
                {
                    goto Label_00DC;
                }
                controller2 = base.self.FindUnitController(unit2);
                if ((controller2 != null) == null)
                {
                    goto Label_0C32;
                }
                base.self.mFocusedUnit = controller2;
                base.self.mMapModeFocusedUnit = base.self.mFocusedUnit;
                this.OnFocus(controller2);
                goto Label_0C32;
            Label_00DC:
                if (&base.self.mTargetSelectorParam.Skill == null)
                {
                    goto Label_0145;
                }
                if (&base.self.mTargetSelectorParam.Skill.IsAllEffect() == null)
                {
                    goto Label_0145;
                }
                if ((controller != null) == null)
                {
                    goto Label_0C32;
                }
                base.self.mFocusedUnit = controller;
                base.self.mMapModeFocusedUnit = base.self.mFocusedUnit;
                this.OnFocus(controller);
                goto Label_0C32;
            Label_0145:
                this.mSelectedTarget = null;
                base.self.UIParam_TargetValid = 0;
                num = 0;
                goto Label_01AF;
            Label_0160:
                base.self.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
                base.self.mTacticsUnits[num].SetHPChangeYosou(base.self.mTacticsUnits[num].VisibleHPValue, 0);
                num += 1;
            Label_01AF:
                if (num < base.self.mTacticsUnits.Count)
                {
                    goto Label_0160;
                }
                data = &base.self.mTargetSelectorParam.Skill;
                unit3 = null;
                if (data == null)
                {
                    goto Label_0695;
                }
                num2 = data.GetHpCost(unit);
                controller.SetHPChangeYosou(unit.CurrentStatus.param.hp - num2, 0);
                base.self.mBattleUI.TargetMain.SetHpGaugeParam(unit.Side, unit.CurrentStatus.param.hp, unit.MaximumStatus.param.hp, num2, 0, 0);
                base.self.mBattleUI.TargetMain.UpdateHpGauge();
                if (&base.self.mTargetSelectorParam.OnAccept == null)
                {
                    goto Label_06AA;
                }
                if (this.mTargetGrids.get(grid.x, grid.y) == null)
                {
                    goto Label_06AA;
                }
                flag = 1;
                if (data.IsTargetGridNoUnit == null)
                {
                    goto Label_02F5;
                }
                unit4 = base.self.mBattle.FindUnitAtGrid(grid);
                if (unit4 != null)
                {
                    goto Label_02EE;
                }
                unit4 = base.self.mBattle.FindGimmickAtGrid(grid, 0, null);
                if (unit4 == null)
                {
                    goto Label_02EE;
                }
                if (unit4.IsBreakObj != null)
                {
                    goto Label_02EE;
                }
                unit4 = null;
            Label_02EE:
                flag = unit4 == null;
            Label_02F5:
                if (flag == null)
                {
                    goto Label_05D3;
                }
                result = base.self.mBattle.GetCommandResult(unit, &vector2.x, &vector2.y, grid.x, grid.y, data);
                if (result == null)
                {
                    goto Label_05D3;
                }
                if (result.targets == null)
                {
                    goto Label_05D3;
                }
                num3 = 0;
                goto Label_05C0;
            Label_0346:
                controller3 = base.self.FindUnitController(result.targets[num3].unit);
                if (result.skill.IsDamagedSkill() == null)
                {
                    goto Label_04BC;
                }
                controller3.SetHPGaugeMode(1, data, unit);
                num4 = result.targets[num3].unit.CurrentStatus.param.hp - result.targets[num3].hp_damage;
                num5 = 0;
                if (result.skill.IsMhmDamage() == null)
                {
                    goto Label_0411;
                }
                num4 = result.targets[num3].unit.CurrentStatus.param.hp;
                num5 = result.targets[num3].hp_damage;
            Label_0411:
                controller3.SetHPChangeYosou(num4, num5);
                base.self.mBattleUI.TargetSub.SetHpGaugeParam(result.targets[num3].unit.Side, result.targets[num3].unit.CurrentStatus.param.hp, result.targets[num3].unit.MaximumStatus.param.hp, result.targets[num3].hp_damage, 0, result.skill.IsMhmDamage());
                goto Label_0599;
            Label_04BC:
                controller3.SetHPGaugeMode(2, null, null);
                controller3.SetHPChangeYosou(result.targets[num3].unit.CurrentStatus.param.hp + result.targets[num3].hp_heal, 0);
                base.self.mBattleUI.TargetSub.SetHpGaugeParam(result.targets[num3].unit.Side, result.targets[num3].unit.CurrentStatus.param.hp, result.targets[num3].unit.MaximumStatus.param.hp, 0, result.targets[num3].hp_heal, 0);
            Label_0599:
                base.self.mBattleUI.TargetSub.UpdateHpGauge();
                base.self.UIParam_TargetValid = 1;
                num3 += 1;
            Label_05C0:
                if (num3 < result.targets.Count)
                {
                    goto Label_0346;
                }
            Label_05D3:
                if (data.IsTargetGridNoUnit == null)
                {
                    goto Label_064B;
                }
                base.self.UIParam_TargetValid = flag;
                if (base.self.UIParam_TargetValid == null)
                {
                    goto Label_06AA;
                }
                if (data.EffectType != 0x18)
                {
                    goto Label_06AA;
                }
                data2 = TrickData.SearchEffect(grid.x, grid.y);
                if (data2 == null)
                {
                    goto Label_06AA;
                }
                if (data2.TrickParam.IsNoOverWrite == null)
                {
                    goto Label_06AA;
                }
                base.self.UIParam_TargetValid = 0;
                goto Label_0690;
            Label_064B:
                if (data.IsTargetValidGrid == null)
                {
                    goto Label_0668;
                }
                base.self.UIParam_TargetValid = 1;
                goto Label_0690;
            Label_0668:
                if (data.IsCastSkill() == null)
                {
                    goto Label_06AA;
                }
                if (base.self.UIParam_TargetValid != null)
                {
                    goto Label_06AA;
                }
                base.self.UIParam_TargetValid = 1;
            Label_0690:
                goto Label_06AA;
            Label_0695:
                unit3 = base.self.mBattle.FindGimmickAtGrid(grid, 0, null);
            Label_06AA:
                &this.mTargetPosition.x = grid.x;
                &this.mTargetPosition.y = grid.y;
                this.SetYesButtonEnable(base.self.UIParam_TargetValid);
                if ((base.self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_078A;
                }
                if (data != null)
                {
                    goto Label_073F;
                }
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, null);
                base.self.mBattleUI.TargetMain.Close();
                goto Label_078A;
            Label_073F:
                if (base.self.UIParam_TargetValid != null)
                {
                    goto Label_0775;
                }
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, null);
            Label_0775:
                base.self.mBattleUI.TargetMain.Open();
            Label_078A:
                base.self.mBattleUI.ClearEnableAll();
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_0990;
                }
                if (data != null)
                {
                    goto Label_08CC;
                }
                if (unit3 == null)
                {
                    goto Label_08A1;
                }
                if (unit3.IsBreakObj == null)
                {
                    goto Label_0876;
                }
                if (unit3.IsBreakDispUI == null)
                {
                    goto Label_0876;
                }
                base.self.mBattleUI.TargetSub.ResetHpGauge(unit3.Side, unit3.CurrentStatus.param.hp, unit3.MaximumStatus.param.hp);
                base.self.mBattleUI.TargetSub.SetNoAction(unit3, null);
                base.self.mBattleUI.TargetSub.Open();
                base.self.mBattleUI.OnMapViewSelectUnit();
                base.self.mBattleUI.IsEnableUnit = 1;
                goto Label_089C;
            Label_0876:
                base.self.mBattleUI.OnMapViewSelectGrid();
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_089C:
                goto Label_08C7;
            Label_08A1:
                base.self.mBattleUI.OnMapViewSelectGrid();
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_08C7:
                goto Label_0990;
            Label_08CC:
                unit3 = base.self.mBattle.FindGimmickAtGrid(grid, 0, null);
                if (unit3 == null)
                {
                    goto Label_097A;
                }
                if (unit3.IsBreakObj == null)
                {
                    goto Label_097A;
                }
                if (unit3.IsBreakDispUI == null)
                {
                    goto Label_097A;
                }
                base.self.mBattleUI.TargetSub.ResetHpGauge(unit3.Side, unit3.CurrentStatus.param.hp, unit3.MaximumStatus.param.hp);
                base.self.mBattleUI.TargetSub.SetNoAction(unit3, null);
                base.self.mBattleUI.TargetSub.Open();
                goto Label_0990;
            Label_097A:
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_0990:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_0A71;
                }
                if (data != null)
                {
                    goto Label_0A5C;
                }
                if (unit3 == null)
                {
                    goto Label_0A32;
                }
                if (unit3.IsBreakObj != null)
                {
                    goto Label_0A18;
                }
                base.self.mBattleUI.TargetObjectSub.SetNoAction(unit3, null);
                base.self.mBattleUI.TargetObjectSub.Open();
                base.self.mBattleUI.OnMapViewSelectGrid();
                base.self.mBattleUI.IsEnableGimmick = 1;
                goto Label_0A2D;
            Label_0A18:
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_0A2D:
                goto Label_0A57;
            Label_0A32:
                base.self.mBattleUI.TargetObjectSub.Close();
                base.self.mBattleUI.OnMapViewSelectGrid();
            Label_0A57:
                goto Label_0A71;
            Label_0A5C:
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_0A71:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_0B6E;
                }
                if (data != null)
                {
                    goto Label_0B59;
                }
                data3 = TrickData.SearchEffect(grid.x, grid.y);
                if (data3 == null)
                {
                    goto Label_0AE6;
                }
                if (data3.IsVisualized() == null)
                {
                    goto Label_0AE6;
                }
                base.self.mBattleUI.TargetTrickSub.SetTrick(data3.TrickParam);
                base.self.mBattleUI.IsEnableTrick = 1;
            Label_0AE6:
                if (base.self.mBattleUI.IsEnableTrick == null)
                {
                    goto Label_0B1C;
                }
                if (unit3 != null)
                {
                    goto Label_0B1C;
                }
                base.self.mBattleUI.TargetTrickSub.Open();
                goto Label_0B31;
            Label_0B1C:
                base.self.mBattleUI.TargetTrickSub.Close();
            Label_0B31:
                if (unit3 == null)
                {
                    goto Label_0B44;
                }
                if (unit3.IsBreakObj != null)
                {
                    goto Label_0B6E;
                }
            Label_0B44:
                base.self.mBattleUI.OnMapViewSelectGrid();
                goto Label_0B6E;
            Label_0B59:
                base.self.mBattleUI.TargetTrickSub.Close();
            Label_0B6E:
                flag2 = base.self.mBattleUI.IsNeedFlip();
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_0BB2;
                }
                base.self.mBattleUI.TargetSub.SetEnableFlipButton(flag2);
            Label_0BB2:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_0BE4;
                }
                base.self.mBattleUI.TargetObjectSub.SetEnableFlipButton(flag2);
            Label_0BE4:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_0C16;
                }
                base.self.mBattleUI.TargetTrickSub.SetEnableFlipButton(flag2);
            Label_0C16:
                base.self.OnGimmickUpdate();
                base.self.SetUiHeight(grid.height);
            Label_0C32:
                unit.x = &vector.x;
                unit.y = &vector.y;
                return;
            }

            private unsafe void OnMapExitSelect()
            {
                int num;
                num = 0;
                goto Label_0051;
            Label_0007:
                base.self.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
                base.self.mTacticsUnits[num].SetHPChangeYosou(base.self.mTacticsUnits[num].VisibleHPValue, 0);
                num += 1;
            Label_0051:
                if (num < base.self.mTacticsUnits.Count)
                {
                    goto Label_0007;
                }
                base.self.mBattleUI.OnTargetSelectEnd();
                &base.self.mTargetSelectorParam.OnCancel();
                base.self.mBattleUI.HideTargetWindows();
                base.self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                base.self.mBattleUI.OnMapViewEnd();
                return;
            }

            private void OnNextTargetClick(GameObject go)
            {
                this.ShiftTarget(1);
                return;
            }

            private void OnPrevTargetClick(GameObject go)
            {
                this.ShiftTarget(-1);
                return;
            }

            private unsafe void OnSelectTargetMode(bool targetIsGrid)
            {
                SceneBattle.SelectTargetPositionWithSkill skill;
                base.self.mSkillTargetWindow.Hide();
                base.self.mBattleUI.OnTargetSelectEnd();
                skill = (SceneBattle.SelectTargetPositionWithSkill) &base.self.mTargetSelectorParam.OnAccept;
                skill(&this.mTargetPosition.x, &this.mTargetPosition.y, &base.self.mTargetSelectorParam.Skill, targetIsGrid == 0);
                base.self.mBattleUI.HideTargetWindows();
                base.self.mBattleUI.OnVersusEnd();
                return;
            }

            private unsafe void OnYesNoSelect(bool yes)
            {
                int num;
                bool flag;
                SceneBattle.SelectTargetPositionWithItem item;
                Unit unit;
                bool flag2;
                TacticsUnitController controller;
                IntVector2 vector;
                bool flag3;
                SkillData data;
                SceneBattle.SelectTargetPositionWithSkill skill;
                Unit unit2;
                num = 0;
                goto Label_0051;
            Label_0007:
                base.self.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
                base.self.mTacticsUnits[num].SetHPChangeYosou(base.self.mTacticsUnits[num].VisibleHPValue, 0);
                num += 1;
            Label_0051:
                if (num < base.self.mTacticsUnits.Count)
                {
                    goto Label_0007;
                }
                flag = 0;
                if (yes == null)
                {
                    goto Label_0292;
                }
                if (base.self.UIParam_TargetValid == null)
                {
                    goto Label_02EC;
                }
                if (&base.self.mTargetSelectorParam.Item == null)
                {
                    goto Label_00FB;
                }
                base.self.mBattleUI.OnTargetSelectEnd();
                item = (SceneBattle.SelectTargetPositionWithItem) &base.self.mTargetSelectorParam.OnAccept;
                item(&this.mTargetPosition.x, &this.mTargetPosition.y, &base.self.mTargetSelectorParam.Item);
                base.self.mBattleUI.HideTargetWindows();
                goto Label_028D;
            Label_00FB:
                unit = base.self.Battle.CurrentUnit;
                flag2 = 0;
                if (&base.self.mTargetSelectorParam.Skill.EffectType != 0x12)
                {
                    goto Label_0174;
                }
                controller = base.self.FindUnitController(unit);
                vector = base.self.CalcCoord(controller.CenterPosition);
                if (unit.x != &vector.x)
                {
                    goto Label_0174;
                }
                if (unit.y != &vector.y)
                {
                    goto Label_0174;
                }
                flag2 = 1;
            Label_0174:
                if (this.NeedsTargetKakunin(unit) == null)
                {
                    goto Label_018D;
                }
                this.StartTargetKakunin();
                flag = 1;
                goto Label_0226;
            Label_018D:
                base.self.mBattleUI.OnTargetSelectEnd();
                flag3 = 0;
                data = &base.self.mTargetSelectorParam.Skill;
                if (data == null)
                {
                    goto Label_01DE;
                }
                if (data.IsForceUnitLock() == null)
                {
                    goto Label_01DE;
                }
                if (data.SkillParam.range_max != null)
                {
                    goto Label_01DE;
                }
                flag3 = 1;
            Label_01DE:
                skill = (SceneBattle.SelectTargetPositionWithSkill) &base.self.mTargetSelectorParam.OnAccept;
                skill(&this.mTargetPosition.x, &this.mTargetPosition.y, data, flag3);
                base.self.mBattleUI.HideTargetWindows();
            Label_0226:
                if (flag2 == null)
                {
                    goto Label_024F;
                }
                base.self.mCurrentUnitStartX = unit.x;
                base.self.mCurrentUnitStartY = unit.y;
            Label_024F:
                unit2 = base.self.Battle.CurrentUnit;
                base.self.mSkillDirectionByKouka = base.self.GetSkillDirectionByTargetArea(unit2, unit2.x, unit2.y, this.mTargetAreaGridMap);
            Label_028D:
                goto Label_02EC;
            Label_0292:
                base.self.mBattleUI.OnTargetSelectEnd();
                if (&base.self.mTargetSelectorParam.IsThrowTargetSelect == null)
                {
                    goto Label_02C7;
                }
                base.self.GotoState_WaitSignal<SceneBattle.State_PreThrowTargetSelect>();
                goto Label_02DC;
            Label_02C7:
                &base.self.mTargetSelectorParam.OnCancel();
            Label_02DC:
                base.self.mBattleUI.HideTargetWindows();
            Label_02EC:
                if (flag != null)
                {
                    goto Label_0302;
                }
                base.self.mBattleUI.OnVersusEnd();
            Label_0302:
                return;
            }

            private void SetYesButtonEnable(bool enable)
            {
                Selectable selectable;
                selectable = base.self.mBattleUI.CommandWindow.OKButton.GetComponent<Selectable>();
                if ((selectable != null) == null)
                {
                    goto Label_002E;
                }
                selectable.set_interactable(enable);
            Label_002E:
                return;
            }

            private unsafe void ShiftTarget(int delta)
            {
                TacticsUnitController controller;
                int num;
                if (this.mTargets.Count != null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                controller = base.self.mFocusedUnit;
                if (&base.self.mTargetSelectorParam.Skill != null)
                {
                    goto Label_003E;
                }
                controller = base.self.mMapModeFocusedUnit;
            Label_003E:
                num = this.mTargets.IndexOf(controller);
                if (num >= 0)
                {
                    goto Label_0054;
                }
                num = 0;
            Label_0054:
                num = ((num + delta) + this.mTargets.Count) % this.mTargets.Count;
                this.OnClickUnit(this.mTargets[num]);
                if (BattleUnitDetail.Instance == null)
                {
                    goto Label_00AB;
                }
                BattleUnitDetail.Instance.Refresh(base.self.mFocusedUnit.Unit);
            Label_00AB:
                return;
            }

            private void StartTargetKakunin()
            {
                base.self.mSkillTargetWindow.OnCancel = new SkillTargetWindow.CancelEvent(this.OnCancelTarget);
                base.self.mSkillTargetWindow.OnTargetSelect = new SkillTargetWindow.TargetSelectEvent(this.OnSelectTargetMode);
                base.self.mSkillTargetWindow.Show();
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                int num;
                int num2;
                Grid grid;
                if (this.mDragScroll == null)
                {
                    goto Label_00E8;
                }
                this.mYScrollPos += (((&self.mTouchController.DragDelta.y <= 0f) ? -1f : 1f) * Time.get_unscaledDeltaTime()) * 2f;
                if (this.mIgnoreDragVelocity != null)
                {
                    goto Label_0071;
                }
                this.mYScrollPos += this.mDragY / 20f;
            Label_0071:
                if (this.mYScrollPos > -1f)
                {
                    goto Label_00AF;
                }
                this.mYScrollPos = 0f;
                this.mIgnoreDragVelocity = 1;
                if (&self.mTargetSelectorParam.Skill == null)
                {
                    goto Label_00E8;
                }
                this.ShiftTarget(-1);
                goto Label_00E8;
            Label_00AF:
                if (this.mYScrollPos < 1f)
                {
                    goto Label_00E8;
                }
                this.mYScrollPos = 0f;
                this.mIgnoreDragVelocity = 1;
                if (&self.mTargetSelectorParam.Skill == null)
                {
                    goto Label_00E8;
                }
                this.ShiftTarget(1);
            Label_00E8:
                if (this.mSelectGrid == null)
                {
                    goto Label_018E;
                }
                if (self.m_TargetCameraPositionInterp != null)
                {
                    goto Label_018E;
                }
                num = Mathf.Clamp(Mathf.FloorToInt(&self.m_CameraPosition.x), 0, self.mBattle.CurrentMap.Width);
                num2 = Mathf.Clamp(Mathf.FloorToInt(&self.m_CameraPosition.z), 0, self.mBattle.CurrentMap.Height);
                if (&this.mTargetPosition.x != num)
                {
                    goto Label_016E;
                }
                if (&this.mTargetPosition.y == num2)
                {
                    goto Label_018E;
                }
            Label_016E:
                grid = self.mBattle.CurrentMap[num, num2];
                if (grid == null)
                {
                    goto Label_018E;
                }
                this.OnFocusGrid(grid);
            Label_018E:
                return;
            }
        }

        private class State_SelectUnitChgV2 : State<SceneBattle>
        {
            private Unit mUnitChgTo;
            private List<Unit> mTargets;

            public State_SelectUnitChgV2()
            {
                this.mTargets = new List<Unit>(2);
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                Unit unit;
                List<Unit>.Enumerator enumerator;
                self.InterpCameraTargetToCurrent();
                this.mTargets.Clear();
                enumerator = self.Battle.Player.GetEnumerator();
            Label_0022:
                try
                {
                    goto Label_007C;
                Label_0027:
                    unit = &enumerator.Current;
                    if (self.Battle.StartingMembers.Contains(unit) == null)
                    {
                        goto Label_004A;
                    }
                    goto Label_007C;
                Label_004A:
                    if (unit.IsDead != null)
                    {
                        goto Label_007C;
                    }
                    if (unit.IsEntry == null)
                    {
                        goto Label_007C;
                    }
                    if (unit.IsSub != null)
                    {
                        goto Label_0070;
                    }
                    goto Label_007C;
                Label_0070:
                    this.mTargets.Add(unit);
                Label_007C:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0027;
                    }
                    goto Label_0099;
                }
                finally
                {
                Label_008D:
                    ((List<Unit>.Enumerator) enumerator).Dispose();
                }
            Label_0099:
                if ((self.mBattleUI.UnitChgWindow != null) == null)
                {
                    goto Label_00CB;
                }
                self.mBattleUI.UnitChgWindow.OnSelectUnit = new BattleUnitChg.SelectEvent(this.OnSelectUnit);
            Label_00CB:
                self.mOnRequestStateChange = new SceneBattle.StateTransitionRequest(this.OnStateChange);
                self.StepToNear(self.Battle.CurrentUnit);
                return;
            }

            public override void End(SceneBattle self)
            {
                if ((self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_0038;
                }
                self.mBattleUI.TargetSub.SetNextTargetArrowActive(0);
                self.mBattleUI.TargetSub.SetPrevTargetArrowActive(0);
            Label_0038:
                if ((self.mBattleUI.UnitChgWindow != null) == null)
                {
                    goto Label_005F;
                }
                self.mBattleUI.UnitChgWindow.OnSelectUnit = null;
            Label_005F:
                self.mOnRequestStateChange = null;
                return;
            }

            private void OnNextTargetClick(GameObject go)
            {
                this.ShiftTarget(1);
                return;
            }

            private void OnPrevTargetClick(GameObject go)
            {
                this.ShiftTarget(-1);
                return;
            }

            private void OnSelectUnit(Unit unit_chg_to)
            {
                UnitCommands commands1;
                Unit unit;
                TacticsUnitController controller;
                base.self.mBattleUI.OnUnitChgSelectEnd();
                this.mUnitChgTo = unit_chg_to;
                unit = base.self.mBattle.CurrentUnit;
                controller = base.self.FindUnitController(unit);
                if ((controller != null) == null)
                {
                    goto Label_026F;
                }
                base.self.HideUnitMarkers(0);
                base.self.ShowUnitMarker(unit, 0);
                controller.SetHPGaugeMode(3, null, null);
                if ((base.self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_00EF;
                }
                base.self.mBattleUI.TargetMain.ResetHpGauge(unit.Side, unit.CurrentStatus.param.hp, unit.MaximumStatus.param.hp);
                base.self.mBattleUI.TargetMain.SetNoAction(unit, null);
                base.self.mBattleUI.TargetMain.Open();
            Label_00EF:
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_01FF;
                }
                base.self.mBattleUI.TargetSub.ResetHpGauge(unit_chg_to.Side, unit_chg_to.CurrentStatus.param.hp, unit_chg_to.MaximumStatus.param.hp);
                if (this.mTargets.Count <= 1)
                {
                    goto Label_01A7;
                }
                base.self.mBattleUI.TargetSub.ActivateNextTargetArrow(new ButtonExt.ButtonClickEvent(this.OnNextTargetClick));
                base.self.mBattleUI.TargetSub.ActivatePrevTargetArrow(new ButtonExt.ButtonClickEvent(this.OnPrevTargetClick));
                goto Label_01D3;
            Label_01A7:
                base.self.mBattleUI.TargetSub.SetNextTargetArrowActive(0);
                base.self.mBattleUI.TargetSub.SetPrevTargetArrowActive(0);
            Label_01D3:
                base.self.mBattleUI.TargetSub.SetNoAction(unit_chg_to, null);
                base.self.mBattleUI.TargetSub.Open();
            Label_01FF:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_022F;
                }
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_022F:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_025F;
                }
                base.self.mBattleUI.TargetTrickSub.Close();
            Label_025F:
                base.self.mBattleUI.OnVersusStart();
            Label_026F:
                commands1 = base.self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Combine(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                base.self.mBattleUI.OnUnitChgConfirmStart();
                return;
            }

            private void OnStateChange(SceneBattle.StateTransitionTypes req)
            {
                if (req != null)
                {
                    goto Label_000B;
                }
                goto Label_0031;
            Label_000B:
                base.self.mBattleUI.OnUnitChgSelectEnd();
                base.self.HideGrid();
                base.self.GotoMapCommand();
            Label_0031:
                return;
            }

            private unsafe void OnYesNoSelect(bool yes)
            {
                UnitCommands commands1;
                Unit unit;
                Unit unit2;
                TacticsUnitController controller;
                IntVector2 vector;
                EUnitDirection direction;
                TacticsUnitController controller2;
                commands1 = base.self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Remove(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                base.self.mBattleUI.OnUnitChgConfirmEnd();
                unit = base.self.Battle.CurrentUnit;
                unit2 = this.mUnitChgTo;
                controller = base.self.FindUnitController(unit);
                if ((controller != null) == null)
                {
                    goto Label_008C;
                }
                base.self.HideUnitMarkers(controller);
                controller.SetHPGaugeMode(0, null, null);
            Label_008C:
                if ((base.self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_00BD;
                }
                base.self.mBattleUI.TargetMain.ForceClose(1);
            Label_00BD:
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_011A;
                }
                base.self.mBattleUI.TargetSub.SetNextTargetArrowActive(0);
                base.self.mBattleUI.TargetSub.SetPrevTargetArrowActive(0);
                base.self.mBattleUI.TargetSub.ForceClose(1);
            Label_011A:
                base.self.mBattleUI.OnVersusEnd();
                if (yes == null)
                {
                    goto Label_01F7;
                }
                base.self.HideGrid();
                if (unit == null)
                {
                    goto Label_01B5;
                }
                &vector = new IntVector2(unit.x, unit.y);
                direction = unit.Direction;
                controller2 = base.self.FindUnitController(unit);
                if ((controller2 != null) == null)
                {
                    goto Label_0193;
                }
                vector = base.self.CalcCoord(controller2.CenterPosition);
                direction = controller2.CalcUnitDirectionFromRotation();
            Label_0193:
                base.self.Battle.UnitChange(unit, &vector.x, &vector.y, direction, unit2);
            Label_01B5:
                base.self.Battle.MapCommandEnd(base.self.Battle.CurrentUnit);
                base.self.Battle.CommandWait(1);
                base.self.GotoState_WaitSignal<SceneBattle.State_WaitForLog>();
                goto Label_0203;
            Label_01F7:
                base.self.GotoUnitChgSelect(1);
            Label_0203:
                return;
            }

            private void ShiftTarget(int delta)
            {
                int num;
                if (this.mTargets.Count != null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_00FA;
                }
                num = this.mTargets.IndexOf(this.mUnitChgTo);
                if (num >= 0)
                {
                    goto Label_0047;
                }
                num = 0;
            Label_0047:
                num = ((num + delta) + this.mTargets.Count) % this.mTargets.Count;
                this.mUnitChgTo = this.mTargets[num];
                base.self.mBattleUI.TargetSub.ResetHpGauge(this.mUnitChgTo.Side, this.mUnitChgTo.CurrentStatus.param.hp, this.mUnitChgTo.MaximumStatus.param.hp);
                base.self.mBattleUI.TargetSub.SetNoAction(this.mUnitChgTo, null);
                base.self.mBattleUI.TargetSub.Open();
            Label_00FA:
                return;
            }
        }

        private class State_SpawnShieldEffects : State<SceneBattle>
        {
            private TacticsUnitController mUnit;
            private TacticsUnitController.ShieldState mShield;
            private bool mIsFinished;

            public State_SpawnShieldEffects()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                List<TacticsUnitController>.Enumerator enumerator;
                enumerator = self.mTacticsUnits.GetEnumerator();
            Label_000C:
                try
                {
                    goto Label_0036;
                Label_0011:
                    controller = &enumerator.Current;
                    if (self.mIgnoreShieldEffect.Contains(controller) == null)
                    {
                        goto Label_002F;
                    }
                    goto Label_0036;
                Label_002F:
                    controller.UpdateShields(0);
                Label_0036:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0011;
                    }
                    goto Label_0053;
                }
                finally
                {
                Label_0047:
                    ((List<TacticsUnitController>.Enumerator) enumerator).Dispose();
                }
            Label_0053:
                if (self.FindChangedShield(&this.mUnit, &this.mShield) != null)
                {
                    goto Label_0071;
                }
                self.GotoState<SceneBattle.State_TriggerHPEvents>();
                return;
            Label_0071:
                this.mIsFinished = 0;
                self.StartCoroutine(this.SpawnEffectsAsync());
                return;
            }

            [DebuggerHidden]
            private IEnumerator SpawnEffectsAsync()
            {
                <SpawnEffectsAsync>c__Iterator44 iterator;
                iterator = new <SpawnEffectsAsync>c__Iterator44();
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mIsFinished != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                self.mIgnoreShieldEffect.Clear();
                self.GotoState<SceneBattle.State_TriggerHPEvents>();
                return;
            }

            [CompilerGenerated]
            private sealed class <SpawnEffectsAsync>c__Iterator44 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal GameObject <effectInst>__0;
                internal int <i>__1;
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_SpawnShieldEffects <>f__this;

                public <SpawnEffectsAsync>c__Iterator44()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0029;

                        case 1:
                            goto Label_00AA;

                        case 2:
                            goto Label_00E7;

                        case 3:
                            goto Label_019D;
                    }
                    goto Label_0255;
                Label_0029:
                    this.<>f__this.self.LoadShieldEffects();
                    this.<>f__this.self.SetCameraOffset(&GameSettings.Instance.Quest.UnitCamera.get_transform());
                    this.<>f__this.self.InterpCameraTarget(this.<>f__this.mUnit);
                    this.<>f__this.self.InterpCameraDistance(GameSettings.Instance.GameCamera_SkillCameraDistance);
                    goto Label_00AA;
                Label_0097:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_0257;
                Label_00AA:
                    if (this.<>f__this.self.IsCameraMoving != null)
                    {
                        goto Label_0097;
                    }
                    if (this.<>f__this.self.mLoadingShieldEffects == null)
                    {
                        goto Label_00E7;
                    }
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0257;
                Label_00E7:
                    this.<effectInst>__0 = this.<>f__this.self.SpawnShieldEffect(this.<>f__this.mUnit, this.<>f__this.mShield.Target.skill_param, this.<>f__this.mShield.Target.hp, this.<>f__this.mShield.Target.hpMax, this.<>f__this.mShield.Target.turn, this.<>f__this.mShield.Target.turnMax);
                    goto Label_019D;
                Label_018A:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_0257;
                Label_019D:
                    if (this.<effectInst>__0 != null)
                    {
                        goto Label_018A;
                    }
                    this.<>f__this.mShield.ClearDirty();
                    if (this.<>f__this.self.FindChangedShield(&this.<>f__this.mUnit, &this.<>f__this.mShield) != null)
                    {
                        goto Label_0029;
                    }
                    this.<i>__1 = 0;
                    goto Label_0222;
                Label_01F4:
                    this.<>f__this.self.mTacticsUnits[this.<i>__1].RemoveObsoleteShieldStates();
                    this.<i>__1 += 1;
                Label_0222:
                    if (this.<i>__1 < this.<>f__this.self.mTacticsUnits.Count)
                    {
                        goto Label_01F4;
                    }
                    this.<>f__this.mIsFinished = 1;
                    this.$PC = -1;
                Label_0255:
                    return 0;
                Label_0257:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_SpawnUnit : State<SceneBattle>
        {
            private LoadRequest mLoadRequest;
            private SceneBattle mScene;
            private bool mIsFinished;
            private Unit mSpawnUnit;

            public State_SpawnUnit()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            private IEnumerator AsyncWork(Unit unit, Unit kill_unit)
            {
                <AsyncWork>c__Iterator39 iterator;
                iterator = new <AsyncWork>c__Iterator39();
                iterator.unit = unit;
                iterator.kill_unit = kill_unit;
                iterator.<$>unit = unit;
                iterator.<$>kill_unit = kill_unit;
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Begin(SceneBattle self)
            {
                LogUnitEntry entry;
                this.mScene = self;
                this.mIsFinished = 1;
                entry = self.mBattle.Logs.Peek as LogUnitEntry;
                if (entry != null)
                {
                    goto Label_002B;
                }
                return;
            Label_002B:
                this.mIsFinished = 0;
                this.mSpawnUnit = entry.self;
                self.StartCoroutine(this.AsyncWork(entry.self, entry.kill_unit));
                self.RemoveLog();
                return;
            }

            public override void Update(SceneBattle self)
            {
                TacticsUnitController controller;
                if (this.mIsFinished == null)
                {
                    goto Label_0076;
                }
                if (this.mSpawnUnit == null)
                {
                    goto Label_0070;
                }
                if ((self.mEventScript != null) == null)
                {
                    goto Label_0070;
                }
                controller = self.FindUnitController(this.mSpawnUnit);
                if ((controller != null) == null)
                {
                    goto Label_0070;
                }
                self.mEventSequence = self.mEventScript.OnUnitAppear(controller, self.mIsFirstPlay);
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_0070;
                }
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>>();
                return;
            Label_0070:
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
            Label_0076:
                return;
            }

            [CompilerGenerated]
            private sealed class <AsyncWork>c__Iterator39 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal Unit unit;
                internal Vector3 <pos>__0;
                internal Vector3 <diff>__1;
                internal GameObject <newUnit>__2;
                internal Transform <unitTransform>__3;
                internal TacticsUnitController <controller>__4;
                internal int <idx>__5;
                internal EUnitCondition <condition>__6;
                internal int <job_idx>__7;
                internal Unit kill_unit;
                internal GameObject <uc_eff>__8;
                internal GameObject <smnEff>__9;
                internal JSON_MyPhotonPlayerParam <param>__10;
                internal TacticsUnitController <tuc>__11;
                internal int $PC;
                internal object $current;
                internal Unit <$>unit;
                internal Unit <$>kill_unit;
                internal SceneBattle.State_SpawnUnit <>f__this;

                public <AsyncWork>c__Iterator39()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__BC(JSON_MyPhotonPlayerParam p)
                {
                    return (p.playerIndex == this.unit.OwnerPlayerIndex);
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    Type[] typeArray1;
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0039;

                        case 1:
                            goto Label_0104;

                        case 2:
                            goto Label_022D;

                        case 3:
                            goto Label_028C;

                        case 4:
                            goto Label_02F1;

                        case 5:
                            goto Label_0390;

                        case 6:
                            goto Label_041F;

                        case 7:
                            goto Label_057D;
                    }
                    goto Label_05C2;
                Label_0039:
                    this.<pos>__0 = this.<>f__this.self.CalcGridCenter(this.<>f__this.self.Battle.GetUnitGridPosition(this.unit));
                    this.<>f__this.mScene.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                    this.<>f__this.mScene.InterpCameraTarget(this.<pos>__0);
                Label_009A:
                    this.<diff>__1 = this.<>f__this.mScene.mCameraTarget - this.<pos>__0;
                    &this.<diff>__1.y = 0f;
                    float introduced2 = &this.<diff>__1.get_magnitude();
                    if ((introduced2 * &this.<diff>__1.get_magnitude()) >= 0.25f)
                    {
                        goto Label_00F1;
                    }
                    goto Label_0109;
                Label_00F1:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_05C4;
                Label_0104:
                    goto Label_009A;
                Label_0109:
                    typeArray1 = new Type[] { typeof(TacticsUnitController) };
                    this.<newUnit>__2 = new GameObject(this.unit.UnitName, typeArray1);
                    this.<unitTransform>__3 = this.<newUnit>__2.get_transform();
                    this.<unitTransform>__3.SetParent(this.<>f__this.self.mTacticsSceneRoot.get_transform(), 0);
                    this.<unitTransform>__3.set_position(this.<pos>__0);
                    this.<controller>__4 = this.<newUnit>__2.GetComponent<TacticsUnitController>();
                    this.<>f__this.self.mTacticsUnits.Add(this.<controller>__4);
                    this.<controller>__4.SetupUnit(this.unit);
                    this.<controller>__4.KeepUnitHidden = 1;
                    this.<idx>__5 = 0;
                    goto Label_01FC;
                Label_01CA:
                    this.<condition>__6 = 1L << (this.<idx>__5 & 0x3f);
                    this.<controller>__4.LockUpdateBadStatus(this.<condition>__6, 1);
                    this.<idx>__5 += 1;
                Label_01FC:
                    if (this.<idx>__5 < Unit.MAX_UNIT_CONDITION)
                    {
                        goto Label_01CA;
                    }
                    goto Label_022D;
                Label_0216:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 2;
                    goto Label_05C4;
                Label_022D:
                    if (this.<controller>__4.IsLoading != null)
                    {
                        goto Label_0216;
                    }
                    if (this.<controller>__4.Unit.IsBreakObj == null)
                    {
                        goto Label_02D5;
                    }
                    this.<job_idx>__7 = 1;
                    goto Label_02AA;
                Label_025E:
                    if (this.<controller>__4.LoadAddModels(this.<job_idx>__7) == null)
                    {
                        goto Label_029C;
                    }
                    goto Label_028C;
                Label_0279:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_05C4;
                Label_028C:
                    if (this.<controller>__4.IsLoading != null)
                    {
                        goto Label_0279;
                    }
                Label_029C:
                    this.<job_idx>__7 += 1;
                Label_02AA:
                    if (this.<job_idx>__7 < this.<controller>__4.Unit.UnitParam.search)
                    {
                        goto Label_025E;
                    }
                    this.<controller>__4.ReflectDispModel();
                Label_02D5:
                    this.$current = new WaitForSeconds(0.5f);
                    this.$PC = 4;
                    goto Label_05C4;
                Label_02F1:
                    if (this.kill_unit == null)
                    {
                        goto Label_0395;
                    }
                    if ((this.<>f__this.self.mUnitChangeEffect != null) == null)
                    {
                        goto Label_036A;
                    }
                    this.<uc_eff>__8 = Object.Instantiate(this.<>f__this.self.mUnitChangeEffect, this.<unitTransform>__3.get_position(), this.<unitTransform>__3.get_rotation()) as GameObject;
                    if ((this.<uc_eff>__8 != null) == null)
                    {
                        goto Label_036A;
                    }
                    SRPG_Extensions.RequireComponent<OneShotParticle>(this.<uc_eff>__8);
                Label_036A:
                    this.$current = new WaitForSeconds(&GameSettings.Instance.Quest.UnitChangeEffectWaitTime);
                    this.$PC = 5;
                    goto Label_05C4;
                Label_0390:
                    goto Label_041F;
                Label_0395:
                    if ((this.<>f__this.self.mSummonUnitEffect != null) == null)
                    {
                        goto Label_0403;
                    }
                    this.<smnEff>__9 = Object.Instantiate(this.<>f__this.self.mSummonUnitEffect, this.<unitTransform>__3.get_position(), this.<unitTransform>__3.get_rotation()) as GameObject;
                    if ((this.<smnEff>__9 != null) == null)
                    {
                        goto Label_0403;
                    }
                    SRPG_Extensions.RequireComponent<OneShotParticle>(this.<smnEff>__9);
                Label_0403:
                    this.$current = new WaitForSeconds(0.1f);
                    this.$PC = 6;
                    goto Label_05C4;
                Label_041F:
                    this.<controller>__4.InitHPGauge(this.<>f__this.self.OverlayCanvas, this.<>f__this.self.GetGaugeTemplateFor(this.unit));
                    this.<controller>__4.ShowHPGauge(0);
                    this.unit.LoadBattleVoice();
                    if (this.<>f__this.self.Battle.IsMultiPlay == null)
                    {
                        goto Label_04E0;
                    }
                    this.<param>__10 = PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted().Find(new Predicate<JSON_MyPhotonPlayerParam>(this.<>m__BC));
                    this.<controller>__4.CreateOwnerIndexUI(this.<>f__this.self.OverlayCanvas, this.<>f__this.self.mUnitOwnerIndex, this.<param>__10);
                    this.<controller>__4.ShowOwnerIndexUI(0);
                Label_04E0:
                    if (this.kill_unit == null)
                    {
                        goto Label_0566;
                    }
                    this.<>f__this.self.HideUnitMarkers(this.kill_unit);
                    this.<tuc>__11 = this.<>f__this.self.FindUnitController(this.kill_unit);
                    if ((this.<tuc>__11 != null) == null)
                    {
                        goto Label_055A;
                    }
                    this.<>f__this.self.mTacticsUnits.Remove(this.<tuc>__11);
                    Object.Destroy(this.<tuc>__11.get_gameObject());
                Label_055A:
                    this.<tuc>__11 = null;
                    goto Label_057D;
                Label_0566:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 7;
                    goto Label_05C4;
                Label_057D:
                    this.<controller>__4.SetVisible(1);
                    this.<controller>__4.ClearBadStatusLocks();
                    this.<controller>__4.UpdateBadStatus();
                    this.<>f__this.self.OnGimmickUpdate();
                    this.<>f__this.mIsFinished = 1;
                    this.$PC = -1;
                Label_05C2:
                    return 0;
                Label_05C4:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_Start : State<SceneBattle>
        {
            public State_Start()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                QuestParam param;
                param = self.mCurrentQuest;
                if (string.IsNullOrEmpty(param.event_start) != null)
                {
                    goto Label_0032;
                }
                if (self.mIsFirstPlay == null)
                {
                    goto Label_0032;
                }
                if (self.Battle.CheckEnableSuspendStart() == null)
                {
                    goto Label_0039;
                }
            Label_0032:
                this.GotoNextState();
                return;
            Label_0039:
                self.StartCoroutine(this.LoadAndExecuteEvent(param.event_start));
                return;
            }

            private void GotoNextState()
            {
                QuestParam param;
                if (base.self.mCurrentQuest.IsScenario == null)
                {
                    goto Label_0027;
                }
                base.self.GotoState<SceneBattle.State_ExitQuest>();
                goto Label_007D;
            Label_0027:
                GameUtility.SetNeverSleep();
                if (base.self.mIsFirstPlay == null)
                {
                    goto Label_0062;
                }
                if (string.IsNullOrEmpty(base.self.mCurrentQuest.event_start) != null)
                {
                    goto Label_0062;
                }
                ProgressWindow.OpenQuestLoadScreen(null, null);
                goto Label_0072;
            Label_0062:
                ProgressWindow.OpenQuestLoadScreen(base.self.mCurrentQuest);
            Label_0072:
                base.self.GotoState<SceneBattle.State_InitUI>();
            Label_007D:
                return;
            }

            [DebuggerHidden]
            private IEnumerator LoadAndExecuteEvent(string eventName)
            {
                <LoadAndExecuteEvent>c__Iterator38 iterator;
                iterator = new <LoadAndExecuteEvent>c__Iterator38();
                iterator.eventName = eventName;
                iterator.<$>eventName = eventName;
                iterator.<>f__this = this;
                return iterator;
            }

            [CompilerGenerated]
            private sealed class <LoadAndExecuteEvent>c__Iterator38 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal string eventName;
                internal LoadRequest <request>__0;
                internal EventScript <script>__1;
                internal EventScript.Sequence <seq>__2;
                internal int $PC;
                internal object $current;
                internal string <$>eventName;
                internal SceneBattle.State_Start <>f__this;

                public <LoadAndExecuteEvent>c__Iterator38()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_0031;

                        case 1:
                            goto Label_0068;

                        case 2:
                            goto Label_00A0;

                        case 3:
                            goto Label_00D0;

                        case 4:
                            goto Label_0166;

                        case 5:
                            goto Label_01B4;
                    }
                    goto Label_0210;
                Label_0031:
                    GameUtility.SetNeverSleep();
                    this.<request>__0 = GameUtility.LoadResourceAsyncChecked<EventScript>("Events/" + this.eventName);
                Label_0051:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 1;
                    goto Label_0212;
                Label_0068:
                    ProgressWindow.SetLoadProgress(this.<request>__0.progress);
                    if (this.<request>__0.isDone == null)
                    {
                        goto Label_0051;
                    }
                    goto Label_00A0;
                Label_008D:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0212;
                Label_00A0:
                    if (ProgressWindow.ShouldKeepVisible != null)
                    {
                        goto Label_008D;
                    }
                    ProgressWindow.Close();
                    GameUtility.FadeOut(1f);
                Label_00B9:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 3;
                    goto Label_0212;
                Label_00D0:
                    if (GameUtility.IsScreenFading != null)
                    {
                        goto Label_00B9;
                    }
                    GameUtility.SetDefaultSleepSetting();
                    if ((this.<request>__0.asset == null) == null)
                    {
                        goto Label_0105;
                    }
                    this.<>f__this.GotoNextState();
                    goto Label_0210;
                Label_0105:
                    MonoSingleton<GameManager>.Instance.EnableAnimationFrameSkipping = 0;
                    this.<script>__1 = this.<request>__0.asset as EventScript;
                    this.<seq>__2 = this.<script>__1.OnStart(0, 0);
                    this.<>f__this.self.mDownloadTutorialAssets = 1;
                    goto Label_0166;
                Label_014F:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 4;
                    goto Label_0212;
                Label_0166:
                    if ((this.<seq>__2 != null) == null)
                    {
                        goto Label_0187;
                    }
                    if (this.<seq>__2.IsPlaying != null)
                    {
                        goto Label_014F;
                    }
                Label_0187:
                    this.<>f__this.self.mDownloadTutorialAssets = 0;
                    goto Label_01B4;
                Label_019D:
                    this.$current = new WaitForEndOfFrame();
                    this.$PC = 5;
                    goto Label_0212;
                Label_01B4:
                    if (AssetDownloader.isDone == null)
                    {
                        goto Label_019D;
                    }
                    Object.Destroy(this.<seq>__2.get_gameObject());
                    if (FadeController.Instance.IsScreenFaded(0) != null)
                    {
                        goto Label_01F3;
                    }
                    FadeController.Instance.FadeTo(Color.get_black(), 0f, 0);
                Label_01F3:
                    MonoSingleton<GameManager>.Instance.EnableAnimationFrameSkipping = 1;
                    this.<>f__this.GotoNextState();
                    this.$PC = -1;
                Label_0210:
                    return 0;
                Label_0212:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_StartEvent : State<SceneBattle>
        {
            private EventScript.Sequence mSequence;

            public State_StartEvent()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                if ((self.mEventScript == null) == null)
                {
                    goto Label_0018;
                }
                this.Finish();
                return;
            Label_0018:
                this.mSequence = self.mEventScript.OnStart(0, 1);
                if ((this.mSequence == null) == null)
                {
                    goto Label_0043;
                }
                this.Finish();
                return;
            Label_0043:
                self.mUpdateCameraPosition = 0;
                return;
            }

            private void Finish()
            {
                if (base.self.IsPlayingArenaQuest == null)
                {
                    goto Label_0025;
                }
                base.self.mBattleUI.OnQuestStart_Arena();
                goto Label_00B8;
            Label_0025:
                if (base.self.Battle.IsMultiVersus == null)
                {
                    goto Label_0079;
                }
                if (base.self.Battle.IsRankMatch == null)
                {
                    goto Label_0064;
                }
                base.self.mBattleUI.OnQuestStart_RankMatch();
                goto Label_0074;
            Label_0064:
                base.self.mBattleUI.OnQuestStart_VS();
            Label_0074:
                goto Label_00B8;
            Label_0079:
                if (string.IsNullOrEmpty(base.self.mCurrentQuest.cond) == null)
                {
                    goto Label_00A8;
                }
                base.self.mBattleUI.OnQuestStart_Short();
                goto Label_00B8;
            Label_00A8:
                base.self.mBattleUI.OnQuestStart();
            Label_00B8:
                if ((base.self.mBattleUI_MultiPlay != null) == null)
                {
                    goto Label_00DE;
                }
                base.self.mBattleUI_MultiPlay.OnMapStart();
            Label_00DE:
                base.self.GotoState_WaitSignal<SceneBattle.State_MapStartV2>();
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mSequence.IsPlaying == null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                Object.Destroy(this.mSequence);
                self.ResetCameraTarget();
                this.Finish();
                return;
            }
        }

        private class State_SyncResume : State<SceneBattle>
        {
            public State_SyncResume()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.mBattleUI_MultiPlay.OnOtherPlayerSyncStart();
                return;
            }

            public override void End(SceneBattle self)
            {
            }

            public override void Update(SceneBattle self)
            {
                if (self.Battle.ResumeState != null)
                {
                    goto Label_0016;
                }
                self.GotoState<SceneBattle.State_MultiPlaySync>();
            Label_0016:
                return;
            }
        }

        private class State_ThrowTargetSelect : State<SceneBattle>
        {
            private const int THROW_TARGET_RANGE = 1;
            private TacticsUnitController mSelectedTarget;
            private GridMap<bool> mTargetGrids;
            private IntVector2 mTargetPosition;
            private List<TacticsUnitController> mTargets;
            private bool mDragScroll;
            private float mYScrollPos;
            private bool mIgnoreDragVelocity;
            private float mDragY;

            public State_ThrowTargetSelect()
            {
                this.mTargets = new List<TacticsUnitController>(4);
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                UnitCommands commands1;
                bool flag;
                Unit unit;
                TacticsUnitController controller;
                IntVector2 vector;
                Grid grid;
                int num;
                int num2;
                int num3;
                Grid grid2;
                Color32 color;
                GridMap<Color32> map;
                int num4;
                int num5;
                int num6;
                int num7;
                Unit unit2;
                TacticsUnitController controller2;
                TacticsUnitController controller3;
                flag = 1;
                unit = self.mBattle.CurrentUnit;
                controller = self.FindUnitController(unit);
                vector = self.CalcCoord(controller.CenterPosition);
                this.mTargetGrids = new GridMap<bool>(self.Battle.CurrentMap.Width, self.Battle.CurrentMap.Height);
                grid = self.Battle.CurrentMap[&vector.x, &vector.y];
                self.Battle.CreateGridMapCross(grid, 0, 1, &this.mTargetGrids);
                num = MonoSingleton<GameManager>.GetInstanceDirect().MasterParam.FixParam.ThrowHeight;
                num2 = 0;
                goto Label_0164;
            Label_00A6:
                num3 = 0;
                goto Label_014C;
            Label_00AE:
                if (this.mTargetGrids.get(num2, num3) != null)
                {
                    goto Label_00C7;
                }
                goto Label_0146;
            Label_00C7:
                grid2 = self.Battle.CurrentMap[num2, num3];
                if (grid2 != null)
                {
                    goto Label_00E9;
                }
                goto Label_0146;
            Label_00E9:
                if (grid2.geo == null)
                {
                    goto Label_011B;
                }
                if (grid2.geo.DisableStopped == null)
                {
                    goto Label_011B;
                }
                this.mTargetGrids.set(num2, num3, 0);
            Label_011B:
                if (Math.Abs(grid.height - grid2.height) <= num)
                {
                    goto Label_0146;
                }
                this.mTargetGrids.set(num2, num3, 0);
            Label_0146:
                num3 += 1;
            Label_014C:
                if (num3 < this.mTargetGrids.h)
                {
                    goto Label_00AE;
                }
                num2 += 1;
            Label_0164:
                if (num2 < this.mTargetGrids.w)
                {
                    goto Label_00A6;
                }
                color = &GameSettings.Instance.Colors.AttackArea;
                map = new GridMap<Color32>(this.mTargetGrids.w, this.mTargetGrids.h);
                num4 = 0;
                goto Label_01F8;
            Label_01B1:
                num5 = 0;
                goto Label_01E0;
            Label_01B9:
                if (this.mTargetGrids.get(num4, num5) == null)
                {
                    goto Label_01DA;
                }
                map.set(num4, num5, color);
            Label_01DA:
                num5 += 1;
            Label_01E0:
                if (num5 < this.mTargetGrids.h)
                {
                    goto Label_01B9;
                }
                num4 += 1;
            Label_01F8:
                if (num4 < this.mTargetGrids.w)
                {
                    goto Label_01B1;
                }
                self.mTacticsSceneRoot.ShowGridLayer(1, map, 1);
                this.mTargets.Clear();
                num6 = 0;
                goto Label_0336;
            Label_022C:
                num7 = 0;
                goto Label_0319;
            Label_0234:
                if (this.mTargetGrids.get(num6, num7) != null)
                {
                    goto Label_024D;
                }
                goto Label_0313;
            Label_024D:
                unit2 = self.Battle.FindUnitAtGrid(self.Battle.CurrentMap[num6, num7]);
                if (unit2 != null)
                {
                    goto Label_02B0;
                }
                unit2 = self.Battle.FindGimmickAtGrid(self.Battle.CurrentMap[num6, num7], 0, null);
                if (unit2 == null)
                {
                    goto Label_0313;
                }
                if (unit2.IsBreakObj != null)
                {
                    goto Label_02B0;
                }
                goto Label_0313;
            Label_02B0:
                if (unit2 != unit)
                {
                    goto Label_02BD;
                }
                goto Label_0313;
            Label_02BD:
                if (unit2.IsThrow != null)
                {
                    goto Label_02CE;
                }
                goto Label_0313;
            Label_02CE:
                if (unit2.IsNormalSize != null)
                {
                    goto Label_02DF;
                }
                goto Label_0313;
            Label_02DF:
                if (unit2.IsJump == null)
                {
                    goto Label_02F0;
                }
                goto Label_0313;
            Label_02F0:
                controller2 = self.FindUnitController(unit2);
                if (controller2 == null)
                {
                    goto Label_0313;
                }
                this.mTargets.Add(controller2);
            Label_0313:
                num7 += 1;
            Label_0319:
                if (num7 < self.Battle.CurrentMap.Height)
                {
                    goto Label_0234;
                }
                num6 += 1;
            Label_0336:
                if (num6 < self.Battle.CurrentMap.Width)
                {
                    goto Label_022C;
                }
                if (this.mTargets.Count <= 0)
                {
                    goto Label_037C;
                }
                &self.mTargetSelectorParam.DefaultThrowTarget = this.mTargets[0].Unit;
                flag = 0;
            Label_037C:
                self.mOnUnitClick = new SceneBattle.UnitClickEvent(this.OnClickUnit);
                self.mOnUnitFocus = new SceneBattle.UnitFocusEvent(this.OnFocus);
                self.m_AllowCameraRotation = flag;
                self.m_AllowCameraTranslation = flag;
                if (&self.mTargetSelectorParam.DefaultThrowTarget == null)
                {
                    goto Label_03F5;
                }
                controller3 = self.FindUnitController(&self.mTargetSelectorParam.DefaultThrowTarget);
                if ((controller3 != null) == null)
                {
                    goto Label_03E6;
                }
                this.OnFocus(controller3);
            Label_03E6:
                self.InterpCameraTarget(controller3);
                this.SetYesButtonEnable(1);
            Label_03F5:
                commands1 = self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Combine(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                self.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Combine(self.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                self.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Combine(self.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                if (self.mBattleUI.TargetSub == null)
                {
                    goto Label_04F4;
                }
                if (this.mTargets.Count < 2)
                {
                    goto Label_04D2;
                }
                self.mBattleUI.TargetSub.ActivateNextTargetArrow(new ButtonExt.ButtonClickEvent(this.OnNextTargetClick));
                self.mBattleUI.TargetSub.ActivatePrevTargetArrow(new ButtonExt.ButtonClickEvent(this.OnPrevTargetClick));
                goto Label_04F4;
            Label_04D2:
                self.mBattleUI.TargetSub.SetNextTargetArrowActive(0);
                self.mBattleUI.TargetSub.SetPrevTargetArrowActive(0);
            Label_04F4:
                self.StepToNear(self.Battle.CurrentUnit);
                self.OnGimmickUpdate();
                return;
            }

            public override void End(SceneBattle self)
            {
                UnitCommands commands1;
                if (self.mBattleUI.TargetSub == null)
                {
                    goto Label_004D;
                }
                self.mBattleUI.TargetSub.DeactivateNextTargetArrow(new ButtonExt.ButtonClickEvent(this.OnNextTargetClick));
                self.mBattleUI.TargetSub.DeactivatePrevTargetArrow(new ButtonExt.ButtonClickEvent(this.OnPrevTargetClick));
            Label_004D:
                this.SetYesButtonEnable(1);
                commands1 = self.mBattleUI.CommandWindow;
                commands1.OnYesNoSelect = (UnitCommands.YesNoEvent) Delegate.Remove(commands1.OnYesNoSelect, new UnitCommands.YesNoEvent(this.OnYesNoSelect));
                self.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Remove(self.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                self.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Remove(self.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                self.HideUnitMarkers(0);
                self.m_AllowCameraRotation = 0;
                self.m_AllowCameraTranslation = 0;
                self.mOnUnitFocus = null;
                self.mOnUnitClick = null;
                self.mOnGridClick = null;
                self.HideGrid();
                self.SetUnitUiHeight(self.mBattle.CurrentUnit);
                return;
            }

            private unsafe bool IsGridSelectable(Unit unit)
            {
                int num;
                int num2;
                IntVector2 vector;
                if (unit != null)
                {
                    goto Label_0008;
                }
                return 0;
            Label_0008:
                num = unit.x;
                num2 = unit.y;
                if ((base.self.mFocusedUnit != null) == null)
                {
                    goto Label_0083;
                }
                if (base.self.mFocusedUnit.Unit == null)
                {
                    goto Label_0083;
                }
                if (base.self.mFocusedUnit.Unit != unit)
                {
                    goto Label_0083;
                }
                vector = base.self.CalcCoord(base.self.mFocusedUnit.CenterPosition);
                num = &vector.x;
                num2 = &vector.y;
            Label_0083:
                return this.IsGridSelectable(num, num2);
            }

            private bool IsGridSelectable(int x, int y)
            {
                bool flag;
                Unit unit;
                if (this.mTargetGrids != null)
                {
                    goto Label_000D;
                }
                return 0;
            Label_000D:
                flag = this.mTargetGrids.get(x, y);
                if (flag == null)
                {
                    goto Label_00CB;
                }
                unit = base.self.Battle.FindUnitAtGrid(base.self.Battle.CurrentMap[x, y]);
                if (unit != null)
                {
                    goto Label_008C;
                }
                unit = base.self.Battle.FindGimmickAtGrid(base.self.Battle.CurrentMap[x, y], 0, null);
                if (unit == null)
                {
                    goto Label_008C;
                }
                if (unit.IsBreakObj != null)
                {
                    goto Label_008C;
                }
                unit = null;
            Label_008C:
                if (unit == null)
                {
                    goto Label_00C9;
                }
                if (unit == base.self.mBattle.CurrentUnit)
                {
                    goto Label_00C9;
                }
                if (unit.IsThrow == null)
                {
                    goto Label_00C9;
                }
                if (unit.IsNormalSize == null)
                {
                    goto Label_00C9;
                }
                if (unit.IsJump == null)
                {
                    goto Label_00CB;
                }
            Label_00C9:
                flag = 0;
            Label_00CB:
                return flag;
            }

            private void OnClickUnit(TacticsUnitController controller)
            {
                base.self.InterpCameraTarget(controller);
                base.self.mFocusedUnit = controller;
                this.OnFocus(controller);
                return;
            }

            private unsafe void OnDrag()
            {
                if (this.mIgnoreDragVelocity != null)
                {
                    goto Label_002D;
                }
                this.mDragY += &base.self.mTouchController.DragDelta.y;
            Label_002D:
                if (this.mTargets.Count == null)
                {
                    goto Label_0044;
                }
                this.mDragScroll = 1;
            Label_0044:
                return;
            }

            private void OnDragEnd()
            {
                this.mDragY = 0f;
                this.mYScrollPos = 0f;
                this.mDragScroll = 0;
                this.mIgnoreDragVelocity = 0;
                return;
            }

            private unsafe void OnFocus(TacticsUnitController controller)
            {
                IntVector2 vector;
                Unit unit;
                SkillData data;
                TacticsUnitController controller2;
                int num;
                int num2;
                GridMap<bool> map;
                if (controller != null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if ((controller.Unit.IsGimmick == null) || (base.self.Battle.IsTargetBreakUnit(base.self.mBattle.CurrentUnit, controller.Unit, null) != null))
                {
                    goto Label_0049;
                }
                return;
            Label_0049:
                if ((this.mSelectedTarget != null) == null)
                {
                    goto Label_0070;
                }
                base.self.HideUnitMarkers(this.mSelectedTarget.Unit);
            Label_0070:
                base.self.ShowUnitMarker(controller.Unit, 0);
                this.mSelectedTarget = controller;
                vector = base.self.CalcCoord(controller.CenterPosition);
                &this.mTargetPosition.x = &vector.x;
                &this.mTargetPosition.y = &vector.y;
                base.self.mSelectedTarget = controller.Unit;
                base.self.UIParam_TargetValid = 0;
                unit = base.self.mBattle.CurrentUnit;
                data = &base.self.mTargetSelectorParam.Skill;
                controller2 = base.self.FindUnitController(unit);
                num = (data == null) ? 0 : data.GetHpCost(unit);
                controller2.SetHPChangeYosou(unit.CurrentStatus.param.hp - num, 0);
                base.self.mBattleUI.TargetMain.SetHpGaugeParam(unit.Side, unit.CurrentStatus.param.hp, unit.MaximumStatus.param.hp, num, 0, 0);
                base.self.mBattleUI.TargetMain.UpdateHpGauge();
                base.self.mBattleUI.TargetSub.ResetHpGauge(base.self.mSelectedTarget.Side, base.self.mSelectedTarget.CurrentStatus.param.hp, base.self.mSelectedTarget.MaximumStatus.param.hp);
                num2 = 0;
                goto Label_0281;
            Label_0208:
                base.self.mTacticsUnits[num2].SetHPGaugeMode(0, null, null);
                if (0 >= num)
                {
                    goto Label_024C;
                }
                if ((base.self.mTacticsUnits[num2] == controller) == null)
                {
                    goto Label_024C;
                }
                goto Label_027B;
            Label_024C:
                base.self.mTacticsUnits[num2].SetHPChangeYosou(base.self.mTacticsUnits[num2].VisibleHPValue, 0);
            Label_027B:
                num2 += 1;
            Label_0281:
                if (num2 < base.self.mTacticsUnits.Count)
                {
                    goto Label_0208;
                }
                if (this.IsGridSelectable(base.self.mSelectedTarget) == null)
                {
                    goto Label_033F;
                }
                base.self.UIParam_TargetValid = 1;
                this.mSelectedTarget.SetHPGaugeMode(2, null, null);
                map = new GridMap<bool>(base.self.Battle.CurrentMap.Width, base.self.Battle.CurrentMap.Height);
                map.set(&this.mTargetPosition.x, &this.mTargetPosition.y, 1);
                base.self.mTacticsSceneRoot.ShowGridLayer(2, map, &GameSettings.Instance.Colors.AttackArea2, 0);
            Label_033F:
                this.SetYesButtonEnable(base.self.UIParam_TargetValid);
                if ((base.self.mBattleUI.TargetMain != null) == null)
                {
                    goto Label_03A6;
                }
                base.self.mBattleUI.TargetMain.SetNoAction(base.self.mBattle.CurrentUnit, null);
                base.self.mBattleUI.TargetMain.Open();
            Label_03A6:
                if ((base.self.mBattleUI.TargetSub != null) == null)
                {
                    goto Label_04B2;
                }
                if (base.self.UIParam_TargetValid == null)
                {
                    goto Label_040C;
                }
                base.self.mBattleUI.TargetSub.SetNoAction(base.self.mSelectedTarget, null);
                base.self.mBattleUI.TargetSub.Open();
                goto Label_04B2;
            Label_040C:
                if (base.self.mSelectedTarget.UnitType == null)
                {
                    goto Label_0461;
                }
                if (base.self.mSelectedTarget.UnitType == 3)
                {
                    goto Label_0461;
                }
                if (base.self.mSelectedTarget.IsBreakObj == null)
                {
                    goto Label_049C;
                }
                if (base.self.mSelectedTarget.IsBreakDispUI == null)
                {
                    goto Label_049C;
                }
            Label_0461:
                base.self.mBattleUI.TargetSub.SetNoAction(base.self.mSelectedTarget, null);
                base.self.mBattleUI.TargetSub.Open();
                goto Label_04B2;
            Label_049C:
                base.self.mBattleUI.TargetSub.ForceClose(0);
            Label_04B2:
                if ((base.self.mBattleUI.TargetObjectSub != null) == null)
                {
                    goto Label_04E2;
                }
                base.self.mBattleUI.TargetObjectSub.Close();
            Label_04E2:
                if ((base.self.mBattleUI.TargetTrickSub != null) == null)
                {
                    goto Label_0512;
                }
                base.self.mBattleUI.TargetTrickSub.Close();
            Label_0512:
                base.self.OnGimmickUpdate();
                base.self.SetUnitUiHeight(controller.Unit);
                return;
            }

            private void OnNextTargetClick(GameObject go)
            {
                this.ShiftTarget(1);
                return;
            }

            private void OnPrevTargetClick(GameObject go)
            {
                this.ShiftTarget(-1);
                return;
            }

            private unsafe void OnYesNoSelect(bool yes)
            {
                int num;
                num = 0;
                goto Label_0051;
            Label_0007:
                base.self.mTacticsUnits[num].SetHPGaugeMode(0, null, null);
                base.self.mTacticsUnits[num].SetHPChangeYosou(base.self.mTacticsUnits[num].VisibleHPValue, 0);
                num += 1;
            Label_0051:
                if (num < base.self.mTacticsUnits.Count)
                {
                    goto Label_0007;
                }
                base.self.mBattleUI.OnThrowTargetSelectEnd();
                if (yes == null)
                {
                    goto Label_00B8;
                }
                &base.self.mTargetSelectorParam.ThrowTarget = this.mSelectedTarget.Unit;
                base.self.mBattleUI.HideTargetWindows();
                base.self.GotoState_WaitSignal<SceneBattle.State_PreSelectTargetV2>();
                goto Label_00DD;
            Label_00B8:
                &base.self.mTargetSelectorParam.OnCancel();
                base.self.mBattleUI.HideTargetWindows();
            Label_00DD:
                return;
            }

            private void SetYesButtonEnable(bool enable)
            {
                Selectable selectable;
                selectable = base.self.mBattleUI.CommandWindow.OKButton.GetComponent<Selectable>();
                if ((selectable != null) == null)
                {
                    goto Label_002E;
                }
                selectable.set_interactable(enable);
            Label_002E:
                return;
            }

            private void ShiftTarget(int delta)
            {
                int num;
                if (this.mTargets.Count != null)
                {
                    goto Label_0011;
                }
                return;
            Label_0011:
                num = this.mTargets.IndexOf(base.self.mFocusedUnit);
                if (num >= 0)
                {
                    goto Label_0031;
                }
                num = 0;
            Label_0031:
                num = ((num + delta) + this.mTargets.Count) % this.mTargets.Count;
                this.OnClickUnit(this.mTargets[num]);
                return;
            }

            public override unsafe void Update(SceneBattle self)
            {
                if (this.mDragScroll == null)
                {
                    goto Label_00C8;
                }
                this.mYScrollPos += (((&self.mTouchController.DragDelta.y <= 0f) ? -1f : 1f) * Time.get_unscaledDeltaTime()) * 2f;
                if (this.mIgnoreDragVelocity != null)
                {
                    goto Label_0071;
                }
                this.mYScrollPos += this.mDragY / 20f;
            Label_0071:
                if (this.mYScrollPos > -1f)
                {
                    goto Label_009F;
                }
                this.mYScrollPos = 0f;
                this.mIgnoreDragVelocity = 1;
                this.ShiftTarget(-1);
                goto Label_00C8;
            Label_009F:
                if (this.mYScrollPos < 1f)
                {
                    goto Label_00C8;
                }
                this.mYScrollPos = 0f;
                this.mIgnoreDragVelocity = 1;
                this.ShiftTarget(1);
            Label_00C8:
                return;
            }
        }

        private class State_TriggerHPEvents : State<SceneBattle>
        {
            public State_TriggerHPEvents()
            {
                base..ctor();
                return;
            }

            public override unsafe void Begin(SceneBattle self)
            {
                int num;
                TacticsUnitController controller;
                List<TacticsUnitController>.Enumerator enumerator;
                SceneBattle.EventRecvSkillUnit unit;
                List<SceneBattle.EventRecvSkillUnit>.Enumerator enumerator2;
                SceneBattle.EventRecvSkillUnit.eType type;
                if ((self.mEventScript != null) == null)
                {
                    goto Label_01B2;
                }
                num = 0;
                goto Label_0051;
            Label_0018:
                self.mEventSequence = self.mEventScript.OnUnitHPChange(self.mTacticsUnits[num]);
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_004D;
                }
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_TriggerHPEvents>>();
                return;
            Label_004D:
                num += 1;
            Label_0051:
                if (num < self.mTacticsUnits.Count)
                {
                    goto Label_0018;
                }
                enumerator = self.mTacticsUnits.GetEnumerator();
            Label_006E:
                try
                {
                    goto Label_00AF;
                Label_0073:
                    controller = &enumerator.Current;
                    self.mEventSequence = self.mEventScript.OnUnitRestHP(controller, self.mIsFirstPlay);
                    if ((self.mEventSequence != null) == null)
                    {
                        goto Label_00AF;
                    }
                    self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_TriggerHPEvents>>();
                    goto Label_01D3;
                Label_00AF:
                    if (&enumerator.MoveNext() != null)
                    {
                        goto Label_0073;
                    }
                    goto Label_00CC;
                }
                finally
                {
                Label_00C0:
                    ((List<TacticsUnitController>.Enumerator) enumerator).Dispose();
                }
            Label_00CC:
                enumerator2 = self.mEventRecvSkillUnitLists.GetEnumerator();
            Label_00D9:
                try
                {
                    goto Label_0194;
                Label_00DE:
                    unit = &enumerator2.Current;
                    if (unit.mValid != null)
                    {
                        goto Label_00F6;
                    }
                    goto Label_0194;
                Label_00F6:
                    self.mEventSequence = null;
                    type = unit.mType;
                    if (type == 1)
                    {
                        goto Label_011A;
                    }
                    if (type == 2)
                    {
                        goto Label_0149;
                    }
                    goto Label_0178;
                Label_011A:
                    self.mEventSequence = self.mEventScript.OnRecvSkillElem(unit.mController, unit.mElem, self.mIsFirstPlay);
                    unit.mValid = 0;
                    goto Label_0178;
                Label_0149:
                    self.mEventSequence = self.mEventScript.OnRecvSkillCond(unit.mController, unit.mCond, self.mIsFirstPlay);
                    unit.mValid = 0;
                Label_0178:
                    if ((self.mEventSequence != null) == null)
                    {
                        goto Label_0194;
                    }
                    self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_TriggerHPEvents>>();
                    goto Label_01D3;
                Label_0194:
                    if (&enumerator2.MoveNext() != null)
                    {
                        goto Label_00DE;
                    }
                    goto Label_01B2;
                }
                finally
                {
                Label_01A5:
                    ((List<SceneBattle.EventRecvSkillUnit>.Enumerator) enumerator2).Dispose();
                }
            Label_01B2:
                self.mEventRecvSkillUnitLists.Clear();
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
            Label_01D3:
                return;
            }
        }

        private class State_UnitEnd : State<SceneBattle>
        {
            private bool mIsPopDamage;
            private bool mIsShakeStart;
            private Unit mCurrentUnit;
            private TacticsUnitController mController;
            private bool mIsDamaged;

            public State_UnitEnd()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                int num;
                VirtualStick2 stick;
                self.ToggleRenkeiAura(0);
                if (self.mTutorialTriggers == null)
                {
                    goto Label_006C;
                }
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller != null) == null)
                {
                    goto Label_006C;
                }
                num = 0;
                goto Label_005E;
            Label_0037:
                self.mTutorialTriggers[num].OnUnitEnd(self.mBattle.CurrentUnit, controller.Unit.TurnCount);
                num += 1;
            Label_005E:
                if (num < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_0037;
                }
            Label_006C:
                self.HideUnitCursor(((LogUnitEnd) self.mBattle.Logs.Peek).self);
                if (self.mBattle.IsUnitAuto(self.mBattle.CurrentUnit) == null)
                {
                    goto Label_00AD;
                }
                self.HideGrid();
            Label_00AD:
                if ((self.mTouchController != null) == null)
                {
                    goto Label_00C9;
                }
                self.mTouchController.IgnoreCurrentTouch();
            Label_00C9:
                stick = self.mBattleUI.VirtualStick;
                if ((stick != null) == null)
                {
                    goto Label_00E8;
                }
                stick.Visible = 0;
            Label_00E8:
                this.mCurrentUnit = self.Battle.CurrentUnit;
                this.mController = self.FindUnitController(this.mCurrentUnit);
                if ((null != this.mController) == null)
                {
                    goto Label_0163;
                }
                this.mController.InitShake(this.mController.get_transform().get_position(), SRPG_Extensions.ToVector(this.mCurrentUnit.Direction));
                if (self.Battle.IsMultiVersus == null)
                {
                    goto Label_0163;
                }
                this.mController.PlayVersusCursor(0);
            Label_0163:
                self.RemoveLog();
                return;
            }

            public override void End(SceneBattle self)
            {
                if (this.mCurrentUnit.OwnerPlayerIndex <= 0)
                {
                    goto Label_0018;
                }
                self.SendCheckMultiPlay();
            Label_0018:
                self.HideAllHPGauges();
                if (self.mFirstTurn == null)
                {
                    goto Label_0030;
                }
                self.mFirstTurn = 0;
            Label_0030:
                self.DeleteOnGimmickIcon();
                return;
            }

            public override void Update(SceneBattle self)
            {
                bool flag;
                LogDamage damage;
                int num;
                LogDamage damage2;
                int num2;
                if (self.IsHPGaugeChanging == null)
                {
                    goto Label_000C;
                }
                return;
            Label_000C:
                if ((null == this.mController) == null)
                {
                    goto Label_0061;
                }
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_0033;
                }
                self.EndMultiPlayer();
            Label_0033:
                self.Battle.UnitEnd();
                if (self.IsPlayingArenaQuest == null)
                {
                    goto Label_005A;
                }
                self.ArenaActionCountSet(self.Battle.ArenaActionCount);
            Label_005A:
                self.GotoState<SceneBattle.State_WaitForLog>();
                return;
            Label_0061:
                if (this.mController.ShakeStart != null)
                {
                    goto Label_01B5;
                }
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_0087;
                }
                self.EndMultiPlayer();
            Label_0087:
                flag = this.mCurrentUnit.IsDead;
                self.Battle.UnitEnd();
                if (self.IsPlayingArenaQuest == null)
                {
                    goto Label_00BA;
                }
                self.ArenaActionCountSet(self.Battle.ArenaActionCount);
            Label_00BA:
                damage = self.Battle.Logs.Peek as LogDamage;
                if (damage == null)
                {
                    goto Label_00F3;
                }
                if (this.mCurrentUnit.IsDead != null)
                {
                    goto Label_00F3;
                }
                this.mController.ShakeStart = 1;
                return;
            Label_00F3:
                if (damage == null)
                {
                    goto Label_02BA;
                }
                if (flag == this.mCurrentUnit.IsDead)
                {
                    goto Label_02BA;
                }
                self.PopupDamageNumber(this.mController.get_transform().get_position(), damage.damage);
                this.mController.ReflectDispModel();
                this.mIsDamaged = 1;
                num = 0;
                goto Label_019A;
            Label_0140:
                if (this.mCurrentUnit.CondAttachments[num].user != null)
                {
                    goto Label_0160;
                }
                goto Label_0196;
            Label_0160:
                MonoSingleton<GameManager>.Instance.Player.OnDamageToEnemy(this.mCurrentUnit.CondAttachments[num].user, this.mCurrentUnit, damage.damage);
                goto Label_01B0;
            Label_0196:
                num += 1;
            Label_019A:
                if (num < this.mCurrentUnit.CondAttachments.Count)
                {
                    goto Label_0140;
                }
            Label_01B0:
                goto Label_02BA;
            Label_01B5:
                this.mController.AdvanceShake();
                if (0.3f > this.mController.GetShakeProgress())
                {
                    goto Label_02A9;
                }
                if (this.mIsPopDamage != null)
                {
                    goto Label_02A9;
                }
                this.mIsPopDamage = 1;
                damage2 = self.Battle.Logs.Peek as LogDamage;
                self.PopupDamageNumber(this.mController.get_transform().get_position(), damage2.damage);
                this.mController.ReflectDispModel();
                this.mIsDamaged = 1;
                num2 = 0;
                goto Label_0292;
            Label_0234:
                if (this.mCurrentUnit.CondAttachments[num2].user != null)
                {
                    goto Label_0255;
                }
                goto Label_028C;
            Label_0255:
                MonoSingleton<GameManager>.Instance.Player.OnDamageToEnemy(this.mCurrentUnit.CondAttachments[num2].user, this.mCurrentUnit, damage2.damage);
                goto Label_02A9;
            Label_028C:
                num2 += 1;
            Label_0292:
                if (num2 < this.mCurrentUnit.CondAttachments.Count)
                {
                    goto Label_0234;
                }
            Label_02A9:
                if (this.mController.IsShakeEnd() != null)
                {
                    goto Label_02BA;
                }
                return;
            Label_02BA:
                if (this.mIsDamaged == null)
                {
                    goto Label_02D0;
                }
                self.GotoState<SceneBattle.State_TriggerHPEvents>();
                goto Label_02D6;
            Label_02D0:
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_02D6:
                return;
            }
        }

        private class State_UnitStartV2 : State<SceneBattle>
        {
            public State_UnitStartV2()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                TacticsUnitController controller;
                int num;
                Unit unit;
                controller = self.FindUnitController(self.mBattle.CurrentUnit);
                self.mAutoActivateGimmick = 0;
                if (self.mTutorialTriggers == null)
                {
                    goto Label_006C;
                }
                if ((controller != null) == null)
                {
                    goto Label_006C;
                }
                num = 0;
                goto Label_005E;
            Label_0037:
                self.mTutorialTriggers[num].OnUnitStart(self.mBattle.CurrentUnit, controller.Unit.TurnCount);
                num += 1;
            Label_005E:
                if (num < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_0037;
                }
            Label_006C:
                if ((controller != null) == null)
                {
                    goto Label_00E4;
                }
                self.SetPrioritizedUnit(controller);
                unit = self.Battle.CurrentUnit;
                if (unit == null)
                {
                    goto Label_00B8;
                }
                if (unit.IsDead != null)
                {
                    goto Label_00B8;
                }
                self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                self.InterpCameraTarget(controller);
                goto Label_00C2;
            Label_00B8:
                Debug.Log("[PUN]I'm dead or null...");
            Label_00C2:
                self.mCurrentUnitStartX = controller.Unit.startX;
                self.mCurrentUnitStartY = controller.Unit.startY;
            Label_00E4:
                self.ToggleRenkeiAura(1);
                if (self.Battle.IsMultiPlay == null)
                {
                    goto Label_0101;
                }
                self.BeginMultiPlayer();
            Label_0101:
                return;
            }

            public override void Update(SceneBattle self)
            {
                Unit unit;
                TacticsUnitController controller;
                List<AbilityData> list;
                List<AbilityData> list2;
                int num;
                TacticsUnitController controller2;
                int num2;
                int num3;
                TacticsUnitController controller3;
                unit = self.mBattle.CurrentUnit;
                if (unit == null)
                {
                    goto Label_01B2;
                }
                if (unit.IsDead != null)
                {
                    goto Label_01B2;
                }
                if (self.IsCameraMoving == null)
                {
                    goto Label_0029;
                }
                return;
            Label_0029:
                controller = self.FindUnitController(unit);
                if ((controller != null) == null)
                {
                    goto Label_0043;
                }
                controller.ResetRotation();
            Label_0043:
                if ((self.mBattleUI.CommandWindow != null) == null)
                {
                    goto Label_0145;
                }
                list = new List<AbilityData>(unit.BattleAbilitys);
                list2 = new List<AbilityData>();
                num = 0;
                goto Label_00DC;
            Label_0073:
                if (list[num].IsNoneCategory == null)
                {
                    goto Label_00B7;
                }
                if (list[num].AbilityType != null)
                {
                    goto Label_00B7;
                }
                list2.Add(list[num]);
                list.RemoveAt(num--);
                goto Label_00D6;
            Label_00B7:
                if (list[num].AbilityType == null)
                {
                    goto Label_00D6;
                }
                list.RemoveAt(num--);
            Label_00D6:
                num += 1;
            Label_00DC:
                if (num < list.Count)
                {
                    goto Label_0073;
                }
                if (list2.Count <= 0)
                {
                    goto Label_0126;
                }
                list.Add(AbilityData.ToMix(list2.ToArray(), self.mBattleUI.CommandWindow.OtherSkillName, self.mBattleUI.CommandWindow.OtherSkillIconName));
            Label_0126:
                self.mBattleUI.CommandWindow.SetAbilities(list.ToArray(), unit);
                self.ReflectUnitChgButton(unit, 0);
            Label_0145:
                if (self.mTutorialTriggers == null)
                {
                    goto Label_01B2;
                }
                controller2 = self.FindUnitController(self.mBattle.CurrentUnit);
                if ((controller2 != null) == null)
                {
                    goto Label_01B2;
                }
                num2 = 0;
                goto Label_01A3;
            Label_0178:
                self.mTutorialTriggers[num2].OnFinishCameraUnitFocus(self.mBattle.CurrentUnit, controller2.Unit.TurnCount);
                num2 += 1;
            Label_01A3:
                if (num2 < ((int) self.mTutorialTriggers.Length))
                {
                    goto Label_0178;
                }
            Label_01B2:
                num3 = 0;
                goto Label_01EA;
            Label_01BA:
                if ((self.mTacticsUnits[num3] != null) == null)
                {
                    goto Label_01E4;
                }
                self.mTacticsUnits[num3].UpdateBadStatus();
            Label_01E4:
                num3 += 1;
            Label_01EA:
                if (num3 < self.mTacticsUnits.Count)
                {
                    goto Label_01BA;
                }
                if ((self.mEventScript != null) == null)
                {
                    goto Label_023C;
                }
                controller3 = self.FindUnitController(unit);
                if ((controller3 != null) == null)
                {
                    goto Label_023C;
                }
                self.mEventSequence = self.mEventScript.OnUnitTurnStart(controller3, self.mIsFirstPlay);
            Label_023C:
                self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_WaitForLog>>();
                return;
            }
        }

        private class State_UnitWithdraw : State<SceneBattle>
        {
            private bool mIsFinished;

            public State_UnitWithdraw()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            private IEnumerator AsyncWork(Unit unit)
            {
                <AsyncWork>c__Iterator46 iterator;
                iterator = new <AsyncWork>c__Iterator46();
                iterator.unit = unit;
                iterator.<$>unit = unit;
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Begin(SceneBattle self)
            {
                LogUnitWithdraw withdraw;
                this.mIsFinished = 1;
                withdraw = self.mBattle.Logs.Peek as LogUnitWithdraw;
                if (withdraw != null)
                {
                    goto Label_0024;
                }
                return;
            Label_0024:
                this.mIsFinished = 0;
                self.StartCoroutine(this.AsyncWork(withdraw.self));
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mIsFinished == null)
                {
                    goto Label_0017;
                }
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitGC<SceneBattle.State_WaitForLog>>();
            Label_0017:
                return;
            }

            [CompilerGenerated]
            private sealed class <AsyncWork>c__Iterator46 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal Unit unit;
                internal TacticsUnitController <tuc>__0;
                internal Vector3 <pos>__1;
                internal GameObject <esc_eff>__2;
                internal int $PC;
                internal object $current;
                internal Unit <$>unit;
                internal SceneBattle.State_UnitWithdraw <>f__this;

                public <AsyncWork>c__Iterator46()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_002D;

                        case 1:
                            goto Label_00DE;

                        case 2:
                            goto Label_01BB;

                        case 3:
                            goto Label_0259;

                        case 4:
                            goto Label_02C7;
                    }
                    goto Label_02EF;
                Label_002D:
                    this.<tuc>__0 = this.<>f__this.self.FindUnitController(this.unit);
                    if ((this.<tuc>__0 != null) == null)
                    {
                        goto Label_02DC;
                    }
                    this.<tuc>__0.UpdateBadStatus();
                    this.<pos>__1 = this.<>f__this.self.CalcGridCenter(this.<>f__this.self.Battle.GetUnitGridPosition(this.unit));
                    this.<>f__this.self.InterpCameraDistance(GameSettings.Instance.GameCamera_DefaultDistance);
                    this.<>f__this.self.InterpCameraTarget(this.<pos>__1);
                    goto Label_00DE;
                Label_00CB:
                    this.$current = null;
                    this.$PC = 1;
                    goto Label_02F1;
                Label_00DE:
                    if (this.<>f__this.self.IsCameraMoving != null)
                    {
                        goto Label_00CB;
                    }
                    if ((this.<>f__this.self.mEventScript != null) == null)
                    {
                        goto Label_0179;
                    }
                    this.<>f__this.self.mEventSequence = this.<>f__this.self.mEventScript.OnUnitWithdraw(this.<tuc>__0, this.<>f__this.self.mIsFirstPlay);
                    if ((this.<>f__this.self.mEventSequence != null) == null)
                    {
                        goto Label_0179;
                    }
                    this.<>f__this.self.GotoState<SceneBattle.State_WaitEvent<SceneBattle.State_UnitWithdraw>>();
                    goto Label_02EF;
                Label_0179:
                    this.<>f__this.self.ShowSkillNamePlate(this.unit, null, LocalizedText.Get("quest.TELOP_WITHDRAW"), 1f);
                    this.$current = new WaitForSeconds(1f);
                    this.$PC = 2;
                    goto Label_02F1;
                Label_01BB:
                    if ((this.<>f__this.self.mWithdrawUnitEffect != null) == null)
                    {
                        goto Label_0233;
                    }
                    this.<esc_eff>__2 = Object.Instantiate(this.<>f__this.self.mWithdrawUnitEffect, this.<tuc>__0.get_transform().get_position(), this.<tuc>__0.get_transform().get_rotation()) as GameObject;
                    if ((this.<esc_eff>__2 != null) == null)
                    {
                        goto Label_0233;
                    }
                    SRPG_Extensions.RequireComponent<OneShotParticle>(this.<esc_eff>__2);
                Label_0233:
                    this.$current = new WaitForSeconds(&GameSettings.Instance.Quest.WithdrawUnitEffectWaitTime);
                    this.$PC = 3;
                    goto Label_02F1;
                Label_0259:
                    this.<>f__this.self.HideUnitMarkers(this.unit);
                    this.<>f__this.self.mTacticsUnits.Remove(this.<tuc>__0);
                    Object.Destroy(this.<tuc>__0.get_gameObject());
                    this.<>f__this.self.OnGimmickUpdate();
                    this.$current = new WaitForSeconds(1f);
                    this.$PC = 4;
                    goto Label_02F1;
                Label_02C7:
                    this.<>f__this.self.mSkillNamePlate.Close();
                Label_02DC:
                    this.<>f__this.mIsFinished = 1;
                    this.$PC = -1;
                Label_02EF:
                    return 0;
                Label_02F1:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        private class State_WaitEvent<T> : State<SceneBattle> where T: State<SceneBattle>, new()
        {
            public State_WaitEvent()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                int num;
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_0080;
                }
                if ((self.mBattleUI != null) == null)
                {
                    goto Label_002D;
                }
                self.mBattleUI.Hide();
            Label_002D:
                self.mUpdateCameraPosition = 0;
                self.SetPrioritizedUnit(null);
                MonoSingleton<GameManager>.Instance.EnableAnimationFrameSkipping = 0;
                self.HideAllHPGauges();
                self.HideAllUnitOwnerIndex();
                num = 0;
                goto Label_006F;
            Label_0059:
                self.mTacticsUnits[num].AutoUpdateRotation = 0;
                num += 1;
            Label_006F:
                if (num < self.mTacticsUnits.Count)
                {
                    goto Label_0059;
                }
            Label_0080:
                this.Update(self);
                return;
            }

            public override void End(SceneBattle self)
            {
                if ((self.mBattleUI != null) == null)
                {
                    goto Label_001C;
                }
                self.mBattleUI.Show();
            Label_001C:
                return;
            }

            public override void Update(SceneBattle self)
            {
                int num;
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_001D;
                }
                if (self.IsCameraMoving == null)
                {
                    goto Label_001D;
                }
                return;
            Label_001D:
                if ((self.mEventSequence == null) != null)
                {
                    goto Label_003E;
                }
                if (self.mEventSequence.IsPlaying != null)
                {
                    goto Label_00B2;
                }
            Label_003E:
                num = 0;
                goto Label_005B;
            Label_0045:
                self.mTacticsUnits[num].AutoUpdateRotation = 1;
                num += 1;
            Label_005B:
                if (num < self.mTacticsUnits.Count)
                {
                    goto Label_0045;
                }
                self.ResetCameraTarget();
                self.mUpdateCameraPosition = 1;
                if ((self.mEventSequence != null) == null)
                {
                    goto Label_00A1;
                }
                Object.DestroyImmediate(self.mEventSequence.get_gameObject());
                self.mEventSequence = null;
            Label_00A1:
                MonoSingleton<GameManager>.Instance.EnableAnimationFrameSkipping = 1;
                self.GotoState<T>();
            Label_00B2:
                return;
            }
        }

        private class State_WaitFade<T> : State<SceneBattle> where T: State<SceneBattle>, new()
        {
            public State_WaitFade()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                this.Update(self);
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (GameUtility.IsScreenFading == null)
                {
                    goto Label_000B;
                }
                return;
            Label_000B:
                self.GotoState<T>();
                return;
            }
        }

        private class State_WaitForLog : State<SceneBattle>
        {
            public State_WaitForLog()
            {
                base..ctor();
                return;
            }

            private unsafe bool CheckShieldEffect()
            {
                TacticsUnitController controller;
                TacticsUnitController controller2;
                TacticsUnitController.ShieldState state;
                controller = base.self.FindUnitController(base.self.Battle.CurrentUnit);
                if (controller == null)
                {
                    goto Label_005F;
                }
                controller.UpdateShields(1);
                if (base.self.FindChangedShield(&controller2, &state) == null)
                {
                    goto Label_005F;
                }
                base.self.mIgnoreShieldEffect.Clear();
                base.self.GotoState<SceneBattle.State_SpawnShieldEffects>();
                return 1;
            Label_005F:
                return 0;
            }

            public override void Update(SceneBattle self)
            {
                BattleLogServer server;
                BattleLog log;
                Unit unit;
                EUnitSide side;
                Unit unit2;
                EUnitSide side2;
                LogUnitEnd end;
                TacticsUnitController controller;
                LogFailCondition condition;
                TacticsUnitController controller2;
                <Update>c__AnonStorey1EC storeyec;
                storeyec = new <Update>c__AnonStorey1EC();
                storeyec.self = self;
                server = storeyec.self.Battle.Logs;
                goto Label_074F;
            Label_0026:
                log = server.Peek;
                if ((log as LogError) == null)
                {
                    goto Label_0045;
                }
                storeyec.self.GotoState<SceneBattle.State_Error>();
                return;
            Label_0045:
                if ((log as LogConnect) == null)
                {
                    goto Label_005D;
                }
                storeyec.self.GotoState<SceneBattle.State_Connect>();
                return;
            Label_005D:
                if ((log as LogUnitStart) == null)
                {
                    goto Label_01E3;
                }
                storeyec.self.mUnitStartCount += 1;
                storeyec.self.mUnitStartCountTotal += 1;
                storeyec.self.mBattleUI.OnUnitStart();
                if ((storeyec.self.mBattleUI_MultiPlay == null) == null)
                {
                    goto Label_00BD;
                }
                goto Label_01D6;
            Label_00BD:
                if ((storeyec.self.Battle.CurrentUnit.OwnerPlayerIndex <= 0) || (storeyec.self.Battle.CurrentUnit.OwnerPlayerIndex != storeyec.self.Battle.MyPlayerIndex))
                {
                    goto Label_011B;
                }
                storeyec.self.mBattleUI_MultiPlay.OnMyUnitStart();
                goto Label_01D6;
            Label_011B:
                unit = storeyec.self.Battle.AllUnits.Find(new Predicate<Unit>(storeyec.<>m__BA));
                side = (unit == null) ? storeyec.self.Battle.CurrentUnit.Side : unit.Side;
                if (storeyec.self.Battle.CurrentUnit.Side != side)
                {
                    goto Label_0199;
                }
                storeyec.self.mBattleUI_MultiPlay.OnOtherUnitStart();
                goto Label_01D6;
            Label_0199:
                if (storeyec.self.Battle.IsMultiVersus == null)
                {
                    goto Label_01C5;
                }
                storeyec.self.mBattleUI_MultiPlay.OnOtherUnitStart();
                goto Label_01D6;
            Label_01C5:
                storeyec.self.mBattleUI_MultiPlay.OnEnemyUnitStart();
            Label_01D6:
                storeyec.self.GotoState<SceneBattle.State_PreUnitStart>();
                return;
            Label_01E3:
                if ((log as LogUnitEntry) == null)
                {
                    goto Label_01FB;
                }
                storeyec.self.GotoState<SceneBattle.State_SpawnUnit>();
                return;
            Label_01FB:
                if ((log as LogUnitWithdraw) == null)
                {
                    goto Label_0213;
                }
                storeyec.self.GotoState<SceneBattle.State_UnitWithdraw>();
                return;
            Label_0213:
                if ((log as LogWeather) == null)
                {
                    goto Label_022B;
                }
                storeyec.self.GotoState<SceneBattle.State_Weather>();
                return;
            Label_022B:
                if ((log as LogMapCommand) == null)
                {
                    goto Label_025B;
                }
                if (this.CheckShieldEffect() == null)
                {
                    goto Label_0242;
                }
                return;
            Label_0242:
                storeyec.self.RemoveLog();
                storeyec.self.GotoMapCommand();
                return;
            Label_025B:
                if ((log as LogMapWait) == null)
                {
                    goto Label_0284;
                }
                storeyec.self.Battle.SetManualPlayFlag();
                storeyec.self.GotoState<SceneBattle.State_MapWait>();
                return;
            Label_0284:
                if ((log as LogMapMove) == null)
                {
                    goto Label_02AD;
                }
                storeyec.self.Battle.SetManualPlayFlag();
                storeyec.self.GotoState<SceneBattle.State_AnimateMove>();
                return;
            Label_02AD:
                if ((log as LogMapEvent) == null)
                {
                    goto Label_02CF;
                }
                if (storeyec.self.ConditionalGotoGimmickState() == null)
                {
                    goto Label_074F;
                }
                return;
                goto Label_074F;
            Label_02CF:
                if ((log as LogSkill) == null)
                {
                    goto Label_030E;
                }
                if (((LogSkill) log).skill.AttackType != 2)
                {
                    goto Label_0301;
                }
                storeyec.self.Battle.SetManualPlayFlag();
            Label_0301:
                storeyec.self.GotoPrepareSkill();
                return;
            Label_030E:
                if ((log as LogCastSkillStart) == null)
                {
                    goto Label_0337;
                }
                storeyec.self.mBattleUI.OnCastSkillStart();
                storeyec.self.GotoState<SceneBattle.State_CastSkillStart>();
                return;
            Label_0337:
                if ((log as LogCastSkillEnd) == null)
                {
                    goto Label_034F;
                }
                storeyec.self.GotoState<SceneBattle.State_CastSkillEnd>();
                return;
            Label_034F:
                if ((log as LogMapTrick) == null)
                {
                    goto Label_0367;
                }
                storeyec.self.GotoState<SceneBattle.State_MapTrick>();
                return;
            Label_0367:
                if ((log as LogUnitEnd) == null)
                {
                    goto Label_0526;
                }
                if (this.CheckShieldEffect() == null)
                {
                    goto Label_037E;
                }
                return;
            Label_037E:
                if ((storeyec.self.mBattleUI_MultiPlay == null) == null)
                {
                    goto Label_039A;
                }
                goto Label_048C;
            Label_039A:
                if ((storeyec.self.Battle.CurrentUnit.OwnerPlayerIndex <= 0) || (storeyec.self.Battle.CurrentUnit.OwnerPlayerIndex != storeyec.self.Battle.MyPlayerIndex))
                {
                    goto Label_03F8;
                }
                storeyec.self.mBattleUI_MultiPlay.OnMyUnitEnd();
                goto Label_048C;
            Label_03F8:
                unit2 = storeyec.self.Battle.AllUnits.Find(new Predicate<Unit>(storeyec.<>m__BB));
                side2 = (unit2 == null) ? storeyec.self.Battle.CurrentUnit.Side : unit2.Side;
                if (storeyec.self.Battle.CurrentUnit.Side != side2)
                {
                    goto Label_047B;
                }
                storeyec.self.mBattleUI_MultiPlay.OnOtherUnitEnd();
                goto Label_048C;
            Label_047B:
                storeyec.self.mBattleUI_MultiPlay.OnEnemyUnitEnd();
            Label_048C:
                if (storeyec.self.Battle.IsMultiVersus == null)
                {
                    goto Label_04DC;
                }
                storeyec.self.Battle.RemainVersusTurnCount = storeyec.self.UnitStartCountTotal;
                storeyec.self.ArenaActionCountSet(storeyec.self.Battle.RemainVersusTurnCount);
            Label_04DC:
                end = log as LogUnitEnd;
                if (end.self == null)
                {
                    goto Label_0519;
                }
                controller = storeyec.self.FindUnitController(end.self);
                if ((controller != null) == null)
                {
                    goto Label_0519;
                }
                controller.ClearBadStatusLocks();
            Label_0519:
                storeyec.self.GotoState<SceneBattle.State_UnitEnd>();
                return;
            Label_0526:
                if ((log as LogOrdealChangeNext) == null)
                {
                    goto Label_053E;
                }
                storeyec.self.GotoState<SceneBattle.State_OrdealChangeNext>();
                return;
            Label_053E:
                if ((log as LogMapEnd) == null)
                {
                    goto Label_0584;
                }
                if (storeyec.self.IsPlayingArenaQuest == null)
                {
                    goto Label_0577;
                }
                storeyec.self.ArenaActionCountSet(storeyec.self.Battle.ArenaActionCount);
            Label_0577:
                storeyec.self.GotoMapEnd();
                return;
            Label_0584:
                if ((log as LogDead) == null)
                {
                    goto Label_05C3;
                }
                if (storeyec.self.Battle.IsBattle != null)
                {
                    goto Label_05B6;
                }
                storeyec.self.GotoState<SceneBattle.State_EventMapDead>();
                goto Label_05C2;
            Label_05B6:
                storeyec.self.GotoState<SceneBattle.State_BattleDead>();
            Label_05C2:
                return;
            Label_05C3:
                if ((log as LogRevive) == null)
                {
                    goto Label_0602;
                }
                if (storeyec.self.Battle.IsBattle != null)
                {
                    goto Label_05F1;
                }
                storeyec.self.GotoState<SceneBattle.State_MapRevive>();
                return;
            Label_05F1:
                storeyec.self.RemoveLog();
                goto Label_074F;
            Label_0602:
                if ((log as LogDamage) == null)
                {
                    goto Label_0628;
                }
                DebugUtility.LogWarning("warning damage.");
                storeyec.self.RemoveLog();
                goto Label_074F;
            Label_0628:
                if ((log as LogAutoHeal) == null)
                {
                    goto Label_0640;
                }
                storeyec.self.GotoState<SceneBattle.State_AutoHeal>();
                return;
            Label_0640:
                if ((log as LogFailCondition) == null)
                {
                    goto Label_06A7;
                }
                condition = log as LogFailCondition;
                if (condition.self == null)
                {
                    goto Label_0696;
                }
                controller2 = storeyec.self.FindUnitController(condition.self);
                if ((controller2 != null) == null)
                {
                    goto Label_0696;
                }
                controller2.UnlockUpdateBadStatus(condition.condition);
                controller2.UpdateBadStatus();
            Label_0696:
                storeyec.self.RemoveLog();
                goto Label_074F;
            Label_06A7:
                if ((log as LogCureCondition) == null)
                {
                    goto Label_06C3;
                }
                storeyec.self.RemoveLog();
                goto Label_074F;
            Label_06C3:
                if ((log as LogCast) == null)
                {
                    goto Label_06EC;
                }
                storeyec.self.Battle.SetManualPlayFlag();
                storeyec.self.GotoState<SceneBattle.State_PrepareCast>();
                return;
            Label_06EC:
                if ((log as LogFall) == null)
                {
                    goto Label_0704;
                }
                storeyec.self.GotoState<SceneBattle.State_JumpFall>();
                return;
            Label_0704:
                if ((log as LogSync) == null)
                {
                    goto Label_0728;
                }
                storeyec.self.RemoveLog();
                storeyec.self.GotoState<SceneBattle.State_MultiPlaySync>();
                return;
            Label_0728:
                DebugUtility.LogError("不明なログを検出しました " + log.GetType().ToString());
                storeyec.self.RemoveLog();
                return;
            Label_074F:
                if (server.Num > 0)
                {
                    goto Label_0026;
                }
                return;
            }

            [CompilerGenerated]
            private sealed class <Update>c__AnonStorey1EC
            {
                internal SceneBattle self;

                public <Update>c__AnonStorey1EC()
                {
                    base..ctor();
                    return;
                }

                internal bool <>m__BA(Unit u)
                {
                    return (u.OwnerPlayerIndex == this.self.Battle.MyPlayerIndex);
                }

                internal bool <>m__BB(Unit u)
                {
                    return (u.OwnerPlayerIndex == this.self.Battle.MyPlayerIndex);
                }
            }
        }

        private class State_WaitGC<NextState> : State<SceneBattle> where NextState: State<SceneBattle>, new()
        {
            private AsyncOperation mAsyncOp;

            public State_WaitGC()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
            }

            public override void Update(SceneBattle self)
            {
                self.GotoState<NextState>();
                return;
            }
        }

        private class State_WaitSignal<T> : State<SceneBattle> where T: State<SceneBattle>, new()
        {
            public State_WaitSignal()
            {
                base..ctor();
                return;
            }

            public override void Begin(SceneBattle self)
            {
                self.mIsWaitingForBattleSignal = 1;
                this.Update(self);
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (self.mUISignal != null)
                {
                    goto Label_0018;
                }
                self.mIsWaitingForBattleSignal = 0;
                self.GotoState<T>();
            Label_0018:
                return;
            }
        }

        private class State_Weather : State<SceneBattle>
        {
            private LogWeather mLog;
            private bool mIsFinished;

            public State_Weather()
            {
                base..ctor();
                return;
            }

            [DebuggerHidden]
            private IEnumerator AsyncWeather()
            {
                <AsyncWeather>c__Iterator45 iterator;
                iterator = new <AsyncWeather>c__Iterator45();
                iterator.<>f__this = this;
                return iterator;
            }

            public override void Begin(SceneBattle self)
            {
                this.mLog = self.Battle.Logs.Peek as LogWeather;
                if (this.mLog == null)
                {
                    goto Label_004A;
                }
                if (this.mLog.WeatherData == null)
                {
                    goto Label_004A;
                }
                this.mIsFinished = 0;
                self.StartCoroutine(this.AsyncWeather());
            Label_004A:
                return;
            }

            public override void Update(SceneBattle self)
            {
                if (this.mIsFinished == null)
                {
                    goto Label_001E;
                }
                this.mLog = null;
                self.RemoveLog();
                self.GotoState<SceneBattle.State_WaitForLog>();
            Label_001E:
                return;
            }

            [CompilerGenerated]
            private sealed class <AsyncWeather>c__Iterator45 : IEnumerator, IDisposable, IEnumerator<object>
            {
                internal int $PC;
                internal object $current;
                internal SceneBattle.State_Weather <>f__this;

                public <AsyncWeather>c__Iterator45()
                {
                    base..ctor();
                    return;
                }

                [DebuggerHidden]
                public void Dispose()
                {
                    this.$PC = -1;
                    return;
                }

                public unsafe bool MoveNext()
                {
                    uint num;
                    bool flag;
                    num = this.$PC;
                    this.$PC = -1;
                    switch (num)
                    {
                        case 0:
                            goto Label_002D;

                        case 1:
                            goto Label_0049;

                        case 2:
                            goto Label_0083;

                        case 3:
                            goto Label_00E1;

                        case 4:
                            goto Label_013C;
                    }
                    goto Label_014F;
                Label_002D:
                    this.$current = new WaitForSeconds(0.5f);
                    this.$PC = 1;
                    goto Label_0151;
                Label_0049:
                    this.<>f__this.self.StartCoroutine(this.<>f__this.self.StopWeatherEffect(0));
                    goto Label_0083;
                Label_0070:
                    this.$current = null;
                    this.$PC = 2;
                    goto Label_0151;
                Label_0083:
                    if (this.<>f__this.self.IsStoppedWeatherEffect == null)
                    {
                        goto Label_0070;
                    }
                    this.<>f__this.self.StartCoroutine(this.<>f__this.self.SetWeatherEffect(this.<>f__this.mLog.WeatherData));
                    goto Label_00E1;
                Label_00CE:
                    this.$current = null;
                    this.$PC = 3;
                    goto Label_0151;
                Label_00E1:
                    if (this.<>f__this.self.IsSetWeatherEffect == null)
                    {
                        goto Label_00CE;
                    }
                    this.<>f__this.self.ReflectWeatherInfo(this.<>f__this.mLog.WeatherData);
                    this.$current = new WaitForSeconds(&GameSettings.Instance.Quest.WeatherEffectChangeTime);
                    this.$PC = 4;
                    goto Label_0151;
                Label_013C:
                    this.<>f__this.mIsFinished = 1;
                    this.$PC = -1;
                Label_014F:
                    return 0;
                Label_0151:
                    return 1;
                    return flag;
                }

                [DebuggerHidden]
                public void Reset()
                {
                    throw new NotSupportedException();
                }

                object IEnumerator<object>.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }

                object IEnumerator.Current
                {
                    [DebuggerHidden]
                    get
                    {
                        return this.$current;
                    }
                }
            }
        }

        public delegate void StateTransitionRequest(SceneBattle.StateTransitionTypes type);

        public enum StateTransitionTypes
        {
            Forward,
            Back
        }

        public enum TargetActionTypes
        {
            None,
            Attack,
            Skill,
            Heal
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct TargetSelectorParam
        {
            public ItemData Item;
            public SkillData Skill;
            public SceneBattle.SelectTargetCallback OnCancel;
            public object OnAccept;
            public Unit DefaultTarget;
            public bool AllowTargetChange;
            public bool IsThrowTargetSelect;
            public Unit DefaultThrowTarget;
            public Unit ThrowTarget;
        }

        public class TreasureEvent : SceneBattle.SimpleEvent.Interface
        {
            public static int GROUP;

            static TreasureEvent()
            {
                GROUP = "TreasureEvent".GetHashCode();
                return;
            }

            public TreasureEvent()
            {
                base..ctor();
                return;
            }

            public void OnEvent(string key, object obj)
            {
                DropItemEffect effect;
                Unit unit;
                DropGoldEffect effect2;
                Unit unit2;
                if ((key == "DropItemEffect.End") == null)
                {
                    goto Label_0073;
                }
                effect = obj as DropItemEffect;
                if ((effect != null) == null)
                {
                    goto Label_00DA;
                }
                unit = effect.DropOwner;
                if (unit == null)
                {
                    goto Label_0036;
                }
                unit.EndDropDirection();
            Label_0036:
                SceneBattle.Instance.AddDispTreasureCount(1);
                if ((effect != null) == null)
                {
                    goto Label_00DA;
                }
                if ((effect.TargetRect != null) == null)
                {
                    goto Label_00DA;
                }
                GameParameter.UpdateAll(effect.TargetRect.get_gameObject());
                goto Label_00DA;
            Label_0073:
                if ((key == "DropGoldEffect.End") == null)
                {
                    goto Label_00DA;
                }
                effect2 = obj as DropGoldEffect;
                if ((effect2 != null) == null)
                {
                    goto Label_00DA;
                }
                unit2 = effect2.DropOwner;
                if (unit2 == null)
                {
                    goto Label_00A9;
                }
                unit2.EndDropDirection();
            Label_00A9:
                SceneBattle.Instance.AddGoldCount(effect2.Gold);
                if ((effect2.TargetRect != null) == null)
                {
                    goto Label_00DA;
                }
                GameParameter.UpdateAll(effect2.TargetRect.get_gameObject());
            Label_00DA:
                return;
            }
        }

        private delegate void UnitClickEvent(TacticsUnitController controller);

        private delegate void UnitFocusEvent(TacticsUnitController controller);

        private enum UnitMarkerTypes
        {
            Target,
            Enemy,
            Assist
        }

        public class VirtualStickInput : SceneBattle.MoveInput
        {
            private const float STOP_RADIUS = 0.1f;
            private TacticsUnitController mController;
            private GridMap<int> mWalkableGrids;
            private Vector3 mStart;
            private int mDestX;
            private int mDestY;
            private Vector2 mBasePos;
            private Vector2 mTargetPos;
            private bool mTargetSet;
            private bool mMoveStarted;
            private bool mClickedOK;
            private float mGridSnapTime;
            private bool mJumping;
            private bool mHasInput;
            private int mCurrentX;
            private int mCurrentY;
            private GridMap<bool> mShateiGrid;
            private float mStopTime;
            private bool mRouteSet;
            private bool mFullAccel;
            private bool mHasDesiredRotation;
            private bool mGridSnapping;
            private Quaternion mDesiredRotation;
            private bool mUpdateShateiGrid;
            private bool mShateiVisible;

            public VirtualStickInput()
            {
                this.mBasePos = Vector2.get_zero();
                this.mTargetPos = Vector2.get_zero();
                base..ctor();
                return;
            }

            private unsafe void AdjustTargetPos(ref Vector2 basePos, ref Vector2 targetPos, Vector2 inputDir, Vector2 unitPos)
            {
                Vector2[] vectorArray1;
                bool flag;
                Vector3 vector;
                float num;
                Vector2[] vectorArray;
                float[] numArray;
                int num2;
                int num3;
                int num4;
                Vector2 vector2;
                int num5;
                Vector2 vector3;
                if (this.CanMoveToAdj(*(basePos), *(targetPos)) == null)
                {
                    goto Label_0018;
                }
                return;
            Label_0018:
                flag = 0;
                vector3 = *(targetPos) - *(basePos);
                if (Vector3.Dot(&vector3.get_normalized(), unitPos - *(basePos)) < -0.1f)
                {
                    goto Label_0272;
                }
                vectorArray1 = new Vector2[8];
                *(&(vectorArray1[0])) = new Vector2(-1f, 1f);
                *(&(vectorArray1[1])) = new Vector2(0f, 1f);
                *(&(vectorArray1[2])) = new Vector2(1f, 1f);
                *(&(vectorArray1[3])) = new Vector2(1f, 0f);
                *(&(vectorArray1[4])) = new Vector2(1f, -1f);
                *(&(vectorArray1[5])) = new Vector2(0f, -1f);
                *(&(vectorArray1[6])) = new Vector2(-1f, -1f);
                *(&(vectorArray1[7])) = new Vector2(-1f, 0f);
                vectorArray = vectorArray1;
                numArray = new float[(int) vectorArray.Length];
                &inputDir.Normalize();
                num2 = 0;
                goto Label_0174;
            Label_0156:
                numArray[num2] = Vector2.Dot(&(vectorArray[num2]).get_normalized(), inputDir);
                num2 += 1;
            Label_0174:
                if (num2 < ((int) vectorArray.Length))
                {
                    goto Label_0156;
                }
                num3 = 0;
                goto Label_01E2;
            Label_0186:
                num4 = num3 + 1;
                goto Label_01D2;
            Label_0191:
                if (numArray[num3] >= numArray[num4])
                {
                    goto Label_01CC;
                }
                GameUtility.swap<float>(&(numArray[num3]), &(numArray[num4]));
                GameUtility.swap<Vector2>(&(vectorArray[num3]), &(vectorArray[num4]));
            Label_01CC:
                num4 += 1;
            Label_01D2:
                if (num4 < ((int) vectorArray.Length))
                {
                    goto Label_0191;
                }
                num3 += 1;
            Label_01E2:
                if (num3 < ((int) vectorArray.Length))
                {
                    goto Label_0186;
                }
                vector2 = Vector2.get_zero();
                num5 = 1;
                goto Label_0259;
            Label_01FB:
                &vector2.x = basePos.x + &(vectorArray[num5]).x;
                &vector2.y = basePos.y + &(vectorArray[num5]).y;
                if (this.CanMoveToAdj(this.mBasePos, vector2) == null)
                {
                    goto Label_0253;
                }
                *(targetPos) = vector2;
                flag = 1;
                goto Label_0272;
            Label_0253:
                num5 += 1;
            Label_0259:
                if (num5 >= ((int) vectorArray.Length))
                {
                    goto Label_0272;
                }
                if (numArray[num5] >= 0.5f)
                {
                    goto Label_01FB;
                }
            Label_0272:
                if (flag == null)
                {
                    goto Label_028F;
                }
                if (this.CanMoveToAdj(*(basePos), *(targetPos)) != null)
                {
                    goto Label_029B;
                }
            Label_028F:
                *(targetPos) = *(basePos);
            Label_029B:
                return;
            }

            private unsafe bool CanMoveToAdj(Vector2 from, Vector2 to)
            {
                return ((this.IsGridBlocked(to) != null) ? 0 : ((this.IsGridBlocked(&from.x, &to.y) == null) ? 1 : (this.IsGridBlocked(&to.x, &from.y) == 0)));
            }

            private unsafe bool CanMoveToAdjDirect(Vector2 from, Vector2 to)
            {
                return ((this.IsGridBlocked(&from.x, &to.y) != null) ? 0 : (this.IsGridBlocked(&to.x, &from.y) == 0));
            }

            public override void End()
            {
                List<TacticsUnitController> list;
                int num;
                base.SceneOwner.mTouchController.OnClick = (TouchController.ClickEvent) Delegate.Remove(base.SceneOwner.mTouchController.OnClick, new TouchController.ClickEvent(this.OnClick));
                base.SceneOwner.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Remove(base.SceneOwner.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                base.SceneOwner.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Remove(base.SceneOwner.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                base.SceneOwner.m_AllowCameraTranslation = 1;
                base.SceneOwner.mDisplayBlockedGridMarker = 0;
                list = base.SceneOwner.mTacticsUnits;
                num = 0;
                goto Label_00DB;
            Label_00AF:
                list[num].SetHPGaugeMode(0, null, null);
                list[num].SetHPChangeYosou(list[num].VisibleHPValue, 0);
                num += 1;
            Label_00DB:
                if (num < list.Count)
                {
                    goto Label_00AF;
                }
                if (base.SceneOwner.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_0108;
                }
                this.mController.AutoUpdateRotation = 1;
            Label_0108:
                this.mController.StopRunning();
                this.mController.WalkableField = null;
                this.mController.HideCursor(0);
                base.SceneOwner.mTacticsSceneRoot.HideGridLayer(0);
                return;
            }

            private unsafe bool GridEqualIn2D(Vector2 a, Vector2 b)
            {
                return ((((int) &a.x) != ((int) &b.x)) ? 0 : (((int) &a.y) == ((int) &b.y)));
            }

            private void HideShatei()
            {
                base.SceneOwner.mTacticsSceneRoot.HideGridLayer(1);
                this.mShateiVisible = 0;
                base.SceneOwner.HideCastSkill(0);
                return;
            }

            private unsafe bool IsGridBlocked(Vector2 co)
            {
                return this.IsGridBlocked(&co.x, &co.y);
            }

            private bool IsGridBlocked(float x, float y)
            {
                int num;
                int num2;
                num = Mathf.FloorToInt(x);
                num2 = Mathf.FloorToInt(y);
                if (this.mWalkableGrids.isValid(num, num2) == null)
                {
                    goto Label_0031;
                }
                return (this.mWalkableGrids.get(num, num2) < 0);
            Label_0031:
                return 1;
            }

            public override void MoveUnit(Vector3 target_screen_pos)
            {
                this.OnClick(target_screen_pos);
                return;
            }

            private unsafe void OnClick(Vector2 screenPos)
            {
                Unit unit;
                float num;
                RectTransform transform;
                Vector2 vector;
                Unit unit2;
                float num2;
                SkillData data;
                int num3;
                TacticsUnitController controller;
                Unit unit3;
                RectTransform transform2;
                float num4;
                IntVector2 vector2;
                IntVector2 vector3;
                Vector3[] vectorArray;
                Rect rect;
                Vector2 vector4;
                if (base.SceneOwner.Battle.EntryBattleMultiPlayTimeUp == null)
                {
                    goto Label_0016;
                }
                return;
            Label_0016:
                if (base.SceneOwner.IsControlBattleUI(0x80) != null)
                {
                    goto Label_002C;
                }
                return;
            Label_002C:
                unit = this.mController.Unit;
                if (this.mShateiGrid == null)
                {
                    goto Label_01BD;
                }
                transform = base.SceneOwner.mTouchController.get_transform() as RectTransform;
                RectTransformUtility.ScreenPointToLocalPointInRectangle(transform, screenPos, null, &vector);
                vector -= &transform.get_rect().get_position();
                unit2 = null;
                num2 = 3.402823E+38f;
                data = unit.GetAttackSkill();
                num3 = 0;
                goto Label_0196;
            Label_0094:
                controller = base.SceneOwner.mTacticsUnits[num3];
                if ((controller == null) == null)
                {
                    goto Label_00BA;
                }
                goto Label_0190;
            Label_00BA:
                unit3 = controller.Unit;
                if (unit3 != null)
                {
                    goto Label_00CF;
                }
                goto Label_0190;
            Label_00CF:
                transform2 = controller.HPGaugeTransform;
                if ((transform2 == null) != null)
                {
                    goto Label_0190;
                }
                if (transform2.get_gameObject().get_activeInHierarchy() != null)
                {
                    goto Label_00FB;
                }
                goto Label_0190;
            Label_00FB:
                if (this.mShateiGrid.isValid(unit3.x, unit3.y) == null)
                {
                    goto Label_0190;
                }
                if (this.mShateiGrid.get(unit3.x, unit3.y) != null)
                {
                    goto Label_013C;
                }
                goto Label_0190;
            Label_013C:
                if (base.SceneOwner.mBattle.CheckSkillTarget(unit, unit3, data) != null)
                {
                    goto Label_015B;
                }
                goto Label_0190;
            Label_015B:
                vector4 = transform2.get_anchoredPosition() - vector;
                num4 = &vector4.get_magnitude();
                if (num4 >= num2)
                {
                    goto Label_0190;
                }
                if (num4 >= 80f)
                {
                    goto Label_0190;
                }
                unit2 = unit3;
                num2 = num4;
            Label_0190:
                num3 += 1;
            Label_0196:
                if (num3 < base.SceneOwner.mTacticsUnits.Count)
                {
                    goto Label_0094;
                }
                if (unit2 == null)
                {
                    goto Label_01BD;
                }
                base.SelectAttackTarget(unit2);
                return;
            Label_01BD:
                vector2 = base.SceneOwner.CalcClickedGrid(screenPos);
                vector3 = base.SceneOwner.CalcCoord(this.mController.get_transform().get_position());
                if ((vector3 != vector2) == null)
                {
                    goto Label_02EC;
                }
                if (this.mController.IsPlayingFieldAction != null)
                {
                    goto Label_02EC;
                }
                vectorArray = base.SceneOwner.FindPath(&vector3.x, &vector3.y, &vector2.x, &vector2.y, unit.DisableMoveGridHeight, this.mWalkableGrids);
                if (vectorArray == null)
                {
                    goto Label_02EC;
                }
                *(&(vectorArray[0])) = this.mController.CenterPosition;
                this.mController.StartMove(vectorArray, -1f);
                if (this.mRouteSet != null)
                {
                    goto Label_027E;
                }
                this.HideShatei();
            Label_027E:
                this.mRouteSet = 1;
                this.mTargetSet = 0;
                this.mGridSnapping = 0;
                this.mDestX = &vector2.x;
                this.mDestY = &vector2.y;
                base.SceneOwner.SendInputGridXY(base.SceneOwner.Battle.CurrentUnit, &vector2.x, &vector2.y, base.SceneOwner.Battle.CurrentUnit.Direction, 1);
            Label_02EC:
                return;
            }

            private void OnDrag()
            {
            }

            private void OnDragEnd()
            {
                base.SceneOwner.SendInputGridXY(base.SceneOwner.Battle.CurrentUnit, this.mDestX, this.mDestY, base.SceneOwner.Battle.CurrentUnit.Direction, 1);
                return;
            }

            private void RecalcAttackTargets()
            {
                Unit unit;
                SkillData data;
                List<Unit> list;
                int num;
                TacticsUnitController controller;
                BattleCore.CommandResult result;
                bool flag;
                int num2;
                Unit unit2;
                TacticsUnitController controller2;
                int num3;
                unit = this.mController.Unit;
                if (unit.IsEnableAttackCondition(0) != null)
                {
                    goto Label_0019;
                }
                return;
            Label_0019:
                this.mController.Unit.RefleshMomentBuff(base.SceneOwner.Battle.Units, 1, this.mCurrentX, this.mCurrentY);
                data = unit.GetAttackSkill();
                this.mUpdateShateiGrid = 1;
                this.mShateiGrid = base.SceneOwner.Battle.CreateSelectGridMap(unit, this.mCurrentX, this.mCurrentY, data);
                base.SceneOwner.mNumHotTargets = 0;
                base.SceneOwner.mHotTargets.Clear();
                list = base.SceneOwner.mBattle.Units;
                num = 0;
                goto Label_0302;
            Label_00AC:
                controller = base.SceneOwner.FindUnitController(list[num]);
                if ((controller == null) == null)
                {
                    goto Label_00D2;
                }
                goto Label_02FE;
            Label_00D2:
                if (this.mShateiGrid.isValid(list[num].x, list[num].y) == null)
                {
                    goto Label_02E5;
                }
                if (this.mShateiGrid.get(list[num].x, list[num].y) == null)
                {
                    goto Label_02E5;
                }
                if (base.SceneOwner.mBattle.CheckSkillTarget(unit, list[num], data) == null)
                {
                    goto Label_02E5;
                }
                result = base.SceneOwner.mBattle.GetCommandResult(unit, this.mCurrentX, this.mCurrentY, list[num].x, list[num].y, data);
                if (result == null)
                {
                    goto Label_02C7;
                }
                if (result.targets == null)
                {
                    goto Label_02C7;
                }
                if (result.targets.Count <= 0)
                {
                    goto Label_02C7;
                }
                flag = 0;
                num2 = 0;
                goto Label_028F;
            Label_01A8:
                unit2 = result.targets[num2].unit;
                controller2 = base.SceneOwner.FindUnitController(unit2);
                if ((controller2 == null) == null)
                {
                    goto Label_01DE;
                }
                goto Label_0289;
            Label_01DE:
                num3 = unit2.CurrentStatus.param.hp - result.targets[num2].hp_damage;
                if (result.skill == null)
                {
                    goto Label_023F;
                }
                if (result.skill.IsMhmDamage() == null)
                {
                    goto Label_023F;
                }
                num3 = unit2.CurrentStatus.param.hp;
            Label_023F:
                controller2.SetHPChangeYosou(num3, 0);
                controller2.SetHPGaugeMode(1, data, unit);
                base.SceneOwner.mNumHotTargets += 1;
                base.SceneOwner.mHotTargets.Add(controller);
                if ((controller == controller2) == null)
                {
                    goto Label_0289;
                }
                flag = 1;
            Label_0289:
                num2 += 1;
            Label_028F:
                if (num2 < result.targets.Count)
                {
                    goto Label_01A8;
                }
                if (flag != null)
                {
                    goto Label_02FE;
                }
                controller.SetHPGaugeMode(0, null, null);
                controller.SetHPChangeYosou(controller.VisibleHPValue, 0);
                goto Label_02E0;
            Label_02C7:
                controller.SetHPGaugeMode(0, null, null);
                controller.SetHPChangeYosou(controller.VisibleHPValue, 0);
            Label_02E0:
                goto Label_02FE;
            Label_02E5:
                controller.SetHPGaugeMode(0, null, null);
                controller.SetHPChangeYosou(controller.VisibleHPValue, 0);
            Label_02FE:
                num += 1;
            Label_0302:
                if (num < list.Count)
                {
                    goto Label_00AC;
                }
                return;
            }

            public override void Reset()
            {
                this.mController.get_transform().set_position(this.mStart);
                this.mController.CancelAction();
                base.SceneOwner.SetCameraTarget(this.mStart);
                base.SceneOwner.SendInputMoveEnd(base.SceneOwner.Battle.CurrentUnit, 1);
                this.mMoveStarted = 0;
                return;
            }

            public override unsafe void Start()
            {
                Unit unit;
                BattleMap map;
                IntVector2 vector;
                Grid grid;
                base.SceneOwner.m_AllowCameraTranslation = 0;
                unit = base.SceneOwner.Battle.CurrentUnit;
                this.mController = base.SceneOwner.FindUnitController(unit);
                this.mController.AutoUpdateRotation = 0;
                base.SceneOwner.ShowUnitCursorOnCurrent();
                map = base.SceneOwner.Battle.CurrentMap;
                this.mWalkableGrids = base.SceneOwner.CreateCurrentAccessMap();
                this.mController.WalkableField = this.mWalkableGrids;
                base.SceneOwner.ShowWalkableGrids(this.mWalkableGrids, 0);
                vector = base.SceneOwner.CalcCoord(this.mController.CenterPosition);
                grid = map[&vector.x, &vector.y];
                this.mStart = base.SceneOwner.CalcGridCenter(grid);
                this.mDestX = &vector.x;
                this.mDestY = &vector.y;
                this.mCurrentX = this.mDestX;
                this.mCurrentY = this.mDestY;
                &this.mBasePos.x = ((float) &vector.x) + 0.5f;
                &this.mBasePos.y = ((float) &vector.y) + 0.5f;
                this.mTargetPos = this.mBasePos;
                base.SceneOwner.ResetMoveCamera();
                base.SceneOwner.SendInputMoveStart(base.SceneOwner.Battle.CurrentUnit);
                base.SceneOwner.mTouchController.OnClick = (TouchController.ClickEvent) Delegate.Combine(base.SceneOwner.mTouchController.OnClick, new TouchController.ClickEvent(this.OnClick));
                base.SceneOwner.mTouchController.OnDragDelegate = (TouchController.DragEvent) Delegate.Combine(base.SceneOwner.mTouchController.OnDragDelegate, new TouchController.DragEvent(this.OnDrag));
                base.SceneOwner.mTouchController.OnDragEndDelegate = (TouchController.DragEvent) Delegate.Combine(base.SceneOwner.mTouchController.OnDragEndDelegate, new TouchController.DragEvent(this.OnDragEnd));
                this.RecalcAttackTargets();
                return;
            }

            private unsafe void SyncCameraPosition()
            {
                Vector3 vector;
                vector = this.mController.get_transform().get_position();
                base.SceneOwner.SetCameraTarget(&vector.x, &vector.z);
                return;
            }

            public override unsafe void Update()
            {
                Transform transform;
                Vector3 vector;
                bool flag;
                Vector2 vector2;
                Vector2 vector3;
                Vector3 vector4;
                IntVector2 vector5;
                float num;
                float num2;
                float num3;
                float num4;
                float num5;
                Vector3 vector6;
                Grid grid;
                Vector3 vector7;
                bool flag2;
                Quaternion quaternion;
                GameSettings settings;
                float num6;
                float num7;
                float num8;
                float num9;
                float num10;
                float num11;
                Vector3 vector8;
                Vector2 vector9;
                float num12;
                int num13;
                int num14;
                int num15;
                int num16;
                IntVector2 vector10;
                BattleMap map;
                Vector2 vector11;
                Vector3 vector12;
                if (this.mGridSnapping == null)
                {
                    goto Label_002F;
                }
                this.SyncCameraPosition();
                if (this.mController.isIdle != null)
                {
                    goto Label_0022;
                }
                return;
            Label_0022:
                this.UpdateBlockMarker();
                this.mGridSnapping = 0;
            Label_002F:
                if (this.mClickedOK == null)
                {
                    goto Label_0046;
                }
                base.SceneOwner.GotoState_WaitSignal<SceneBattle.State_WaitForLog>();
                return;
            Label_0046:
                if (base.SceneOwner.IsCameraMoving == null)
                {
                    goto Label_0057;
                }
                return;
            Label_0057:
                if (this.mController.IsPlayingFieldAction == null)
                {
                    goto Label_006E;
                }
                this.SyncCameraPosition();
                return;
            Label_006E:
                if (this.mJumping == null)
                {
                    goto Label_00A1;
                }
                this.mJumping = 0;
                base.SceneOwner.SendInputMove(base.SceneOwner.Battle.CurrentUnit, this.mController);
            Label_00A1:
                transform = this.mController.get_transform();
                vector = this.mController.CenterPosition;
                flag = 0;
                &vector2..ctor(&vector.x, &vector.z);
                if ((this.mTargetSet == null) || (this.GridEqualIn2D(vector2, this.mTargetPos) == null))
                {
                    goto Label_0162;
                }
                this.mBasePos = this.mTargetPos;
                this.mDestX = Mathf.FloorToInt(&this.mBasePos.x);
                this.mDestY = Mathf.FloorToInt(&this.mBasePos.y);
                base.SceneOwner.SendInputGridXY(base.SceneOwner.Battle.CurrentUnit, this.mDestX, this.mDestY, base.SceneOwner.Battle.CurrentUnit.Direction, 0);
            Label_0162:
                vector3 = this.Velocity;
                if (this.mRouteSet == null)
                {
                    goto Label_0241;
                }
                this.SyncCameraPosition();
                if ((this.mController.isMoving != null) && ((&this.Velocity.get_magnitude() < 0.1f) || (this.mController.IsPlayingFieldAction != null)))
                {
                    goto Label_023A;
                }
                this.mRouteSet = 0;
                this.mTargetSet = 0;
                this.mGridSnapping = 0;
                this.mController.StopRunning();
                vector4 = this.mController.CenterPosition;
                vector5 = base.SceneOwner.CalcCoord(vector4);
                this.mDestX = &vector5.x;
                this.mDestY = &vector5.y;
                &this.mBasePos.x = ((float) this.mDestX) + 0.5f;
                &this.mBasePos.y = ((float) this.mDestY) + 0.5f;
            Label_023A:
                this.UpdateBlockMarker();
                return;
            Label_0241:
                if (&vector3.get_sqrMagnitude() <= 0f)
                {
                    goto Label_039D;
                }
                if (this.mMoveStarted != null)
                {
                    goto Label_0264;
                }
                this.mMoveStarted = 1;
            Label_0264:
                num = Mathf.Atan2(&vector3.y, &vector3.x) * 57.29578f;
                num = Mathf.Floor((num + 22.5f) / 45f) * 45f;
                num2 = Mathf.Cos(num * 0.01745329f);
                num3 = Mathf.Sin(num * 0.01745329f);
                num4 = (Mathf.Abs(num2) < 0.0001f) ? 0f : Mathf.Sign(num2);
                num5 = (Mathf.Abs(num3) < 0.0001f) ? 0f : Mathf.Sign(num3);
                &this.mTargetPos.x = &this.mBasePos.x + num4;
                &this.mTargetPos.y = &this.mBasePos.y + num5;
                this.AdjustTargetPos(&this.mBasePos, &this.mTargetPos, vector3, vector2);
                &vector6..ctor(&vector3.x, 0f, &vector3.y);
                this.mDesiredRotation = Quaternion.LookRotation(vector6);
                this.mHasDesiredRotation = 1;
                this.mTargetSet = 1;
                this.mGridSnapTime = &GameSettings.Instance.Quest.GridSnapDelay;
                this.mHasInput = 1;
                goto Label_048E;
            Label_039D:
                this.mFullAccel = 0;
                this.mTargetSet = 0;
                this.mHasInput = 0;
                this.mController.StopRunning();
                if (this.mGridSnapTime < 0f)
                {
                    goto Label_048E;
                }
                if (this.mHasDesiredRotation != null)
                {
                    goto Label_048E;
                }
                this.mGridSnapTime -= Time.get_deltaTime();
                if (this.mGridSnapTime > 0f)
                {
                    goto Label_048E;
                }
                grid = base.SceneOwner.mBattle.CurrentMap[this.mDestX, this.mDestY];
                this.mController.StepTo(base.SceneOwner.CalcGridCenter(grid));
                this.mGridSnapping = 1;
                if (base.SceneOwner.Battle.CurrentUnit == null)
                {
                    goto Label_048E;
                }
                base.SceneOwner.SendInputGridXY(base.SceneOwner.Battle.CurrentUnit, this.mDestX, this.mDestY, base.SceneOwner.Battle.CurrentUnit.Direction, 1);
            Label_048E:
                vector7 = Vector3.get_zero();
                if (this.mTargetSet == null)
                {
                    goto Label_0577;
                }
                if (this.CanMoveToAdjDirect(this.mBasePos, this.mTargetPos) == null)
                {
                    goto Label_04CF;
                }
                vector7 = this.mTargetPos - vector2;
                goto Label_055A;
            Label_04CF:
                if (this.IsGridBlocked(&vector2.x, &this.mTargetPos.y) == null)
                {
                    goto Label_050B;
                }
                &vector7.x = &this.mTargetPos.x - &vector2.x;
                goto Label_055A;
            Label_050B:
                if (this.IsGridBlocked(&this.mTargetPos.x, &vector2.y) == null)
                {
                    goto Label_0547;
                }
                &vector7.y = &this.mTargetPos.y - &vector2.y;
                goto Label_055A;
            Label_0547:
                vector7 = this.mTargetPos - vector2;
            Label_055A:
                if (&vector7.get_magnitude() >= 0.1f)
                {
                    goto Label_0577;
                }
                vector7 = Vector2.get_zero();
            Label_0577:
                flag2 = &vector7.get_sqrMagnitude() > 0f;
                if (this.mHasDesiredRotation != null)
                {
                    goto Label_0599;
                }
                if (flag2 == null)
                {
                    goto Label_08C6;
                }
            Label_0599:
                if (flag2 == null)
                {
                    goto Label_05C4;
                }
                quaternion = Quaternion.LookRotation(new Vector3(&vector7.x, 0f, &vector7.y));
                goto Label_05CC;
            Label_05C4:
                quaternion = this.mDesiredRotation;
            Label_05CC:
                settings = GameSettings.Instance;
                num6 = &vector3.get_magnitude();
                num7 = 0f;
                if (this.mFullAccel == null)
                {
                    goto Label_0629;
                }
                num7 = num6;
                this.mController.get_transform().set_rotation(Quaternion.Slerp(this.mController.get_transform().get_rotation(), quaternion, Time.get_deltaTime() * 5f));
                goto Label_06E1;
            Label_0629:
                this.mController.get_transform().set_rotation(Quaternion.Slerp(this.mController.get_transform().get_rotation(), quaternion, Time.get_deltaTime() * 10f));
                num8 = Quaternion.Angle(quaternion, this.mController.get_transform().get_rotation());
                if (num6 <= 0.1f)
                {
                    goto Label_06BC;
                }
                if (num8 >= 1f)
                {
                    goto Label_069C;
                }
                this.mFullAccel = 1;
                num7 = num6;
                goto Label_06BC;
            Label_069C:
                num9 = 15f;
                num10 = Mathf.Clamp01(1f - (num8 / num9));
                num7 = num6 * num10;
            Label_06BC:
                if (num8 >= 1f)
                {
                    goto Label_06E1;
                }
                this.mController.get_transform().set_rotation(quaternion);
                this.mHasDesiredRotation = 0;
            Label_06E1:
                if (num7 <= 0f)
                {
                    goto Label_08A5;
                }
                if (flag2 == null)
                {
                    goto Label_08A5;
                }
                this.mController.StartRunning();
                num11 = Mathf.Lerp(&settings.Quest.MapRunSpeedMin, &settings.Quest.MapRunSpeedMax, num7);
                &vector12..ctor(&vector7.x, 0f, &vector7.y);
                vector8 = &vector12.get_normalized() * num11;
                if (this.mController.TriggerFieldAction(vector8, 0) == null)
                {
                    goto Label_07AF;
                }
                vector9 = this.mController.FieldActionPoint;
                this.mDestX = Mathf.FloorToInt(&vector9.x);
                this.mDestY = Mathf.FloorToInt(&vector9.y);
                this.mHasDesiredRotation = 0;
                this.mTargetSet = 0;
                this.mJumping = 1;
                this.mRouteSet = 1;
                goto Label_08A5;
            Label_07AF:
                vector += vector8 * Time.get_deltaTime();
                flag = 1;
                num13 = -1;
                goto Label_089D;
            Label_07CC:
                num14 = -1;
                goto Label_088F;
            Label_07D4:
                if (num14 != null)
                {
                    goto Label_07E7;
                }
                if (num13 != null)
                {
                    goto Label_07E7;
                }
                goto Label_0889;
            Label_07E7:
                num15 = Mathf.FloorToInt(&vector.x + (((float) num14) * 0.3f));
                num16 = Mathf.FloorToInt(&vector.z + (((float) num13) * 0.3f));
                if (this.IsGridBlocked((float) num15, (float) num16) != null)
                {
                    goto Label_082D;
                }
                goto Label_0889;
            Label_082D:
                if (num14 >= 0)
                {
                    goto Label_0844;
                }
                this.mController.AdjustMovePos(2, &vector);
            Label_0844:
                if (num14 <= 0)
                {
                    goto Label_085B;
                }
                this.mController.AdjustMovePos(0, &vector);
            Label_085B:
                if (num13 >= 0)
                {
                    goto Label_0872;
                }
                this.mController.AdjustMovePos(3, &vector);
            Label_0872:
                if (num13 <= 0)
                {
                    goto Label_0889;
                }
                this.mController.AdjustMovePos(1, &vector);
            Label_0889:
                num14 += 1;
            Label_088F:
                if (num14 <= 1)
                {
                    goto Label_07D4;
                }
                num13 += 1;
            Label_089D:
                if (num13 <= 1)
                {
                    goto Label_07CC;
                }
            Label_08A5:
                base.SceneOwner.SendInputMove(base.SceneOwner.Battle.CurrentUnit, this.mController);
            Label_08C6:
                vector10 = base.SceneOwner.CalcCoord(vector);
                map = base.SceneOwner.Battle.CurrentMap;
                &vector10.x = Math.Min(Math.Max(0, &vector10.x), map.Width - 1);
                &vector10.y = Math.Min(Math.Max(0, &vector10.y), map.Height - 1);
                if (&vector10.x != this.mCurrentX)
                {
                    goto Label_094E;
                }
                if (&vector10.y == this.mCurrentY)
                {
                    goto Label_096E;
                }
            Label_094E:
                this.mCurrentX = &vector10.x;
                this.mCurrentY = &vector10.y;
                this.RecalcAttackTargets();
            Label_096E:
                if (flag == null)
                {
                    goto Label_0997;
                }
                transform.set_position(vector);
                this.UpdateBlockMarker();
                this.mStopTime = 0f;
                this.HideShatei();
                goto Label_0A6E;
            Label_0997:
                this.mStopTime += Time.get_deltaTime();
                if (this.mStopTime <= 0.3f)
                {
                    goto Label_0A6E;
                }
                if (this.mUpdateShateiGrid != null)
                {
                    goto Label_09CF;
                }
                if (this.mShateiVisible != null)
                {
                    goto Label_0A6E;
                }
            Label_09CF:
                if (this.mGridSnapTime > 0f)
                {
                    goto Label_0A6E;
                }
                if (this.mController.isIdle == null)
                {
                    goto Label_0A6E;
                }
                this.mUpdateShateiGrid = 0;
                if (this.mShateiGrid == null)
                {
                    goto Label_0A2D;
                }
                base.SceneOwner.mTacticsSceneRoot.ShowGridLayer(1, this.mShateiGrid, &GameSettings.Instance.Colors.AttackArea, 1);
            Label_0A2D:
                this.mShateiVisible = 1;
                base.SceneOwner.ShowCastSkill();
                this.mController.Unit.RefleshMomentBuff(base.SceneOwner.Battle.Units, 1, &vector10.x, &vector10.y);
            Label_0A6E:
                this.SyncCameraPosition();
                return;
            }

            private unsafe void UpdateBlockMarker()
            {
                IntVector2 vector;
                Grid grid;
                vector = base.SceneOwner.CalcCoord(this.mController.CenterPosition);
                grid = base.SceneOwner.mBattle.CurrentMap[&vector.x, &vector.y];
                base.SceneOwner.mDisplayBlockedGridMarker = (grid == null) ? 1 : (base.SceneOwner.mBattle.CheckMove(this.mController.Unit, grid) == 0);
                return;
            }

            public override bool IsBusy
            {
                get
                {
                    return ((((this.mHasInput != null) || (this.mGridSnapping != null)) || (this.mGridSnapTime >= 0f)) ? 1 : this.mHasDesiredRotation);
                }
            }

            private Vector2 Velocity
            {
                get
                {
                    Camera camera;
                    VirtualStick2 stick;
                    Transform transform;
                    Vector3 vector;
                    Vector3 vector2;
                    Vector2 vector3;
                    camera = Camera.get_main();
                    stick = base.SceneOwner.mBattleUI.VirtualStick;
                    if ((((camera != null) == null) || ((stick != null) == null)) || (base.SceneOwner.IsControlBattleUI(0x100) == null))
                    {
                        goto Label_00E7;
                    }
                    transform = camera.get_transform();
                    vector = (base.SceneOwner.isUpView == null) ? transform.get_forward() : transform.get_up();
                    vector2 = transform.get_right();
                    &vector.y = 0f;
                    &vector.Normalize();
                    &vector2.y = 0f;
                    &vector2.Normalize();
                    vector3 = stick.Velocity;
                    return new Vector2((&vector2.x * &vector3.x) + (&vector.x * &vector3.y), (&vector2.z * &vector3.x) + (&vector.z * &vector3.y));
                Label_00E7:
                    return Vector2.get_zero();
                }
            }
        }
    }
}

