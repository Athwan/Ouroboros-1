// Decompiled with JetBrains decompiler
// Type: Quest_MoveUnit
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE644F5D-682F-4D6E-964D-A0DD77A288F7
// Assembly location: C:\Users\André\Desktop\Assembly-CSharp.dll

using System;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

[AddComponentMenu("UI/Drafts/Quest_MoveUnit")]
public class Quest_MoveUnit : UIDraft
{
  private Vector3 mVelocity = Vector3.get_zero();
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStick;
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStickBG;
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStickFG;
  [UIDraft.AutoGenerated]
  public RectTransform TouchArea;
  [UIDraft.AutoGenerated]
  public Button Btn_OK;
  [UIDraft.AutoGenerated]
  public Button Btn_Cancel;
  public Quest_MoveUnit.ButtonClickEvent OnClickOK;
  public Quest_MoveUnit.ButtonClickEvent OnClickCancel;
  [NonSerialized]
  public Transform CameraTransform;
  private bool mTouched;
  private Vector3 mTouchStart;
  private Vector3 mTouchPos;

  public Vector2 Velocity
  {
    get
    {
      if (!Object.op_Inequality((Object) this.CameraTransform, (Object) null))
        return Vector2.op_Implicit(this.mVelocity);
      Vector3 forward = this.CameraTransform.get_forward();
      Vector3 right = this.CameraTransform.get_right();
      forward.y = (__Null) 0.0;
      ((Vector3) @forward).Normalize();
      right.y = (__Null) 0.0;
      ((Vector3) @right).Normalize();
      return new Vector2((float) (right.x * this.mVelocity.x + forward.x * this.mVelocity.y), (float) (right.z * this.mVelocity.x + forward.z * this.mVelocity.y));
    }
  }

  private void OnEnable()
  {
    ((Component) this.VirtualStick).get_gameObject().SetActive(false);
  }

  private void Start()
  {
    UIEventListener uiEventListener = UIEventListener.Get((Component) this.TouchArea);
    uiEventListener.onPointerUp = (UIEventListener.PointerEvent) (eventData =>
    {
      UIUtility.ToggleWindowState((Component) this.VirtualStick, false);
      this.mTouched = false;
      this.mVelocity = Vector3.get_zero();
    });
    uiEventListener.onPointerDown = (UIEventListener.PointerEvent) (eventData =>
    {
      RaycastResult pointerCurrentRaycast = eventData.get_pointerCurrentRaycast();
      // ISSUE: explicit reference operation
      GameObject gameObject = ((RaycastResult) @pointerCurrentRaycast).get_gameObject();
      UIUtility.ToggleWindowState((Component) this.VirtualStick, true);
      Vector3 vector3 = gameObject.get_transform().InverseTransformPoint(Vector2.op_Implicit(eventData.get_position()));
      ((RectTransform) ((Component) this.VirtualStick).get_transform()).set_anchoredPosition(new Vector2((float) vector3.x, (float) vector3.y));
      this.mTouchStart = vector3;
      this.mTouchPos = vector3;
      this.mTouched = true;
      this.mVelocity = Vector3.get_zero();
    });
    uiEventListener.onDrag = (UIEventListener.PointerEvent) (eventData => this.mTouchPos = eventData.get_pointerPress().get_transform().InverseTransformPoint(Vector2.op_Implicit(eventData.get_position())));
    UIUtility.AddEventListener(((Component) this.Btn_OK).get_gameObject(), (UnityEvent) this.Btn_OK.get_onClick(), (UIUtility.EventListener) (go =>
    {
      if (this.OnClickOK == null)
        return;
      this.OnClickOK();
    }));
    UIUtility.AddEventListener(((Component) this.Btn_Cancel).get_gameObject(), (UnityEvent) this.Btn_Cancel.get_onClick(), (UIUtility.EventListener) (go =>
    {
      if (this.OnClickCancel == null)
        return;
      this.OnClickCancel();
    }));
  }

  private void Update()
  {
    if (!this.mTouched)
      return;
    Vector3 vector3 = Vector3.op_Subtraction(this.mTouchPos, this.mTouchStart);
    RectTransform transform = (RectTransform) ((Component) this.VirtualStickFG).get_transform();
    float num = (float) ((((RectTransform) ((Component) this.VirtualStickBG).get_transform()).get_sizeDelta().x - transform.get_sizeDelta().x) * 0.5);
    // ISSUE: explicit reference operation
    if ((double) ((Vector3) @vector3).get_magnitude() >= (double) num)
    {
      // ISSUE: explicit reference operation
      vector3 = Vector3.op_Multiply(((Vector3) @vector3).get_normalized(), num);
    }
    transform.set_anchoredPosition(Vector2.op_Implicit(vector3));
    this.mVelocity = Vector3.op_Multiply(vector3, 1f / num);
  }

  public void ShowButtons(bool show)
  {
    ((Component) this.Btn_OK).get_gameObject().SetActive(show);
    ((Component) this.Btn_Cancel).get_gameObject().SetActive(show);
  }

  public delegate void ButtonClickEvent();
}
