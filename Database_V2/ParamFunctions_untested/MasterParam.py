def MasterParam(json):
    this={}#MasterParamjson)
    #if(this.Loaded)
    #returntrue
    #DebugUtility.Verify((object)json,typeof(JSON_MasterParam))
    #this.mLocalNotificationParam=(LocalNotificationParam)null
    #this.mFixParam.Deserialize(json.Fix[0])
    #if(json.Unit!=null)
        #if(this.mUnitParam==null)
        if 'Unit' in json:
            this['mUnitParam'] = newList<UnitParam>
        #if(this.mUnitDictionary==null)
        if 'Unit' in json:
            this['mUnitDictionary'] = newDictionary<string,UnitParam>
        #for(intindex=0index<json.Unit.Length++index)
            #JSON_UnitParamdata=json.Unit
            #UnitParamunitParam=this.mUnitParam.Find((Predicate<UnitParam>)(p=>p.iname==data.iname))
            #if(unitParam==null)
                #unitParam=newUnitParam()
                #this.mUnitParam.Add(unitParam)
            #unitParam.Deserialize(data)
            #if(this.mUnitDictionary.ContainsKey(data.iname))
            #thrownewException("重複エラー：Unit["+data.iname+"]")
            #this.mUnitDictionary.Add(data.iname,unitParam)
    #if(json.UnitJobOverwrite!=null)
        #if(this.mUnitJobOverwriteParam==null)
        #this.mUnitJobOverwriteParam=newList<UnitJobOverwriteParam>()
        #if(this.mUnitJobOverwriteDictionary==null)
        #this.mUnitJobOverwriteDictionary=newDictionary<string,Dictionary<string,UnitJobOverwriteParam>>()
        #foreach(JSON_UnitJobOverwriteParamjson1injson.UnitJobOverwrite)
            #UnitJobOverwriteParamjobOverwriteParam=newUnitJobOverwriteParam()
            #this.mUnitJobOverwriteParam.Add(jobOverwriteParam)
            #jobOverwriteParam.Deserialize(json1)
            #Dictionary<string,UnitJobOverwriteParam>dictionary
            #this.mUnitJobOverwriteDictionary.TryGetValue(json1.unit_iname,outdictionary)
            #if(dictionary==null)
                #dictionary=newDictionary<string,UnitJobOverwriteParam>()
                #this.mUnitJobOverwriteDictionary.Add(json1.unit_iname,dictionary)
            #if(!dictionary.ContainsKey(json1.job_iname))
            #dictionary.Add(json1.job_iname,jobOverwriteParam)
    #if(json.Skill!=null)
        #if(this.mSkillParam==null)
        if 'Skill' in json:
            this['mSkillParam'] = newList<SkillParam>
        #if(this.mSkillDictionary==null)
        if 'Skill' in json:
            this['mSkillDictionary'] = newDictionary<string,SkillParam>
        #for(intindex=0index<json.Skill.Length++index)
            #JSON_SkillParamdata=json.Skill
            #SkillParamskillParam=this.mSkillParam.Find((Predicate<SkillParam>)(p=>p.iname==data.iname))
            #if(skillParam==null)
                #skillParam=newSkillParam()
                #this.mSkillParam.Add(skillParam)
            #skillParam.Deserialize(data)
            #if(this.mSkillDictionary.ContainsKey(data.iname))
            #thrownewException("重複エラー：Skill["+data.iname+"]")
            #this.mSkillDictionary.Add(data.iname,skillParam)
        #SkillParam.UpdateReplaceSkill(this.mSkillParam)
    #if(json.Buff!=null)
        #if(this.mBuffEffectParam==null)
        if 'Buff' in json:
            this['mBuffEffectParam'] = newList<BuffEffectParam>
        #for(intindex=0index<json.Buff.Length++index)
            #JSON_BuffEffectParamdata=json.Buff
            #BuffEffectParambuffEffectParam=this.mBuffEffectParam.Find((Predicate<BuffEffectParam>)(p=>p.iname==data.iname))
            #if(buffEffectParam==null)
                #buffEffectParam=newBuffEffectParam()
                #this.mBuffEffectParam.Add(buffEffectParam)
            #buffEffectParam.Deserialize(data)
    #if(json.Cond!=null)
        #if(this.mCondEffectParam==null)
        if 'Cond' in json:
            this['mCondEffectParam'] = newList<CondEffectParam>
        #for(intindex=0index<json.Cond.Length++index)
            #JSON_CondEffectParamdata=json.Cond
            #CondEffectParamcondEffectParam=this.mCondEffectParam.Find((Predicate<CondEffectParam>)(p=>p.iname==data.iname))
            #if(condEffectParam==null)
                #condEffectParam=newCondEffectParam()
                #this.mCondEffectParam.Add(condEffectParam)
            #condEffectParam.Deserialize(data)
    #if(json.Ability!=null)
        #if(this.mAbilityParam==null)
        if 'Ability' in json:
            this['mAbilityParam'] = newList<AbilityParam>
        #if(this.mAbilityDictionary==null)
        if 'Ability' in json:
            this['mAbilityDictionary'] = newDictionary<string,AbilityParam>
        #for(intindex=0index<json.Ability.Length++index)
            #JSON_AbilityParamdata=json.Ability
            #AbilityParamabilityParam=this.mAbilityParam.Find((Predicate<AbilityParam>)(p=>p.iname==data.iname))
            #if(abilityParam==null)
                #abilityParam=newAbilityParam()
                #this.mAbilityParam.Add(abilityParam)
            #abilityParam.Deserialize(data)
            #if(this.mAbilityDictionary.ContainsKey(data.iname))
            #thrownewException("重複エラー：Ability["+data.iname+"]")
            #this.mAbilityDictionary.Add(data.iname,abilityParam)
    #if(json.Item!=null)
        #if(this.mItemParam==null)
        if 'Item' in json:
            this['mItemParam'] = newList<ItemParam>
        #if(this.mItemDictionary==null)
        if 'Item' in json:
            this['mItemDictionary'] = newDictionary<string,ItemParam>
        #for(intindex=0index<json.Item.Length++index)
            #JSON_ItemParamdata=json.Item
            #ItemParamitemParam=this.mItemParam.Find((Predicate<ItemParam>)(p=>p.iname==data.iname))
            #if(itemParam==null)
                #itemParam=newItemParam()
                #this.mItemParam.Add(itemParam)
            #itemParam.Deserialize(data)
            #itemParam.no=index+1
            #if(this.mItemDictionary.ContainsKey(data.iname))
            #thrownewException("重複エラー：Item["+data.iname+"]")
            #this.mItemDictionary.Add(data.iname,itemParam)
        #this.AddUnitToItem()
    #if(json.Artifact!=null)
        #if(this.mArtifactParam==null)
        if 'Artifact' in json:
            this['mArtifactParam'] = newList<ArtifactParam>
        #if(this.mArtifactDictionary==null)
        if 'Artifact' in json:
            this['mArtifactDictionary'] = newDictionary<string,ArtifactParam>
        #for(intindex=0index<json.Artifact.Length++index)
            #JSON_ArtifactParamdata=json.Artifact
            #if(data.iname!=null)
                #ArtifactParamartifactParam=this.mArtifactParam.Find((Predicate<ArtifactParam>)(p=>p.iname==data.iname))
                #if(artifactParam==null)
                    #artifactParam=newArtifactParam()
                    #this.mArtifactParam.Add(artifactParam)
                #artifactParam.Deserialize(data)
                #if(this.mArtifactDictionary.ContainsKey(data.iname))
                #thrownewException("重複エラー：Artifact["+data.iname+"]")
                #this.mArtifactDictionary.Add(data.iname,artifactParam)
    #if(json.Weapon!=null)
        #if(this.mWeaponParam==null)
        if 'Weapon' in json:
            this['mWeaponParam'] = newList<WeaponParam>
        #for(intindex=0index<json.Weapon.Length++index)
            #JSON_WeaponParamdata=json.Weapon
            #WeaponParamweaponParam=this.mWeaponParam.Find((Predicate<WeaponParam>)(p=>p.iname==data.iname))
            #if(weaponParam==null)
                #weaponParam=newWeaponParam()
                #this.mWeaponParam.Add(weaponParam)
            #weaponParam.Deserialize(data)
    #if(json.Recipe!=null)
        #if(this.mRecipeParam==null)
        if 'Recipe' in json:
            this['mRecipeParam'] = newList<RecipeParam>
        #for(intindex=0index<json.Recipe.Length++index)
            #JSON_RecipeParamjson1=json.Recipe
            #RecipeParamrecipeParam=newRecipeParam()
            #this.mRecipeParam.Add(recipeParam)
            #recipeParam.Deserialize(json1)
    #if(json.Job!=null)
        #if(this.mJobParam==null)
        if 'Job' in json:
            this['mJobParam'] = newList<JobParam>
        #for(intindex=0index<json.Job.Length++index)
            #JSON_JobParamdata=json.Job
            #JobParamjobParam=this.mJobParam.Find((Predicate<JobParam>)(p=>p.iname==data.iname))
            #if(jobParam==null)
                #jobParam=newJobParam()
                #this.mJobParam.Add(jobParam)
                #this.mJobParamDict[data.iname]=jobParam
            #jobParam.Deserialize(data,this)
    #if(json.JobSet!=null)
        #if(this.mJobSetParam==null)
        if 'JobSet' in json:
            this['mJobSetParam'] = newList<JobSetParam>
        #if(this.mJobsetDictionary==null)
        if 'Unit' in json:
            this['mJobsetDictionary'] = newDictionary<string,List<JobSetParam>>
        #for(intindex=0index<json.JobSet.Length++index)
            #JSON_JobSetParamdata=json.JobSet
            #JobSetParamjobSetParam=this.mJobSetParam.Find((Predicate<JobSetParam>)(p=>p.iname==data.iname))
            #if(jobSetParam==null)
                #jobSetParam=newJobSetParam()
                #this.mJobSetParam.Add(jobSetParam)
            #jobSetParam.Deserialize(data)
            #if(!string.IsNullOrEmpty(jobSetParam.target_unit))
                #List<JobSetParam>jobSetParamList
                #if(this.mJobsetDictionary.ContainsKey(jobSetParam.target_unit))
                    #jobSetParamList=this.mJobsetDictionary[jobSetParam.target_unit]
                #else
                    #jobSetParamList=newList<JobSetParam>(3)
                    #this.mJobsetDictionary.Add(jobSetParam.target_unit,jobSetParamList)
                #jobSetParamList.Add(jobSetParam)
    #if(json.Grow!=null)
        #if(this.mGrowParam==null)
        if 'Grow' in json:
            this['mGrowParam'] = newList<GrowParam>
        #for(intindex=0index<json.Grow.Length++index)
            #JSON_GrowParamdata=json.Grow
            #GrowParamgrowParam=this.mGrowParam.Find((Predicate<GrowParam>)(p=>p.type==data.type))
            #if(growParam==null)
                #growParam=newGrowParam()
                #this.mGrowParam.Add(growParam)
            #growParam.Deserialize(data)
    #if(json.AI!=null)
        #if(this.mAIParam==null)
        if 'AI' in json:
            this['mAIParam'] = newList<AIParam>
        #for(intindex=0index<json.AI.Length++index)
            #JSON_AIParamdata=json.AI
            #AIParamaiParam=this.mAIParam.Find((Predicate<AIParam>)(p=>p.iname==data.iname))
            #if(aiParam==null)
                #aiParam=newAIParam()
                #this.mAIParam.Add(aiParam)
            #aiParam.Deserialize(data)
    #if(json.Geo!=null)
        #if(this.mGeoParam==null)
        if 'Geo' in json:
            this['mGeoParam'] = newList<GeoParam>
        #for(intindex=0index<json.Geo.Length++index)
            #JSON_GeoParamdata=json.Geo
            #GeoParamgeoParam=this.mGeoParam.Find((Predicate<GeoParam>)(p=>p.iname==data.iname))
            #if(geoParam==null)
                #geoParam=newGeoParam()
                #this.mGeoParam.Add(geoParam)
            #geoParam.Deserialize(data)
    #if(json.Rarity!=null)
        #if(this.mRarityParam==null)
        if 'Rarity' in json:
            this['mRarityParam'] = newList<RarityParam>
        #for(intindex=0index<json.Rarity.Length++index)
            #RarityParamrarityParam
            #if(this.mRarityParam.Count>index)
                #rarityParam=this.mRarityParam
            #else
                #rarityParam=newRarityParam()
                #this.mRarityParam.Add(rarityParam)
            #rarityParam.Deserialize(json.Rarity)
    #if(json.Shop!=null)
        #if(this.mShopParam==null)
        if 'Shop' in json:
            this['mShopParam'] = newList<ShopParam>
        #for(intindex=0index<json.Shop.Length++index)
            #ShopParamshopParam
            #if(this.mShopParam.Count>index)
                #shopParam=this.mShopParam
            #else
                #shopParam=newShopParam()
                #this.mShopParam.Add(shopParam)
            #shopParam.Deserialize(json.Shop)
    #if(json.Player!=null)
        if 'Player' in json:
            this['mPlayerParamTbl'] = newPlayerParam[json['Player'].Length]
        #for(intindex=0index<json.Player.Length++index)
            #JSON_PlayerParamjson1=json.Player
            #this.mPlayerParamTbl=newPlayerParam()
            #this.mPlayerParamTbl.Deserialize(json1)
    #if(json.PlayerLvTbl!=null)
        #for(intindex=0index<json.PlayerLvTbl.Length++index)
        if 'PlayerLvTbl' in json:
            this['mPlayerExpTbl'] = json['PlayerLvTbl']
    #if(json.UnitLvTbl!=null)
        #for(intindex=0index<json.UnitLvTbl.Length++index)
        if 'UnitLvTbl' in json:
            this['mUnitExpTbl'] = json['UnitLvTbl']
    #if(json.ArtifactLvTbl!=null)
        #for(intindex=0index<json.ArtifactLvTbl.Length++index)
        if 'ArtifactLvTbl' in json:
            this['mArtifactExpTbl'] = json['ArtifactLvTbl']
    #if(json.AbilityRank!=null)
        #for(intindex=0index<json.AbilityRank.Length++index)
        if 'AbilityRank' in json:
            this['mAbilityExpTbl'] = json['AbilityRank']
    #if(json.AwakePieceTbl!=null)
        #for(intindex=0index<json.AwakePieceTbl.Length++index)
        if 'AwakePieceTbl' in json:
            this['mAwakePieceTbl'] = json['AwakePieceTbl']
    #this.mLocalNotificationParam=newLocalNotificationParam()
    #if(json.LocalNotification!=null)
        this['']
        this['mLocalNotificationParam']
        if 'LocalNotification' in json:
            this['mLocalNotificationParam']['msg_stamina'] = json['LocalNotification'][0].msg_stamina
        this['mLocalNotificationParam']
        if 'LocalNotification' in json:
            this['mLocalNotificationParam']['iOSAct_stamina'] = json['LocalNotification'][0].iOSAct_stamina
        this['mLocalNotificationParam']
        if 'LocalNotification' in json:
            this['mLocalNotificationParam']['limitSec_stamina'] = json['LocalNotification'][0].limitSec_stamina
    #Dictionary<int,TrophyCategoryParam>dictionary1=newDictionary<int,TrophyCategoryParam>()
    #if(json.TrophyCategory!=null)
        #List<TrophyCategoryParam>trophyCategoryParamList=newList<TrophyCategoryParam>(json.TrophyCategory.Length)
        #for(intindex=0index<json.TrophyCategory.Length++index)
            #TrophyCategoryParamtrophyCategoryParam=newTrophyCategoryParam()
            #if(trophyCategoryParam.Deserialize(json.TrophyCategory))
                #trophyCategoryParamList.Add(trophyCategoryParam)
                #if(!dictionary1.ContainsKey(trophyCategoryParam.hash_code))
                #dictionary1.Add(trophyCategoryParam.hash_code,trophyCategoryParam)
        #this.mTrophyCategory=trophyCategoryParamList.ToArray()
    #if(json.Trophy!=null)
        #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Trophy.Length)
        #for(intindex=0index<json.Trophy.Length++index)
            #TrophyParamtrophyParam=newTrophyParam()
            #if(trophyParam.Deserialize(json.Trophy))
                #if(dictionary1.ContainsKey(trophyParam.category_hash_code))
                #trophyParam.CategoryParam=dictionary1[trophyParam.category_hash_code]
                #else
                #DebugUtility.LogError(trophyParam.iname+"=>親カテゴリが未設定or入力ミス")
                #if(trophyParam.IsPlanningToUse())
                #trophyParamList.Add(trophyParam)
        #this.mTrophy=trophyParamList.ToArray()
        #this.mTrophyInameDict=newDictionary<string,TrophyParam>()
        #foreach(TrophyParamtrophyParaminthis.mTrophy)
        #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)
    #Dictionary<string,ChallengeCategoryParam>dictionary2=newDictionary<string,ChallengeCategoryParam>()
    #if(json.ChallengeCategory!=null)
        #List<ChallengeCategoryParam>challengeCategoryParamList=newList<ChallengeCategoryParam>(json.ChallengeCategory.Length)
        #for(intindex=0index<json.ChallengeCategory.Length++index)
            #ChallengeCategoryParamchallengeCategoryParam=newChallengeCategoryParam()
            #if(challengeCategoryParam.Deserialize(json.ChallengeCategory))
                #dictionary2[challengeCategoryParam.iname]=challengeCategoryParam
                #challengeCategoryParamList.Add(challengeCategoryParam)
        #this.mChallengeCategory=challengeCategoryParamList.ToArray()
    #if(json.Challenge!=null)
        #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Challenge.Length)
        #for(intindex=0index<json.Challenge.Length++index)
            #TrophyParamtrophyParam=newTrophyParam()
            #if(trophyParam.Deserialize(json.Challenge))
                #if(dictionary2.ContainsKey(trophyParam.Category))
                #trophyParam.ChallengeCategoryParam=dictionary2[trophyParam.Category]
                #trophyParam.Challenge=1
                #trophyParamList.Add(trophyParam)
        #this.mChallenge=trophyParamList.ToArray()
        #intlength=this.mTrophy.Length
        #Array.Resize<TrophyParam>(refthis.mTrophy,length+this.mChallenge.Length)
        #Array.Copy((Array)this.mChallenge,0,(Array)this.mTrophy,length,this.mChallenge.Length)
        #foreach(TrophyParamtrophyParaminthis.mChallenge)
        #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)
    #this.CreateTrophyDict()
    #if(json.Unlock!=null)
        #List<UnlockParam>unlockParamList=newList<UnlockParam>(json.Unlock.Length)
        #for(intindex=0index<json.Unlock.Length++index)
            #UnlockParamunlockParam=newUnlockParam()
            #if(unlockParam.Deserialize(json.Unlock))
            #unlockParamList.Add(unlockParam)
        #this.mUnlock=unlockParamList.ToArray()
    #if(json.Vip!=null)
        #List<VipParam>vipParamList=newList<VipParam>(json.Vip.Length)
        #for(intindex=0index<json.Vip.Length++index)
            #VipParamvipParam=newVipParam()
            #if(vipParam.Deserialize(json.Vip))
            #vipParamList.Add(vipParam)
        #this.mVip=vipParamList.ToArray()
    #if(json.Mov!=null)
        if 'Mov' in json:
            this['mStreamingMovies'] = newJSON_StreamingMovie[json['Mov'].Length]
        #for(intindex=0index<json.Mov.Length++index)
            #this.mStreamingMovies=newJSON_StreamingMovie()
            this['']
            this['mStreamingMovies']
            if 'Mov' in json:
                this['mStreamingMovies']['alias'] = json['Mov'].alias
            this['mStreamingMovies']
            if 'Mov' in json:
                this['mStreamingMovies']['path'] = json['Mov'].path
    #if(json.Banner!=null)
        #List<BannerParam>bannerParamList=newList<BannerParam>(json.Banner.Length)
        #for(intindex=0index<json.Banner.Length++index)
            #BannerParambannerParam=newBannerParam()
            #if(bannerParam.Deserialize(json.Banner))
            #bannerParamList.Add(bannerParam)
        #this.mBanner=bannerParamList.ToArray()
    #if(json.QuestClearUnlockUnitData!=null)
        #List<QuestClearUnlockUnitDataParam>unlockUnitDataParamList=newList<QuestClearUnlockUnitDataParam>(json.QuestClearUnlockUnitData.Length)
        #for(intindex=0index<json.QuestClearUnlockUnitData.Length++index)
            #QuestClearUnlockUnitDataParamunlockUnitDataParam=newQuestClearUnlockUnitDataParam()
            #unlockUnitDataParam.Deserialize(json.QuestClearUnlockUnitData)
            #unlockUnitDataParamList.Add(unlockUnitDataParam)
        #this.mUnlockUnitDataParam=unlockUnitDataParamList
    #if(json.Award!=null)
        #if(this.mAwardParam==null)
        if 'Award' in json:
            this['mAwardParam'] = newList<AwardParam>
        #if(this.mAwardDictionary==null)
        if 'Award' in json:
            this['mAwardDictionary'] = newDictionary<string,AwardParam>
        #for(intindex=0index<json.Award.Length++index)
            #JSON_AwardParamdata=json.Award
            #if(data.iname!=null)
                #AwardParamawardParam=this.mAwardParam.Find((Predicate<AwardParam>)(p=>p.iname==data.iname))
                #if(awardParam==null)
                    #awardParam=newAwardParam()
                    #this.mAwardParam.Add(awardParam)
                #awardParam.Deserialize(data)
                #if(this.mAwardDictionary.ContainsKey(awardParam.iname))
                #thrownewException("Overlap:Award["+awardParam.iname+"]")
                #this.mAwardDictionary.Add(awardParam.iname,awardParam)
    #if(json.LoginInfo!=null)
        #List<LoginInfoParam>loginInfoParamList=newList<LoginInfoParam>(json.LoginInfo.Length)
        #for(intindex=0index<json.LoginInfo.Length++index)
            #LoginInfoParamloginInfoParam=newLoginInfoParam()
            #if(loginInfoParam.Deserialize(json.LoginInfo))
            #loginInfoParamList.Add(loginInfoParam)
        #this.mLoginInfoParam=loginInfoParamList.ToArray()
    #if(json.CollaboSkill!=null)
        #List<CollaboSkillParam>collaboSkillParamList=newList<CollaboSkillParam>(json.CollaboSkill.Length)
        #for(intindex=0index<json.CollaboSkill.Length++index)
            #CollaboSkillParamcollaboSkillParam=newCollaboSkillParam()
            #collaboSkillParam.Deserialize(json.CollaboSkill)
            #collaboSkillParamList.Add(collaboSkillParam)
        #this.mCollaboSkillParam=collaboSkillParamList
        #CollaboSkillParam.UpdateCollaboSkill(this.mCollaboSkillParam)
    #if(json.Trick!=null)
        #List<TrickParam>trickParamList=newList<TrickParam>(json.Trick.Length)
        #for(intindex=0index<json.Trick.Length++index)
            #TrickParamtrickParam=newTrickParam()
            #trickParam.Deserialize(json.Trick)
            #trickParamList.Add(trickParam)
        #this.mTrickParam=trickParamList
    #if(json.BreakObj!=null)
        #List<BreakObjParam>breakObjParamList=newList<BreakObjParam>(json.BreakObj.Length)
        #for(intindex=0index<json.BreakObj.Length++index)
            #BreakObjParambreakObjParam=newBreakObjParam()
            #breakObjParam.Deserialize(json.BreakObj)
            #breakObjParamList.Add(breakObjParam)
        #this.mBreakObjParam=breakObjParamList
    #if(json.VersusMatchKey!=null)
        if 'VersusMatchKey' in json:
            this['mVersusMatching'] = newList<VersusMatchingParam>
        #for(intindex=0index<json.VersusMatchKey.Length++index)
            #VersusMatchingParamversusMatchingParam=newVersusMatchingParam()
            #versusMatchingParam.Deserialize(json.VersusMatchKey)
            #this.mVersusMatching.Add(versusMatchingParam)
    #if(json.VersusMatchCond!=null)
        if 'VersusMatchCond' in json:
            this['mVersusMatchCond'] = newList<VersusMatchCondParam>
        #for(intindex=0index<json.VersusMatchCond.Length++index)
            #VersusMatchCondParamversusMatchCondParam=newVersusMatchCondParam()
            #versusMatchCondParam.Deserialize(json.VersusMatchCond)
            #this.mVersusMatchCond.Add(versusMatchCondParam)
    #if(json.TowerScore!=null)
        if 'TowerScore' in json:
            this['mTowerScores'] = newDictionary<string,TowerScoreParam>
        #for(intindex1=0index1<json.TowerScore.Length++index1)
            #JSON_TowerScorejsonTowerScore=json.TowerScore[index1]
            #intlength=jsonTowerScore.threshold_vals.Length
            #TowerScoreParamtowerScoreParamArray=newTowerScoreParam[length]
            #for(intindex2=0index2<length++index2)
                #JSON_TowerScoreThresholdthresholdVal=jsonTowerScore.threshold_vals[index2]
                #towerScoreParamArray[index2]=newTowerScoreParam()
                #towerScoreParamArray[index2].Deserialize(thresholdVal)
            #this.mTowerScores.Add(jsonTowerScore.iname,towerScoreParamArray)
    #if(json.TowerRank!=null)
        #for(intindex=0index<json.TowerRank.Length++index)
        if 'TowerRank' in json:
            this['mTowerRankTbl'] = json['TowerRank']
    #if(json.MultilimitUnitLv!=null)
        #for(intindex=0index<json.MultilimitUnitLv.Length++index)
        if 'MultilimitUnitLv' in json:
            this['mMultiLimitUnitLv'] = json['MultilimitUnitLv']
    #if(json.FriendPresentItem!=null)
        #this.mFriendPresentItemParam=newDictionary<string,FriendPresentItemParam>()
        #for(intindex=0index<json.FriendPresentItem.Length++index)
            #FriendPresentItemParampresentItemParam=newFriendPresentItemParam()
            #presentItemParam.Deserialize(json.FriendPresentItem,this)
            #this.mFriendPresentItemParam.Add(presentItemParam.iname,presentItemParam)
    #if(json.Weather!=null)
        #List<WeatherParam>weatherParamList=newList<WeatherParam>(json.Weather.Length)
        #for(intindex=0index<json.Weather.Length++index)
            #WeatherParamweatherParam=newWeatherParam()
            #weatherParam.Deserialize(json.Weather)
            #weatherParamList.Add(weatherParam)
        #this.mWeatherParam=weatherParamList
    #if(json.UnitUnlockTime!=null)
        #this.mUnitUnlockTimeParam=newDictionary<string,UnitUnlockTimeParam>()
        #for(intindex=0index<json.UnitUnlockTime.Length++index)
            #UnitUnlockTimeParamunitUnlockTimeParam=newUnitUnlockTimeParam()
            #unitUnlockTimeParam.Deserialize(json.UnitUnlockTime)
            #this.mUnitUnlockTimeParam.Add(unitUnlockTimeParam.iname,unitUnlockTimeParam)
    #if(json.Tobira!=null)
        #for(intindex=0index<json.Tobira.Length++index)
            #TobiraParamtobiraParam=newTobiraParam()
            #tobiraParam.Deserialize(json.Tobira)
            #this.mTobiraParam.Add(tobiraParam)
    #if(json.TobiraCategories!=null)
        #for(intindex=0index<json.TobiraCategories.Length++index)
            #TobiraCategoriesParamtobiraCategoriesParam=newTobiraCategoriesParam()
            #tobiraCategoriesParam.Deserialize(json.TobiraCategories)
            #this.mTobiraCategoriesParam.Add(tobiraCategoriesParam.TobiraCategory,tobiraCategoriesParam)
    #if(json.TobiraConds!=null)
        #for(intindex=0index<json.TobiraConds.Length++index)
            #TobiraCondsParamtobiraCondsParam=newTobiraCondsParam()
            #tobiraCondsParam.Deserialize(json.TobiraConds)
            #this.mTobiraCondParam.Add(tobiraCondsParam)
    #if(json.TobiraCondsUnit!=null)
        #for(intindex=0index<json.TobiraCondsUnit.Length++index)
            #TobiraCondsUnitParamtobiraCondsUnitParam=newTobiraCondsUnitParam()
            #tobiraCondsUnitParam.Deserialize(json.TobiraCondsUnit)
            #this.mTobiraCondUnitParam.Add(tobiraCondsUnitParam.Id,tobiraCondsUnitParam)
    #if(json.TobiraRecipe!=null)
        #for(intindex=0index<json.TobiraRecipe.Length++index)
            #TobiraRecipeParamtobiraRecipeParam=newTobiraRecipeParam()
            #tobiraRecipeParam.Deserialize(json.TobiraRecipe)
            #this.mTobiraRecipeParam.Add(tobiraRecipeParam)
    #if(json.ConceptCard!=null)
        #this.mConceptCard=newDictionary<string,ConceptCardParam>()
        #for(intindex=0index<json.ConceptCard.Length++index)
            #ConceptCardParamconceptCardParam=newConceptCardParam()
            #conceptCardParam.Deserialize(json.ConceptCard,this)
            #this.mConceptCard.Add(conceptCardParam.iname,conceptCardParam)
    #intnumArray=newint[6]
        #json.ConceptCardLvTbl1,
        #json.ConceptCardLvTbl2,
        #json.ConceptCardLvTbl3,
        #json.ConceptCardLvTbl4,
        #json.ConceptCardLvTbl5,
        #json.ConceptCardLvTbl6
        #}
        #if(0<numArray.Length&&0<numArray[0].Length)
            #this.mConceptCardLvTbl=newOInt[numArray.Length,numArray[0].Length]
            #for(intindex1=0index1<numArray.Length++index1)
                #for(intindex2=0index2<numArray[index1].Length++index2)
                #this.mConceptCardLvTbl[index1,index2]=(OInt)numArray[index1][index2]
        #if(json.ConceptCardConditions!=null)
            #this.mConceptCardConditions=newDictionary<string,ConceptCardConditionsParam>()
            #for(intindex=0index<json.ConceptCardConditions.Length++index)
                #ConceptCardConditionsParamcardConditionsParam=newConceptCardConditionsParam()
                #cardConditionsParam.Deserialize(json.ConceptCardConditions)
                #this.mConceptCardConditions.Add(cardConditionsParam.iname,cardConditionsParam)
        #if(json.ConceptCardTrustReward!=null)
            #this.mConceptCardTrustReward=newDictionary<string,ConceptCardTrustRewardParam>()
            #for(intindex=0index<json.ConceptCardTrustReward.Length++index)
                #ConceptCardTrustRewardParamtrustRewardParam=newConceptCardTrustRewardParam()
                #trustRewardParam.Deserialize(json.ConceptCardTrustReward)
                #this.mConceptCardTrustReward.Add(trustRewardParam.iname,trustRewardParam)
        #if(json.UnitGroup!=null)
            #this.mUnitGroup=newDictionary<string,UnitGroupParam>()
            #for(intindex=0index<json.UnitGroup.Length++index)
                #UnitGroupParamunitGroupParam=newUnitGroupParam()
                #unitGroupParam.Deserialize(json.UnitGroup)
                #this.mUnitGroup.Add(unitGroupParam.iname,unitGroupParam)
        #if(json.JobGroup!=null)
            #this.mJobGroup=newDictionary<string,JobGroupParam>()
            #for(intindex=0index<json.JobGroup.Length++index)
                #JobGroupParamjobGroupParam=newJobGroupParam()
                #jobGroupParam.Deserialize(json.JobGroup)
                #this.mJobGroup.Add(jobGroupParam.iname,jobGroupParam)
        #if(json.StatusCoefficient!=null&&json.StatusCoefficient.Length>0)
            #this.mStatusCoefficient=newStatusCoefficientParam()
            #this.mStatusCoefficient.Deserialize(json.StatusCoefficient[0])
        #if(json.CustomTarget!=null)
            #this.mCustomTarget=newDictionary<string,CustomTargetParam>()
            #for(intindex=0index<json.CustomTarget.Length++index)
                #CustomTargetParamcustomTargetParam=newCustomTargetParam()
                #customTargetParam.Deserialize(json.CustomTarget)
                #this.mCustomTarget.Add(customTargetParam.iname,customTargetParam)
        #if(json.SkillAbilityDerive!=null&&json.SkillAbilityDerive.Length>0)
            if 'SkillAbilityDerive' in json:
                this['mSkillAbilityDeriveParam'] = newSkillAbilityDeriveParam[json['SkillAbilityDerive'].Length]
            #for(intindex=0index<json.SkillAbilityDerive.Length++index)
                #this.mSkillAbilityDeriveParam=newSkillAbilityDeriveParam(index)
                #this.mSkillAbilityDeriveParam.Deserialize(json.SkillAbilityDerive,this)
            #for(intindex=0index<this.mSkillAbilityDeriveParam.Length++index)
                #SkillAbilityDeriveDataabilityDeriveData=newSkillAbilityDeriveData()
                #List<SkillAbilityDeriveParam>abilityDeriveParam=this.FindAditionalSkillAbilityDeriveParam(this.mSkillAbilityDeriveParam)
                #abilityDeriveData.Setup(this.mSkillAbilityDeriveParam,abilityDeriveParam)
                #this.mSkillAbilityDerives.Add(abilityDeriveData)
        #if(json.Tips!=null&&json.Tips.Length>0)
            if 'Tips' in json:
                this['mTipsParam'] = newTipsParam[json['Tips'].Length]
            #for(intindex=0index<json.Tips.Length++index)
                #this.mTipsParam=newTipsParam()
                #this.mTipsParam.Deserialize(json.Tips)
        #this.Loaded=true
        #returntrue
    #
    #publicvoidCacheReferences()
        #for(intindex=0index<this.mUnitParam.Count++index)
            #if(this.mUnitParam!=null)
            #this.mUnitParam.CacheReferences(this)
    #
    #publicvoidDumpLoadedLog()
    #
    #publicUnitParamGetAllUnits()
        #if(this.mUnitParam!=null)
        #returnthis.mUnitParam.ToArray()
        #returnnewUnitParam[0]
    #
    #publicboolContainsUnitID(stringkey)
        #returnthis.mUnitDictionary.ContainsKey(key)
    #
    #publicUnitParamGetUnitParam(stringkey)
        #try
            #returnthis.mUnitDictionary[key]
        #catch(Exceptionex)
            #thrownewKeyNotFoundException<UnitParam>(key)
    #
    #publicDictionary<string,UnitJobOverwriteParam>GetUnitJobOverwriteParamsForUnit(stringunit_iname)
        #if(string.IsNullOrEmpty(unit_iname))
            #DebugUtility.LogError("UnknownUnitJobOverwriteParam\""+unit_iname+"\"")
            #return(Dictionary<string,UnitJobOverwriteParam>)null
        #Dictionary<string,UnitJobOverwriteParam>dictionary
        #this.mUnitJobOverwriteDictionary.TryGetValue(unit_iname,outdictionary)
        #returndictionary
    #
    #publicSkillParamGetSkillParam(stringkey)
        #try
            #returnthis.mSkillDictionary[key]
        #catch(Exceptionex)
            #thrownewKeyNotFoundException<SkillParam>(key)
    #
    #publicBuffEffectParamGetBuffEffectParam(stringkey)
        #if(string.IsNullOrEmpty(key))
        #return(BuffEffectParam)null
        #using(List<BuffEffectParam>.Enumeratorenumerator=this.mBuffEffectParam.GetEnumerator())
            #while(enumerator.MoveNext())
                #BuffEffectParamcurrent=enumerator.Current
                #if(current.iname==key)
                #returncurrent
        #DebugUtility.LogError("UnknownBuffEffectParam\""+key+"\"")
        #return(BuffEffectParam)null
    #
    #publicCondEffectParamGetCondEffectParam(stringkey)
        #if(string.IsNullOrEmpty(key))
        #return(CondEffectParam)null
        #using(List<CondEffectParam>.Enumeratorenumerator=this.mCondEffectParam.GetEnumerator())
            #while(enumerator.MoveNext())
                #CondEffectParamcurrent=enumerator.Current
                #if(current.iname==key)
                #returncurrent
        #DebugUtility.LogError("UnknownCondEffectParam\""+key+"\"")
        #return(CondEffectParam)null
    #
    #publicAbilityParamGetAbilityParam(stringkey)
        #try
            #returnthis.mAbilityDictionary[key]
        #catch(Exceptionex)
            #thrownewKeyNotFoundException<AbilityParam>(key)
    #
    #publicItemParamGetItemParam(stringkey)
        #try
            #returnthis.mItemDictionary[key]
        #catch(Exceptionex)
            #DebugUtility.LogError("UnknownItemParam\""+key+"\"")
            #return(ItemParam)null
    #
    #publicItemParamGetItemParam(stringkey,boolshowLogError)
        #if(showLogError)
        #returnthis.GetItemParam(key)
        #if(!this.mItemDictionary.ContainsKey(key))
        #return(ItemParam)null
        #returnthis.mItemDictionary[key]
    #
    #publicArtifactParamGetArtifactParam(stringkey)
        #try
            #returnthis.mArtifactDictionary[key]
        #catch(Exceptionex)
            #DebugUtility.LogError("UnknownArtifactParam\""+key+"\"")
            #return(ArtifactParam)null
    #
    #publicArtifactParamGetArtifactParam(stringkey,boolshowLogError)
        #if(showLogError)
        #returnthis.GetArtifactParam(key)
        #if(!this.mArtifactDictionary.ContainsKey(key))
        #return(ArtifactParam)null
        #returnthis.mArtifactDictionary[key]
    #
    #publicWeaponParamGetWeaponParam(stringkey)
        #if(string.IsNullOrEmpty(key))
        #return(WeaponParam)null
        #WeaponParamweaponParam=this.mWeaponParam.Find((Predicate<WeaponParam>)(p=>p.iname==key))
        #if(weaponParam==null)
        #DebugUtility.LogError("UnknownWeaponParam\""+key+"\"")
        #returnweaponParam
    #
    #publicRecipeParamGetRecipeParam(stringkey)
        #if(string.IsNullOrEmpty(key))
        #return(RecipeParam)null
        #RecipeParamrecipeParam=this.mRecipeParam.Find((Predicate<RecipeParam>)(p=>p.iname==key))
        #if(recipeParam==null)
        #DebugUtility.LogError("UnknownRecipeParam\""+key+"\"")
        #returnrecipeParam
    #
    #publicJobParamGetJobParam(stringkey)
        #try
            #returnthis.mJobParamDict[key]
        #catch(Exceptionex)
            #thrownewKeyNotFoundException<JobParam>(key)
    #
    #publicJobParamGetAllJobs()
        #if(this.mJobParam!=null)
        #returnthis.mJobParam.ToArray()
        #returnnewJobParam[0]
    #
    #publicAbilityParamGetAllAbilities()
        #if(this.mAbilityParam!=null)
        #returnthis.mAbilityParam.ToArray()
        #returnnewAbilityParam[0]
    #
    #publicSkillParamGetAllSkills()
        #if(this.mSkillParam!=null)
        #returnthis.mSkillParam.ToArray()
        #returnnewSkillParam[0]
    #
    #publicQuestClearUnlockUnitDataParamGetAllUnlockUnitDatas()
        #if(this.mUnlockUnitDataParam!=null)
        #returnthis.mUnlockUnitDataParam.ToArray()
        #returnnewQuestClearUnlockUnitDataParam[0]
    #
    #publicQuestClearUnlockUnitDataParamGetUnlockUnitData(stringkey)
        #if(string.IsNullOrEmpty(key))
        #return(QuestClearUnlockUnitDataParam)null
        #QuestClearUnlockUnitDataParamunlockUnitDataParam=this.mUnlockUnitDataParam.Find((Predicate<QuestClearUnlockUnitDataParam>)(p=>p.iname==key))
        #if(unlockUnitDataParam==null)
        #thrownewKeyNotFoundException<QuestClearUnlockUnitDataParam>(key)
        #returnunlockUnitDataParam
    #
    #publicCollaboSkillParamGetCollaboSkillData(stringunit_iname)
        #if(string.IsNullOrEmpty(unit_iname))
        #return(CollaboSkillParam)null
        #if(this.mCollaboSkillParam==null)
            #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetCollaboSkillDatanodata!</color>"))
            #return(CollaboSkillParam)null
        #CollaboSkillParamcollaboSkillParam=this.mCollaboSkillParam.Find((Predicate<CollaboSkillParam>)(d=>d.UnitIname==unit_iname))
        #if(collaboSkillParam==null)
        #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetCollaboSkillDatadatanotfound!unit_iname={0}</color>",(object)unit_iname))
        #returncollaboSkillParam
    #
    #publicTrickParamGetTrickParam(stringiname)
        #if(string.IsNullOrEmpty(iname))
        #return(TrickParam)null
        #if(this.mTrickParam==null)
            #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTrickParamnodata!</color>"))
            #return(TrickParam)null
        #TrickParamtrickParam=this.mTrickParam.Find((Predicate<TrickParam>)(d=>d.Iname==iname))
        #if(trickParam==null)
        #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTrickParamdatanotfound!iname={0}</color>",(object)iname))
        #returntrickParam
    #
    #publicBreakObjParamGetBreakObjParam(stringiname)
        #if(string.IsNullOrEmpty(iname))
        #return(BreakObjParam)null
        #if(this.mBreakObjParam==null)
            #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetBreakObjParamnodata!</color>"))
            #return(BreakObjParam)null
        #BreakObjParambreakObjParam=this.mBreakObjParam.Find((Predicate<BreakObjParam>)(d=>d.Iname==iname))
        #if(breakObjParam==null)
        #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetBreakObjParamdatanotfound!iname={0}</color>",(object)iname))
        #returnbreakObjParam
    #
    #publicWeatherParamGetWeatherParam(stringiname)
        #if(string.IsNullOrEmpty(iname))
        #return(WeatherParam)null
        #if(this.mWeatherParam==null)
            #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetWeatherParamnodata!</color>"))
            #return(WeatherParam)null
        #WeatherParamweatherParam=this.mWeatherParam.Find((Predicate<WeatherParam>)(d=>d.Iname==iname))
        #if(weatherParam==null)
        #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetWeatherParamdatanotfound!iname={0}</color>",(object)iname))
        #returnweatherParam
    #
    #publicTobiraParamGetTobiraParam(stringunit_iname,TobiraParam.Categorycategory)
        #if(string.IsNullOrEmpty(unit_iname))
        #return(TobiraParam)null
        #if(this.mTobiraParam!=null)
        #returnthis.mTobiraParam.Find((Predicate<TobiraParam>)(param=>
            #if(param.UnitIname==unit_iname)
            #returnparam.TobiraCategory==category
            #returnfalse
            #}))
            #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTobiraListForUnitnodata!</color>"))
            #return(TobiraParam)null
        #
        #publicTobiraParamGetTobiraListForUnit(stringunit_iname)
            #if(string.IsNullOrEmpty(unit_iname))
            #return(TobiraParam)null
            #if(this.mTobiraParam==null)
                #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTobiraListForUnitnodata!</color>"))
                #return(TobiraParam)null
            #TobiraParamtobira_list=newTobiraParam[TobiraParam.MAX_TOBIRA_COUNT]
            #this.mTobiraParam.ForEach((Action<TobiraParam>)(param=>
                #if(!(param.UnitIname==unit_iname))
                #return
                #tobira_list[(int)param.TobiraCategory]=param
                #}))
                #returntobira_list
            #
            #publicboolCanUnlockTobira(stringunit_iname)
                #if(string.IsNullOrEmpty(unit_iname))
                #returnfalse
                #if(this.mTobiraCondParam==null)
                    #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTobiraConditionsForUnitnodata!</color>"))
                    #returnfalse
                #returnthis.mTobiraCondParam.Find((Predicate<TobiraCondsParam>)(param=>!(param.UnitIname!=unit_iname)&&param.TobiraCategory==TobiraParam.Category.START))!=null
            #
            #publicTobiraConditionParamGetTobiraConditionsForUnit(stringunit_iname,TobiraParam.Categorycategory)
                #Dictionary<TobiraParam.Category,TobiraConditionParam>conditionsForUnit=this.GetTobiraConditionsForUnit(unit_iname)
                #if(conditionsForUnit==null)
                #return(TobiraConditionParam)null
                #TobiraConditionParamtobiraConditionParamArray
                #conditionsForUnit.TryGetValue(category,outtobiraConditionParamArray)
                #returntobiraConditionParamArray??(TobiraConditionParam)null
            #
            #publicDictionary<TobiraParam.Category,TobiraConditionParam>GetTobiraConditionsForUnit(stringunit_iname)
                #if(string.IsNullOrEmpty(unit_iname))
                #return(Dictionary<TobiraParam.Category,TobiraConditionParam>)null
                #if(this.mTobiraCondParam==null)
                    #DebugUtility.Log(string.Format("<color=yellow>MasterParam/GetTobiraConditionsForUnitnodata!</color>"))
                    #return(Dictionary<TobiraParam.Category,TobiraConditionParam>)null
                #Dictionary<TobiraParam.Category,TobiraConditionParam>condition_list=newDictionary<TobiraParam.Category,TobiraConditionParam>()
                #this.mTobiraCondParam.ForEach((Action<TobiraCondsParam>)(param=>
                    #if(!(param.UnitIname==unit_iname))
                    #return
                    #condition_list.Add(param.TobiraCategory,param.Conditions)
                    #Array.ForEach<TobiraConditionParam>(param.Conditions,(Action<TobiraConditionParam>)(tcp=>
                        #if(tcp.CondType!=TobiraConditionParam.ConditionType.Unit)
                        #return
                        #TobiraCondsUnitParamcond_unit
                        #this.mTobiraCondUnitParam.TryGetValue(tcp.CondIname,outcond_unit)
                        #if(cond_unit==null)
                        #return
                        #tcp.SetCondUnit(cond_unit)
                        #}))
                        #}))
                        #returncondition_list
                    #
                    #publicTobiraRecipeParamGetTobiraRecipe(stringunit_iname,TobiraParam.Categorycategory,intlevel)
                        #TobiraParamtobiraParam=this.GetTobiraParam(unit_iname,category)
                        #if(tobiraParam==null)
                        #return(TobiraRecipeParam)null
                        #returnthis.GetTobiraRecipe(tobiraParam.RecipeId,level)
                    #
                    #publicTobiraRecipeParamGetTobiraRecipe(stringrecipe_iname,intlevel)
                        #returnthis.mTobiraRecipeParam.Find((Predicate<TobiraRecipeParam>)(param=>
                            #if(param.RecipeIname==recipe_iname)
                            #returnparam.Level==level
                            #returnfalse
                            #}))
                        #
                        #publicRecipeParamGetAllRecipes()
                            #if(this.mRecipeParam!=null)
                            #returnthis.mRecipeParam.ToArray()
                            #returnnewRecipeParam[0]
                        #
                        #publicJobSetParamGetJobSetParam(stringkey)
                            #if(string.IsNullOrEmpty(key))
                            #return(JobSetParam)null
                            #JobSetParamjobSetParam=this.mJobSetParam.Find((Predicate<JobSetParam>)(p=>p.iname==key))
                            #if(jobSetParam==null)
                            #thrownewKeyNotFoundException<JobSetParam>(key)
                            #returnjobSetParam
                        #
                        #publicJobSetParamGetClassChangeJobSetParam(stringkey)
                            #if(string.IsNullOrEmpty(key))
                            #return(JobSetParam)null
                            #try
                                #returnthis.mJobsetDictionary[key].ToArray()
                            #catch
                                #return(JobSetParam)null
                        #
                        #publicGrowParamGetGrowParam(stringkey)
                            #if(string.IsNullOrEmpty(key))
                            #return(GrowParam)null
                            #GrowParamgrowParam=this.mGrowParam.Find((Predicate<GrowParam>)(p=>p.type==key))
                            #if(growParam==null)
                            #DebugUtility.LogError("UnknownGrowParam\""+key+"\"")
                            #returngrowParam
                        #
                        #publicAIParamGetAIParam(stringkey)
                            #if(string.IsNullOrEmpty(key))
                            #return(AIParam)null
                            #AIParamaiParam=this.mAIParam.Find((Predicate<AIParam>)(p=>p.iname==key))
                            #if(aiParam==null)
                            #DebugUtility.LogError("FailedAIParaminame\""+key+"\"notfound.")
                            #returnaiParam
                        #
                        #publicGeoParamGetGeoParam(stringkey)
                            #if(string.IsNullOrEmpty(key))
                            #return(GeoParam)null
                            #GeoParamgeoParam=this.mGeoParam.Find((Predicate<GeoParam>)(p=>p.iname==key))
                            #if(geoParam==null)
                            #DebugUtility.LogError("FailedGeoParaminame\""+key+"\"notfound.")
                            #returngeoParam
                        #
                        #publicRarityParamGetRarityParam(intrarity)
                            #if(this.mRarityParam!=null&&(rarity>=0||rarity<this.mRarityParam.Count))
                            #returnthis.mRarityParam[rarity]
                            #DebugUtility.LogError("mRarityParamStackOverflow.")
                            #return(RarityParam)null
                        #
                        #publicShopParamGetShopParam(EShopTypetype)
                            #intindex1=(int)type
                            #if(type==EShopType.Event)
                                #index1=-1
                                #for(intindex2=0index2<this.mShopParam.Count++index2)
                                    #stringstrArray=GlobalVars.EventShopItem.shops.gname.Split('-')
                                    #if(this.mShopParam[index2].iname.Equals(strArray[0]))
                                        #index1=index2
                                        #break
                                #if(index1<0)
                                    #DebugUtility.LogError("mShopParamDataError.Notfound:"+(object)GlobalVars.EventShopItem.shops.gname.Split('-'))
                                    #return(ShopParam)null
                            #if(type==EShopType.Limited)
                                #index1=-1
                                #for(intindex2=0index2<this.mShopParam.Count++index2)
                                    #stringstrArray=GlobalVars.LimitedShopItem.shops.gname.Split('-')
                                    #if(this.mShopParam[index2].iname.Equals(strArray[0]))
                                        #index1=index2
                                        #break
                                #if(index1<0)
                                    #DebugUtility.LogError("mShopParamDataError.Notfound:"+(object)GlobalVars.LimitedShopItem.shops.gname.Split('-'))
                                    #return(ShopParam)null
                            #if(this.mShopParam!=null&&index1>=0&&index1<this.mShopParam.Count)
                            #returnthis.mShopParam[index1]
                            #DebugUtility.LogError("mShopParamStackOverflow.")
                            #return(ShopParam)null
                        #
                        #publicintGetShopType(stringiname)
                            #intindex=this.mShopParam.FindIndex((Predicate<ShopParam>)(p=>p.iname==iname))
                            #if(index<0)
                            #DebugUtility.LogError("FailedGetShopParaminame\""+iname+"\"notfound.")
                            #returnindex
                        #
                        #publicPlayerParamGetPlayerParam(intlv)
                            #if(lv>0&&lv<=this.GetPlayerLevelCap())
                            #returnthis.mPlayerParamTbl[lv-1]
                            #return(PlayerParam)null
                        #
                        #publicintGetAbilityNextGold(intrank)
                            #DebugUtility.Assert(rank>0&&rank<=this.mAbilityExpTbl.Length,"指定ランク"+(object)rank+"がアビリティのランク範囲に存在しない。")
                            #return(int)this.mAbilityExpTbl[rank]
                        #
                        #publicintGetAwakeNeedPieces(intawakeLv)
                            #DebugUtility.Assert(awakeLv>=0&&awakeLv<this.mAwakePieceTbl.Length,"覚醒回数"+(object)awakeLv+"が覚醒可能な範囲に存在しない。")
                            #return(int)this.mAwakePieceTbl[awakeLv]
                        #
                        #publicintGetUnitNextExp(intlv)
                            #DebugUtility.Assert(lv>0&&lv<=this.mUnitExpTbl.Length,"指定レベル"+(object)lv+"がユニットのレベル範囲に存在しない。")
                            #return(int)this.mUnitExpTbl[lv-1]
                        #
                        #publicintGetUnitLevelExp(intlv)
                            #DebugUtility.Assert(lv>0&&lv<=this.mUnitExpTbl.Length,"指定レベル"+(object)lv+"がユニットのレベル範囲に存在しない。")
                            #intnum=0
                            #for(intindex=0index<lv++index)
                            #num+=(int)this.mUnitExpTbl
                            #returnnum
                        #
                        #publicintCalcUnitLevel(inttotalExp,intlevelCap)
                            #intval2=levelCap
                            #intnum=0
                            #intval1=0
                            #for(intindex=0index<val2++index)
                                #num+=this.GetUnitNextExp(index+1)
                                #if(num<=totalExp)
                                #++val1
                                #else
                                #break
                            #returnMath.Min(Math.Max(val1,1),val2)
                        #
                        #publicintGetUnitMaxLevel()
                            #returnthis.mUnitExpTbl.Length
                        #
                        #publicintGetPlayerNextExp(intlv)
                            #DebugUtility.Assert(lv>0&&lv<=this.mPlayerExpTbl.Length,"指定レベル"+(object)lv+"がプレイヤーのレベル範囲に存在しない。")
                            #return(int)this.mPlayerExpTbl[lv-1]
                        #
                        #publicintGetPlayerLevelExp(intlv)
                            #DebugUtility.Assert(lv>0&&lv<=this.mPlayerExpTbl.Length,"指定レベル"+(object)lv+"がプレイヤーのレベル範囲に存在しない。")
                            #intnum=0
                            #for(intindex=0index<lv++index)
                            #num+=(int)this.mPlayerExpTbl
                            #returnnum
                        #
                        #publicintGetPlayerLevelCap()
                            #returnthis.mPlayerExpTbl.Length
                        #
                        #publicintGetVipArenaResetCount(intrank)
                            #DebugUtility.Assert(rank>=0&&rank<this.mVip.Length,"指定VIPランク"+(object)rank+"がVIPランクの範囲に存在しない。")
                            #returnthis.mVip[rank].ResetArenaNum
                        #
                        #publicintGetVipRankNextPoint(intrank)
                            #DebugUtility.Assert(rank>=0&&rank<this.mVip.Length,"指定VIPランク"+(object)rank+"がVIPランクの範囲に存在しない。")
                            #returnthis.mVip[rank].NextRankNeedPoint
                        #
                        #publicintGetVipRankTotalNeedPoint(intrank)
                            #DebugUtility.Assert(rank>=0&&rank<this.mVip.Length,"指定VIPランク"+(object)rank+"がVIPランクの範囲に存在しない。")
                            #intnum=0
                            #for(intindex=0index<rank++index)
                            #num+=this.mVip.NextRankNeedPoint
                            #returnnum
                        #
                        #publicintGetVipBuyStaminaLimit(intrank)
                            #DebugUtility.Assert(rank>=0&&rank<this.mVip.Length,"指定VIPランク"+(object)rank+"がVIPランクの範囲に存在しない。")
                            #returnthis.mVip[rank].BuyStaminaNum
                        #
                        #publicintGetVipBuyGoldLimit(intrank)
                            #DebugUtility.Assert(rank>=0&&rank<this.mVip.Length,"指定VIPランク"+(object)rank+"がVIPランクの範囲に存在しない。")
                            #returnthis.mVip[rank].BuyCoinNum
                        #
                        #publicintGetVipRankCap()
                            #if(this.mVip==null)
                            #return0
                            #returnMath.Max(this.mVip.Length-1,0)
                        #
                        #publicTrophyCategoryParamTrophyCategories
                            #get
                                #returnthis.mTrophyCategory
                        #
                        #publicChallengeCategoryParamChallengeCategories
                            #get
                                #returnthis.mChallengeCategory
                        #
                        #publicTrophyParamTrophies
                            #get
                                #returnthis.mTrophy
                        #
                        #publicTrophyObjectiveGetTrophiesOfType(TrophyConditionTypestype)
                            #returnthis.mTrophyDict[(int)type]
                        #
                        #publicTrophyParamGetTrophy(stringiname)
                            #if(this.mTrophy==null)
                            #return(TrophyParam)null
                            #TrophyParamtrophyParam
                            #if(this.mTrophyInameDict.TryGetValue(iname,outtrophyParam))
                            #returntrophyParam
                            #return(TrophyParam)null
                        #
                        #publicUnlockParamUnlocks
                            #get
                                #returnthis.mUnlock
                        #
                        #publicUnlockParamGetUnlockParam(stringiname)
                            #for(intindex=this.mUnlock.Length-1index>=0--index)
                                #if(this.mUnlock.iname==iname)
                                #returnthis.mUnlock
                            #return(UnlockParam)null
                        #
                        #publicUnlockParamFindUnlockParam(UnlockTargetsvalue)
                            #for(intindex=this.mUnlock.Length-1index>=0--index)
                                #if(this.mUnlock.UnlockTarget==value)
                                #returnthis.mUnlock
                            #return(UnlockParam)null
                        #
                        #publicUnitParamGetUnitParamForPiece(stringkey,booldoCheck=true)
                            #if(string.IsNullOrEmpty(key))
                            #return(UnitParam)null
                            #if(key==(string)this.FixParam.CommonPieceAll||key==(string)this.FixParam.CommonPieceDark||(key==(string)this.FixParam.CommonPieceFire||key==(string)this.FixParam.CommonPieceShine)||(key==(string)this.FixParam.CommonPieceThunder||key==(string)this.FixParam.CommonPieceWater||key==(string)this.FixParam.CommonPieceWind))
                            #return(UnitParam)null
                            #UnitParamunitParam=this.mUnitParam.Find((Predicate<UnitParam>)(p=>p.piece==key))
                            #if(doCheck&&unitParam==null)
                            #DebugUtility.LogError("FailedUnitParaminame\""+key+"\"notfound.")
                            #returnunitParam
                        #
                        #publicOIntGetArtifactExpTable()
                            #returnthis.mArtifactExpTbl
                        #
                        #publicstringTranslateMoviePath(stringpath)
                            #if(this.mStreamingMovies==null)
                            #returnpath
                            #for(intindex=0index<this.mStreamingMovies.Length++index)
                                #if(this.mStreamingMovies.alias==path)
                                #returnthis.mStreamingMovies.path
                            #returnpath
                        #
                        #publicArtifactParamGetSkinParamFromItemId(stringitemId)
                            #returnArray.Find<ArtifactParam>(this.mArtifactParam.ToArray(),(Predicate<ArtifactParam>)(s=>s.kakera==itemId))
                        #
                        #publicboolIsSkinItem(stringitemId)
                            #returnthis.GetSkinParamFromItemId(itemId)!=null
                        #
                        #publicBannerParamBanners
                            #get
                                #returnthis.mBanner
                        #
                        #publicAwardParamGetAwardParam(stringkey)
                            #try
                                #returnthis.mAwardDictionary[key]
                            #catch(Exceptionex)
                                #DebugUtility.LogError("UnknownAwardParam\""+key+"\"")
                                #return(AwardParam)null
                        #
                        #publicAwardParamGetAllAwards()
                            #if(this.mAwardParam!=null)
                            #returnthis.mAwardParam.ToArray()
                            #returnnewAwardParam[0]
                        #
                        #publicLoginInfoParamGetAllLoginInfos()
                            #if(this.mLoginInfoParam!=null)
                            #returnthis.mLoginInfoParam
                            #returnnewLoginInfoParam[0]
                        #
                        #publicLoginInfoParamGetActiveLoginInfos()
                            #if(this.mLoginInfoParam==null)
                            #return(LoginInfoParam)null
                            #List<LoginInfoParam>loginInfoParamList=newList<LoginInfoParam>()
                            #intplayer_level=MonoSingleton<GameManager>.Instance.Player.CalcLevel()
                            #boolis_beginner=MonoSingleton<GameManager>.Instance.Player.IsBeginner()
                            #for(intindex=0index<this.mLoginInfoParam.Length++index)
                                #if(this.mLoginInfoParam.IsDisplayable(TimeManager.ServerTime,player_level,is_beginner))
                                #loginInfoParamList.Add(this.mLoginInfoParam)
                            #returnloginInfoParamList.ToArray()
                        #
                        #publicVersusMatchingParamGetVersusMatchingParam()
                            #returnthis.mVersusMatching.ToArray()
                        #
                        #publicVersusMatchCondParamGetVersusMatchingCondition()
                            #returnthis.mVersusMatchCond.ToArray()
                        #
                        #publicOIntTowerRank
                            #get
                                #returnthis.mTowerRankTbl
                        #
                        #publicOIntGetMultiPlayLimitUnitLv()
                            #returnthis.mMultiLimitUnitLv
                        #
                        #publicboolDeserialize2(JSON_MasterParamjson)
                            #if(this.Loaded)
                            #returntrue
                            #DebugUtility.Verify((object)json,typeof(JSON_MasterParam))
                            #this.mLocalNotificationParam=(LocalNotificationParam)null
                            #this.mFixParam.Deserialize(json.Fix[0])
                            #if(json.Unit!=null)
                                #if(this.mUnitParam==null)
                                if 'Unit' in json:
                                    this['mUnitParam'] = newList<UnitParam>
                                #if(this.mUnitDictionary==null)
                                if 'Unit' in json:
                                    this['mUnitDictionary'] = newDictionary<string,UnitParam>
                                #for(intindex=0index<json.Unit.Length++index)
                                    #JSON_UnitParamjson1=json.Unit
                                    #UnitParamunitParam=newUnitParam()
                                    #this.mUnitParam.Add(unitParam)
                                    #unitParam.Deserialize(json1)
                                    #this.mUnitDictionary.Add(json1.iname,unitParam)
                            #if(json.UnitJobOverwrite!=null)
                                #if(this.mUnitJobOverwriteParam==null)
                                #this.mUnitJobOverwriteParam=newList<UnitJobOverwriteParam>()
                                #if(this.mUnitJobOverwriteDictionary==null)
                                #this.mUnitJobOverwriteDictionary=newDictionary<string,Dictionary<string,UnitJobOverwriteParam>>()
                                #foreach(JSON_UnitJobOverwriteParamjson1injson.UnitJobOverwrite)
                                    #UnitJobOverwriteParamjobOverwriteParam=newUnitJobOverwriteParam()
                                    #this.mUnitJobOverwriteParam.Add(jobOverwriteParam)
                                    #jobOverwriteParam.Deserialize(json1)
                                    #Dictionary<string,UnitJobOverwriteParam>dictionary
                                    #this.mUnitJobOverwriteDictionary.TryGetValue(json1.unit_iname,outdictionary)
                                    #if(dictionary==null)
                                        #dictionary=newDictionary<string,UnitJobOverwriteParam>()
                                        #this.mUnitJobOverwriteDictionary.Add(json1.unit_iname,dictionary)
                                    #if(!dictionary.ContainsKey(json1.job_iname))
                                    #dictionary.Add(json1.job_iname,jobOverwriteParam)
                            #if(json.Skill!=null)
                                #if(this.mSkillParam==null)
                                if 'Skill' in json:
                                    this['mSkillParam'] = newList<SkillParam>
                                #if(this.mSkillDictionary==null)
                                if 'Skill' in json:
                                    this['mSkillDictionary'] = newDictionary<string,SkillParam>
                                #for(intindex=0index<json.Skill.Length++index)
                                    #JSON_SkillParamjson1=json.Skill
                                    #SkillParamskillParam=newSkillParam()
                                    #this.mSkillParam.Add(skillParam)
                                    #skillParam.Deserialize(json1)
                                    #this.mSkillDictionary.Add(json1.iname,skillParam)
                                #SkillParam.UpdateReplaceSkill(this.mSkillParam)
                            #if(json.Buff!=null)
                                #if(this.mBuffEffectParam==null)
                                if 'Buff' in json:
                                    this['mBuffEffectParam'] = newList<BuffEffectParam>
                                #for(intindex=0index<json.Buff.Length++index)
                                    #JSON_BuffEffectParamjson1=json.Buff
                                    #BuffEffectParambuffEffectParam=newBuffEffectParam()
                                    #this.mBuffEffectParam.Add(buffEffectParam)
                                    #buffEffectParam.Deserialize(json1)
                            #if(json.Cond!=null)
                                #if(this.mCondEffectParam==null)
                                if 'Cond' in json:
                                    this['mCondEffectParam'] = newList<CondEffectParam>
                                #for(intindex=0index<json.Cond.Length++index)
                                    #JSON_CondEffectParamjson1=json.Cond
                                    #CondEffectParamcondEffectParam=newCondEffectParam()
                                    #this.mCondEffectParam.Add(condEffectParam)
                                    #condEffectParam.Deserialize(json1)
                            #if(json.Ability!=null)
                                #if(this.mAbilityParam==null)
                                if 'Ability' in json:
                                    this['mAbilityParam'] = newList<AbilityParam>
                                #if(this.mAbilityDictionary==null)
                                if 'Ability' in json:
                                    this['mAbilityDictionary'] = newDictionary<string,AbilityParam>
                                #for(intindex=0index<json.Ability.Length++index)
                                    #JSON_AbilityParamjson1=json.Ability
                                    #AbilityParamabilityParam=newAbilityParam()
                                    #this.mAbilityParam.Add(abilityParam)
                                    #abilityParam.Deserialize(json1)
                                    #this.mAbilityDictionary.Add(json1.iname,abilityParam)
                            #if(json.Item!=null)
                                #if(this.mItemParam==null)
                                if 'Item' in json:
                                    this['mItemParam'] = newList<ItemParam>
                                #if(this.mItemDictionary==null)
                                if 'Item' in json:
                                    this['mItemDictionary'] = newDictionary<string,ItemParam>
                                #for(intindex=0index<json.Item.Length++index)
                                    #JSON_ItemParamjson1=json.Item
                                    #ItemParamitemParam=newItemParam()
                                    #this.mItemParam.Add(itemParam)
                                    #itemParam.Deserialize(json1)
                                    #itemParam.no=index+1
                                    #this.mItemDictionary.Add(json1.iname,itemParam)
                                #this.AddUnitToItem()
                            #if(json.Artifact!=null)
                                #if(this.mArtifactParam==null)
                                if 'Artifact' in json:
                                    this['mArtifactParam'] = newList<ArtifactParam>
                                #if(this.mArtifactDictionary==null)
                                if 'Artifact' in json:
                                    this['mArtifactDictionary'] = newDictionary<string,ArtifactParam>
                                #for(intindex=0index<json.Artifact.Length++index)
                                    #JSON_ArtifactParamjson1=json.Artifact
                                    #if(json1.iname!=null)
                                        #ArtifactParamartifactParam=newArtifactParam()
                                        #this.mArtifactParam.Add(artifactParam)
                                        #artifactParam.Deserialize(json1)
                                        #this.mArtifactDictionary.Add(json1.iname,artifactParam)
                            #if(json.Weapon!=null)
                                #if(this.mWeaponParam==null)
                                if 'Weapon' in json:
                                    this['mWeaponParam'] = newList<WeaponParam>
                                #for(intindex=0index<json.Weapon.Length++index)
                                    #JSON_WeaponParamjson1=json.Weapon
                                    #WeaponParamweaponParam=newWeaponParam()
                                    #this.mWeaponParam.Add(weaponParam)
                                    #weaponParam.Deserialize(json1)
                            #if(json.Recipe!=null)
                                #if(this.mRecipeParam==null)
                                if 'Recipe' in json:
                                    this['mRecipeParam'] = newList<RecipeParam>
                                #for(intindex=0index<json.Recipe.Length++index)
                                    #JSON_RecipeParamjson1=json.Recipe
                                    #RecipeParamrecipeParam=newRecipeParam()
                                    #this.mRecipeParam.Add(recipeParam)
                                    #recipeParam.Deserialize(json1)
                            #if(json.Job!=null)
                                #if(this.mJobParam==null)
                                if 'Job' in json:
                                    this['mJobParam'] = newList<JobParam>
                                #for(intindex=0index<json.Job.Length++index)
                                    #JSON_JobParamjson1=json.Job
                                    #JobParamjobParam=newJobParam()
                                    #this.mJobParam.Add(jobParam)
                                    #this.mJobParamDict[json1.iname]=jobParam
                                    #jobParam.Deserialize(json1,this)
                            #if(json.JobSet!=null)
                                #if(this.mJobSetParam==null)
                                if 'JobSet' in json:
                                    this['mJobSetParam'] = newList<JobSetParam>
                                #if(this.mJobsetDictionary==null)
                                if 'Unit' in json:
                                    this['mJobsetDictionary'] = newDictionary<string,List<JobSetParam>>
                                #for(intindex=0index<json.JobSet.Length++index)
                                    #JSON_JobSetParamjob=json.JobSet
                                    #JobSetParamjobSetParam=newJobSetParam()
                                    #this.mJobSetParam.Add(jobSetParam)
                                    #jobSetParam.Deserialize(job)
                                    #if(!string.IsNullOrEmpty(jobSetParam.target_unit))
                                        #List<JobSetParam>jobSetParamList
                                        #if(this.mJobsetDictionary.ContainsKey(jobSetParam.target_unit))
                                            #jobSetParamList=this.mJobsetDictionary[jobSetParam.target_unit]
                                        #else
                                            #jobSetParamList=newList<JobSetParam>(3)
                                            #this.mJobsetDictionary.Add(jobSetParam.target_unit,jobSetParamList)
                                        #jobSetParamList.Add(jobSetParam)
                            #if(json.Grow!=null)
                                #if(this.mGrowParam==null)
                                if 'Grow' in json:
                                    this['mGrowParam'] = newList<GrowParam>
                                #for(intindex=0index<json.Grow.Length++index)
                                    #JSON_GrowParamjson1=json.Grow
                                    #GrowParamgrowParam=newGrowParam()
                                    #this.mGrowParam.Add(growParam)
                                    #growParam.Deserialize(json1)
                            #if(json.AI!=null)
                                #if(this.mAIParam==null)
                                if 'AI' in json:
                                    this['mAIParam'] = newList<AIParam>
                                #for(intindex=0index<json.AI.Length++index)
                                    #JSON_AIParamjson1=json.AI
                                    #AIParamaiParam=newAIParam()
                                    #this.mAIParam.Add(aiParam)
                                    #aiParam.Deserialize(json1)
                            #if(json.Geo!=null)
                                #if(this.mGeoParam==null)
                                if 'Geo' in json:
                                    this['mGeoParam'] = newList<GeoParam>
                                #for(intindex=0index<json.Geo.Length++index)
                                    #JSON_GeoParamjson1=json.Geo
                                    #GeoParamgeoParam=newGeoParam()
                                    #this.mGeoParam.Add(geoParam)
                                    #geoParam.Deserialize(json1)
                            #if(json.Rarity!=null)
                                #if(this.mRarityParam==null)
                                if 'Rarity' in json:
                                    this['mRarityParam'] = newList<RarityParam>
                                #for(intindex=0index<json.Rarity.Length++index)
                                    #RarityParamrarityParam=newRarityParam()
                                    #this.mRarityParam.Add(rarityParam)
                                    #rarityParam.Deserialize(json.Rarity)
                            #if(json.Shop!=null)
                                #if(this.mShopParam==null)
                                if 'Shop' in json:
                                    this['mShopParam'] = newList<ShopParam>
                                #for(intindex=0index<json.Shop.Length++index)
                                    #ShopParamshopParam=newShopParam()
                                    #this.mShopParam.Add(shopParam)
                                    #shopParam.Deserialize(json.Shop)
                            #if(json.Player!=null)
                                if 'Player' in json:
                                    this['mPlayerParamTbl'] = newPlayerParam[json['Player'].Length]
                                #for(intindex=0index<json.Player.Length++index)
                                    #JSON_PlayerParamjson1=json.Player
                                    #this.mPlayerParamTbl=newPlayerParam()
                                    #this.mPlayerParamTbl.Deserialize(json1)
                            #if(json.PlayerLvTbl!=null)
                                #for(intindex=0index<json.PlayerLvTbl.Length++index)
                                if 'PlayerLvTbl' in json:
                                    this['mPlayerExpTbl'] = json['PlayerLvTbl']
                            #if(json.UnitLvTbl!=null)
                                #for(intindex=0index<json.UnitLvTbl.Length++index)
                                if 'UnitLvTbl' in json:
                                    this['mUnitExpTbl'] = json['UnitLvTbl']
                            #if(json.ArtifactLvTbl!=null)
                                #for(intindex=0index<json.ArtifactLvTbl.Length++index)
                                if 'ArtifactLvTbl' in json:
                                    this['mArtifactExpTbl'] = json['ArtifactLvTbl']
                            #if(json.AbilityRank!=null)
                                #for(intindex=0index<json.AbilityRank.Length++index)
                                if 'AbilityRank' in json:
                                    this['mAbilityExpTbl'] = json['AbilityRank']
                            #if(json.AwakePieceTbl!=null)
                                #for(intindex=0index<json.AwakePieceTbl.Length++index)
                                if 'AwakePieceTbl' in json:
                                    this['mAwakePieceTbl'] = json['AwakePieceTbl']
                            #this.mLocalNotificationParam=newLocalNotificationParam()
                            #if(json.LocalNotification!=null)
                                if 'LocalNotification' in json:
                                    this['mLocalNotificationParam']['msg_stamina'] = json['LocalNotification'][0].msg_stamina
                                if 'LocalNotification' in json:
                                    this['mLocalNotificationParam']['iOSAct_stamina'] = json['LocalNotification'][0].iOSAct_stamina
                                if 'LocalNotification' in json:
                                    this['mLocalNotificationParam']['limitSec_stamina'] = json['LocalNotification'][0].limitSec_stamina
                            #Dictionary<int,TrophyCategoryParam>dictionary1=newDictionary<int,TrophyCategoryParam>()
                            #if(json.TrophyCategory!=null)
                                #List<TrophyCategoryParam>trophyCategoryParamList=newList<TrophyCategoryParam>(json.TrophyCategory.Length)
                                #for(intindex=0index<json.TrophyCategory.Length++index)
                                    #TrophyCategoryParamtrophyCategoryParam=newTrophyCategoryParam()
                                    #if(trophyCategoryParam.Deserialize(json.TrophyCategory))
                                        #trophyCategoryParamList.Add(trophyCategoryParam)
                                        #if(!dictionary1.ContainsKey(trophyCategoryParam.hash_code))
                                        #dictionary1.Add(trophyCategoryParam.hash_code,trophyCategoryParam)
                                #this.mTrophyCategory=trophyCategoryParamList.ToArray()
                            #if(json.Trophy!=null&&dictionary1.Count>0)
                                #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Trophy.Length)
                                #for(intindex=0index<json.Trophy.Length++index)
                                    #TrophyParamtrophyParam=newTrophyParam()
                                    #if(trophyParam.Deserialize(json.Trophy))
                                        #if(dictionary1.ContainsKey(trophyParam.category_hash_code))
                                        #trophyParam.CategoryParam=dictionary1[trophyParam.category_hash_code]
                                        #else
                                        #DebugUtility.LogError(trophyParam.iname+"=>親カテゴリが未設定or入力ミス")
                                        #trophyParamList.Add(trophyParam)
                                #this.mTrophy=trophyParamList.ToArray()
                                #this.mTrophyInameDict=newDictionary<string,TrophyParam>()
                                #foreach(TrophyParamtrophyParaminthis.mTrophy)
                                #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)
                            #Dictionary<string,ChallengeCategoryParam>dictionary2=newDictionary<string,ChallengeCategoryParam>()
                            #if(json.ChallengeCategory!=null)
                                #List<ChallengeCategoryParam>challengeCategoryParamList=newList<ChallengeCategoryParam>(json.ChallengeCategory.Length)
                                #for(intindex=0index<json.ChallengeCategory.Length++index)
                                    #ChallengeCategoryParamchallengeCategoryParam=newChallengeCategoryParam()
                                    #if(challengeCategoryParam.Deserialize(json.ChallengeCategory))
                                        #dictionary2[challengeCategoryParam.iname]=challengeCategoryParam
                                        #challengeCategoryParamList.Add(challengeCategoryParam)
                                #this.mChallengeCategory=challengeCategoryParamList.ToArray()
                            #if(json.Challenge!=null)
                                #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Challenge.Length)
                                #for(intindex=0index<json.Challenge.Length++index)
                                    #TrophyParamtrophyParam=newTrophyParam()
                                    #if(trophyParam.Deserialize(json.Challenge))
                                        #if(dictionary2.ContainsKey(trophyParam.Category))
                                        #trophyParam.ChallengeCategoryParam=dictionary2[trophyParam.Category]
                                        #trophyParam.Challenge=1
                                        #trophyParamList.Add(trophyParam)
                                #this.mChallenge=trophyParamList.ToArray()
                                #intlength=this.mTrophy.Length
                                #Array.Resize<TrophyParam>(refthis.mTrophy,length+this.mChallenge.Length)
                                #Array.Copy((Array)this.mChallenge,0,(Array)this.mTrophy,length,this.mChallenge.Length)
                                #foreach(TrophyParamtrophyParaminthis.mChallenge)
                                #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)
                            #this.CreateTrophyDict()
                            #if(json.Unlock!=null)
                                #List<UnlockParam>unlockParamList=newList<UnlockParam>(json.Unlock.Length)
                                #for(intindex=0index<json.Unlock.Length++index)
                                    #UnlockParamunlockParam=newUnlockParam()
                                    #if(unlockParam.Deserialize(json.Unlock))
                                    #unlockParamList.Add(unlockParam)
                                #this.mUnlock=unlockParamList.ToArray()
                            #if(json.Vip!=null)
                                #List<VipParam>vipParamList=newList<VipParam>(json.Vip.Length)
                                #for(intindex=0index<json.Vip.Length++index)
                                    #VipParamvipParam=newVipParam()
                                    #if(vipParam.Deserialize(json.Vip))
                                    #vipParamList.Add(vipParam)
                                #this.mVip=vipParamList.ToArray()
                            #if(json.Mov!=null)
                                if 'Mov' in json:
                                    this['mStreamingMovies'] = newJSON_StreamingMovie[json['Mov'].Length]
                                #for(intindex=0index<json.Mov.Length++index)
                                    #this.mStreamingMovies=newJSON_StreamingMovie()
                                    if 'Mov' in json:
                                        this['mStreamingMovies']['alias'] = json['Mov'].alias
                                    if 'Mov' in json:
                                        this['mStreamingMovies']['path'] = json['Mov'].path
                            #if(json.Banner!=null)
                                #List<BannerParam>bannerParamList=newList<BannerParam>(json.Banner.Length)
                                #for(intindex=0index<json.Banner.Length++index)
                                    #BannerParambannerParam=newBannerParam()
                                    #if(bannerParam.Deserialize(json.Banner))
                                    #bannerParamList.Add(bannerParam)
                                #this.mBanner=bannerParamList.ToArray()
                            #if(json.QuestClearUnlockUnitData!=null)
                                #List<QuestClearUnlockUnitDataParam>unlockUnitDataParamList=newList<QuestClearUnlockUnitDataParam>(json.QuestClearUnlockUnitData.Length)
                                #for(intindex=0index<json.QuestClearUnlockUnitData.Length++index)
                                    #QuestClearUnlockUnitDataParamunlockUnitDataParam=newQuestClearUnlockUnitDataParam()
                                    #unlockUnitDataParam.Deserialize(json.QuestClearUnlockUnitData)
                                    #unlockUnitDataParamList.Add(unlockUnitDataParam)
                                #this.mUnlockUnitDataParam=unlockUnitDataParamList
                            #if(json.Award!=null)
                                #if(this.mAwardParam==null)
                                if 'Award' in json:
                                    this['mAwardParam'] = newList<AwardParam>
                                #if(this.mAwardDictionary==null)
                                if 'Award' in json:
                                    this['mAwardDictionary'] = newDictionary<string,AwardParam>
                                #for(intindex=0index<json.Award.Length++index)
                                    #JSON_AwardParamjson1=json.Award
                                    #AwardParamawardParam=newAwardParam()
                                    #this.mAwardParam.Add(awardParam)
                                    #awardParam.Deserialize(json1)
                                    #this.mAwardDictionary.Add(awardParam.iname,awardParam)
                            #if(json.LoginInfo!=null)
                                #List<LoginInfoParam>loginInfoParamList=newList<LoginInfoParam>(json.LoginInfo.Length)
                                #for(intindex=0index<json.LoginInfo.Length++index)
                                    #LoginInfoParamloginInfoParam=newLoginInfoParam()
                                    #if(loginInfoParam.Deserialize(json.LoginInfo))
                                    #loginInfoParamList.Add(loginInfoParam)
                                #this.mLoginInfoParam=loginInfoParamList.ToArray()
                            #if(json.CollaboSkill!=null)
                                #List<CollaboSkillParam>collaboSkillParamList=newList<CollaboSkillParam>(json.CollaboSkill.Length)
                                #for(intindex=0index<json.CollaboSkill.Length++index)
                                    #CollaboSkillParamcollaboSkillParam=newCollaboSkillParam()
                                    #collaboSkillParam.Deserialize(json.CollaboSkill)
                                    #collaboSkillParamList.Add(collaboSkillParam)
                                #this.mCollaboSkillParam=collaboSkillParamList
                                #CollaboSkillParam.UpdateCollaboSkill(this.mCollaboSkillParam)
                            #if(json.Trick!=null)
                                #List<TrickParam>trickParamList=newList<TrickParam>(json.Trick.Length)
                                #for(intindex=0index<json.Trick.Length++index)
                                    #TrickParamtrickParam=newTrickParam()
                                    #trickParam.Deserialize(json.Trick)
                                    #trickParamList.Add(trickParam)
                                #this.mTrickParam=trickParamList
                            #if(json.BreakObj!=null)
                                #List<BreakObjParam>breakObjParamList=newList<BreakObjParam>(json.BreakObj.Length)
                                #for(intindex=0index<json.BreakObj.Length++index)
                                    #BreakObjParambreakObjParam=newBreakObjParam()
                                    #breakObjParam.Deserialize(json.BreakObj)
                                    #breakObjParamList.Add(breakObjParam)
                                #this.mBreakObjParam=breakObjParamList
                            #if(json.VersusMatchKey!=null)
                                if 'VersusMatchKey' in json:
                                    this['mVersusMatching'] = newList<VersusMatchingParam>
                                #for(intindex=0index<json.VersusMatchKey.Length++index)
                                    #VersusMatchingParamversusMatchingParam=newVersusMatchingParam()
                                    #versusMatchingParam.Deserialize(json.VersusMatchKey)
                                    #this.mVersusMatching.Add(versusMatchingParam)
                            #if(json.VersusMatchCond!=null)
                                if 'VersusMatchCond' in json:
                                    this['mVersusMatchCond'] = newList<VersusMatchCondParam>
                                #for(intindex=0index<json.VersusMatchCond.Length++index)
                                    #VersusMatchCondParamversusMatchCondParam=newVersusMatchCondParam()
                                    #versusMatchCondParam.Deserialize(json.VersusMatchCond)
                                    #this.mVersusMatchCond.Add(versusMatchCondParam)
                            #if(json.TowerScore!=null)
                                if 'TowerScore' in json:
                                    this['mTowerScores'] = newDictionary<string,TowerScoreParam>
                                #for(intindex1=0index1<json.TowerScore.Length++index1)
                                    #JSON_TowerScorejsonTowerScore=json.TowerScore[index1]
                                    #intlength=jsonTowerScore.threshold_vals.Length
                                    #TowerScoreParamtowerScoreParamArray=newTowerScoreParam[length]
                                    #for(intindex2=0index2<length++index2)
                                        #JSON_TowerScoreThresholdthresholdVal=jsonTowerScore.threshold_vals[index2]
                                        #towerScoreParamArray[index2]=newTowerScoreParam()
                                        #towerScoreParamArray[index2].Deserialize(thresholdVal)
                                    #this.mTowerScores.Add(jsonTowerScore.iname,towerScoreParamArray)
                            #if(json.TowerRank!=null)
                                #for(intindex=0index<json.TowerRank.Length++index)
                                if 'TowerRank' in json:
                                    this['mTowerRankTbl'] = json['TowerRank']
                            #if(json.MultilimitUnitLv!=null)
                                #for(intindex=0index<json.MultilimitUnitLv.Length++index)
                                if 'MultilimitUnitLv' in json:
                                    this['mMultiLimitUnitLv'] = json['MultilimitUnitLv']
                            #if(json.FriendPresentItem!=null)
                                #this.mFriendPresentItemParam=newDictionary<string,FriendPresentItemParam>()
                                #for(intindex=0index<json.FriendPresentItem.Length++index)
                                    #FriendPresentItemParampresentItemParam=newFriendPresentItemParam()
                                    #presentItemParam.Deserialize(json.FriendPresentItem,(MasterParam)null)
                                    #this.mFriendPresentItemParam.Add(presentItemParam.iname,presentItemParam)
                            #if(json.Weather!=null)
                                #List<WeatherParam>weatherParamList=newList<WeatherParam>(json.Weather.Length)
                                #for(intindex=0index<json.Weather.Length++index)
                                    #WeatherParamweatherParam=newWeatherParam()
                                    #weatherParam.Deserialize(json.Weather)
                                    #weatherParamList.Add(weatherParam)
                                #this.mWeatherParam=weatherParamList
                            #if(json.UnitUnlockTime!=null)
                                #this.mUnitUnlockTimeParam=newDictionary<string,UnitUnlockTimeParam>()
                                #for(intindex=0index<json.UnitUnlockTime.Length++index)
                                    #UnitUnlockTimeParamunitUnlockTimeParam=newUnitUnlockTimeParam()
                                    #unitUnlockTimeParam.Deserialize(json.UnitUnlockTime)
                                    #this.mUnitUnlockTimeParam.Add(unitUnlockTimeParam.iname,unitUnlockTimeParam)
                            #if(json.Tobira!=null)
                                #for(intindex=0index<json.Tobira.Length++index)
                                    #TobiraParamtobiraParam=newTobiraParam()
                                    #tobiraParam.Deserialize(json.Tobira)
                                    #this.mTobiraParam.Add(tobiraParam)
                            #if(json.TobiraCategories!=null)
                                #for(intindex=0index<json.TobiraCategories.Length++index)
                                    #TobiraCategoriesParamtobiraCategoriesParam=newTobiraCategoriesParam()
                                    #tobiraCategoriesParam.Deserialize(json.TobiraCategories)
                                    #this.mTobiraCategoriesParam.Add(tobiraCategoriesParam.TobiraCategory,tobiraCategoriesParam)
                            #if(json.TobiraConds!=null)
                                #for(intindex=0index<json.TobiraConds.Length++index)
                                    #TobiraCondsParamtobiraCondsParam=newTobiraCondsParam()
                                    #tobiraCondsParam.Deserialize(json.TobiraConds)
                                    #this.mTobiraCondParam.Add(tobiraCondsParam)
                            #if(json.TobiraCondsUnit!=null)
                                #for(intindex=0index<json.TobiraCondsUnit.Length++index)
                                    #TobiraCondsUnitParamtobiraCondsUnitParam=newTobiraCondsUnitParam()
                                    #tobiraCondsUnitParam.Deserialize(json.TobiraCondsUnit)
                                    #this.mTobiraCondUnitParam.Add(tobiraCondsUnitParam.Id,tobiraCondsUnitParam)
                            #if(json.TobiraRecipe!=null)
                                #for(intindex=0index<json.TobiraRecipe.Length++index)
                                    #TobiraRecipeParamtobiraRecipeParam=newTobiraRecipeParam()
                                    #tobiraRecipeParam.Deserialize(json.TobiraRecipe)
                                    #this.mTobiraRecipeParam.Add(tobiraRecipeParam)
                            #if(json.ConceptCard!=null)
                                #this.mConceptCard=newDictionary<string,ConceptCardParam>()
                                #for(intindex=0index<json.ConceptCard.Length++index)
                                    #ConceptCardParamconceptCardParam=newConceptCardParam()
                                    #conceptCardParam.Deserialize(json.ConceptCard,(MasterParam)null)
                                    #this.mConceptCard.Add(conceptCardParam.iname,conceptCardParam)
                            #intnumArray=newint[6]
                                #json.ConceptCardLvTbl1,
                                #json.ConceptCardLvTbl2,
                                #json.ConceptCardLvTbl3,
                                #json.ConceptCardLvTbl4,
                                #json.ConceptCardLvTbl5,
                                #json.ConceptCardLvTbl6
                                #}
                                #if(0<numArray.Length&&0<numArray[0].Length)
                                    #this.mConceptCardLvTbl=newOInt[numArray.Length,numArray[0].Length]
                                    #for(intindex1=0index1<numArray.Length++index1)
                                        #for(intindex2=0index2<numArray[index1].Length++index2)
                                        #this.mConceptCardLvTbl[index1,index2]=(OInt)numArray[index1][index2]
                                #if(json.ConceptCardConditions!=null)
                                    #this.mConceptCardConditions=newDictionary<string,ConceptCardConditionsParam>()
                                    #for(intindex=0index<json.ConceptCardConditions.Length++index)
                                        #ConceptCardConditionsParamcardConditionsParam=newConceptCardConditionsParam()
                                        #cardConditionsParam.Deserialize(json.ConceptCardConditions)
                                        #this.mConceptCardConditions.Add(cardConditionsParam.iname,cardConditionsParam)
                                #if(json.ConceptCardTrustReward!=null)
                                    #this.mConceptCardTrustReward=newDictionary<string,ConceptCardTrustRewardParam>()
                                    #for(intindex=0index<json.ConceptCardTrustReward.Length++index)
                                        #ConceptCardTrustRewardParamtrustRewardParam=newConceptCardTrustRewardParam()
                                        #trustRewardParam.Deserialize(json.ConceptCardTrustReward)
                                        #this.mConceptCardTrustReward.Add(trustRewardParam.iname,trustRewardParam)
                                #if(json.UnitGroup!=null)
                                    #this.mUnitGroup=newDictionary<string,UnitGroupParam>()
                                    #for(intindex=0index<json.UnitGroup.Length++index)
                                        #UnitGroupParamunitGroupParam=newUnitGroupParam()
                                        #unitGroupParam.Deserialize(json.UnitGroup)
                                        #this.mUnitGroup.Add(unitGroupParam.iname,unitGroupParam)
                                #if(json.JobGroup!=null)
                                    #this.mJobGroup=newDictionary<string,JobGroupParam>()
                                    #for(intindex=0index<json.JobGroup.Length++index)
                                        #JobGroupParamjobGroupParam=newJobGroupParam()
                                        #jobGroupParam.Deserialize(json.JobGroup)
                                        #this.mJobGroup.Add(jobGroupParam.iname,jobGroupParam)
                                #if(json.StatusCoefficient!=null&&json.StatusCoefficient.Length>0)
                                    #this.mStatusCoefficient=newStatusCoefficientParam()
                                    #this.mStatusCoefficient.Deserialize(json.StatusCoefficient[0])
                                #if(json.CustomTarget!=null)
                                    #this.mCustomTarget=newDictionary<string,CustomTargetParam>()
                                    #for(intindex=0index<json.CustomTarget.Length++index)
                                        #CustomTargetParamcustomTargetParam=newCustomTargetParam()
                                        #customTargetParam.Deserialize(json.CustomTarget)
                                        #this.mCustomTarget.Add(customTargetParam.iname,customTargetParam)
                                #if(json.SkillAbilityDerive!=null&&json.SkillAbilityDerive.Length>0)
                                    if 'SkillAbilityDerive' in json:
                                        this['mSkillAbilityDeriveParam'] = newSkillAbilityDeriveParam[json['SkillAbilityDerive'].Length]
                                    #for(intindex=0index<json.SkillAbilityDerive.Length++index)
                                        #this.mSkillAbilityDeriveParam=newSkillAbilityDeriveParam(index)
                                        #this.mSkillAbilityDeriveParam.Deserialize(json.SkillAbilityDerive,this)
                                    #for(intindex=0index<this.mSkillAbilityDeriveParam.Length++index)
                                        #SkillAbilityDeriveDataabilityDeriveData=newSkillAbilityDeriveData()
                                        #List<SkillAbilityDeriveParam>abilityDeriveParam=this.FindAditionalSkillAbilityDeriveParam(this.mSkillAbilityDeriveParam)
                                        #abilityDeriveData.Setup(this.mSkillAbilityDeriveParam,abilityDeriveParam)
                                        #this.mSkillAbilityDerives.Add(abilityDeriveData)
                                #if(json.Tips!=null&&json.Tips.Length>0)
                                    if 'Tips' in json:
                                        this['mTipsParam'] = newTipsParam[json['Tips'].Length]
                                    #for(intindex=0index<json.Tips.Length++index)
                                        #this.mTipsParam=newTipsParam()
                                        #this.mTipsParam.Deserialize(json.Tips)
                                #this.Loaded=true
                                #returntrue
                            #
                            #publicItemParamGetCommonEquip(ItemParamitem_param,boolis_soul)
                                #if(!is_soul)
                                    #if(!item_param.IsCommon)
                                    #return(ItemParam)null
                                    #returnMonoSingleton<GameManager>.Instance.GetItemParam((string)this.FixParam.EquipCmn[(int)item_param.cmn_type-1])
                                #intrare=item_param.rare
                                #if(this.FixParam.SoulCommonPiece==null||this.FixParam.SoulCommonPiece.Length<=rare)
                                #return(ItemParam)null
                                #returnMonoSingleton<GameManager>.Instance.GetItemParam((string)this.FixParam.SoulCommonPiece[rare])
                            #
                            #publicboolIsFriendPresentItemParamValid()
                                #if(this.mFriendPresentItemParam!=null)
                                #returnthis.mFriendPresentItemParam.Count>1
                                #returnfalse
                            #
                            #publicFriendPresentItemParamGetFriendPresentItemParams()
                                #if(this.mFriendPresentItemParam==null)
                                #returnnewFriendPresentItemParam[0]
                                #FriendPresentItemParamarray=newFriendPresentItemParam[this.mFriendPresentItemParam.Values.Count]
                                #this.mFriendPresentItemParam.Values.CopyTo(array,0)
                                #returnarray
                            #
                            #publicFriendPresentItemParamGetFriendPresentItemParam(stringkey)
                                #if(this.mFriendPresentItemParam==null)
                                #return(FriendPresentItemParam)null
                                #if(string.IsNullOrEmpty(key))
                                #return(FriendPresentItemParam)null
                                #FriendPresentItemParampresentItemParam=(FriendPresentItemParam)null
                                #if(!this.mFriendPresentItemParam.TryGetValue(key,outpresentItemParam))
                                #DebugUtility.LogError("存在しないフレンドプレゼントアイテムパラメータを参照しています>"+key)
                                #returnpresentItemParam
                            #
                            #publicvoidMakeMapEffectHaveJobLists()
                                #if(this.mJobParam==null||MapEffectParam.IsMakeHaveJobLists())
                                #return
                                #MapEffectParam.MakeHaveJobLists()
                                #using(List<JobParam>.Enumeratorenumerator=this.mJobParam.GetEnumerator())
                                    #while(enumerator.MoveNext())
                                        #JobParamcurrent=enumerator.Current
                                        #if(!string.IsNullOrEmpty(current.MapEffectAbility)&&current.IsMapEffectRevReso)
                                            #AbilityParamabilityParam=this.GetAbilityParam(current.MapEffectAbility)
                                            #if(abilityParam!=null)
                                                #foreach(LearningSkillskillinabilityParam.skills)
                                                #MapEffectParam.AddHaveJob(skill.iname,current)
                            #
                            #publicUnitUnlockTimeParamGetUnitUnlockTimeParams()
                                #if(this.mUnitUnlockTimeParam==null)
                                #return(UnitUnlockTimeParam)null
                                #UnitUnlockTimeParamarray=newUnitUnlockTimeParam[this.mUnitUnlockTimeParam.Values.Count]
                                #this.mUnitUnlockTimeParam.Values.CopyTo(array,0)
                                #returnarray
                            #
                            #publicUnitUnlockTimeParamGetUnitUnlockTimeParam(string_key)
                                #if(string.IsNullOrEmpty(_key))
                                #return(UnitUnlockTimeParam)null
                                #if(this.mUnitUnlockTimeParam==null)
                                #return(UnitUnlockTimeParam)null
                                #UnitUnlockTimeParamunitUnlockTimeParam=(UnitUnlockTimeParam)null
                                #if(!this.mUnitUnlockTimeParam.TryGetValue(_key,outunitUnlockTimeParam))
                                #return(UnitUnlockTimeParam)null
                                #returnunitUnlockTimeParam
                            #
                            #publicboolIsUnlockableUnit(string_key,DateTime_time)
                                #if(string.IsNullOrEmpty(_key))
                                #returntrue
                                #UnitUnlockTimeParamunitUnlockTimeParam=(UnitUnlockTimeParam)null
                                #return!this.mUnitUnlockTimeParam.TryGetValue(_key,outunitUnlockTimeParam)||unitUnlockTimeParam.begin_at.CompareTo(_time)<=0&&unitUnlockTimeParam.end_at.CompareTo(_time)>=0
                            #
                            #publicConceptCardParamGetConceptCardParam(stringiname)
                                #if(!this.mConceptCard.ContainsKey(iname))
                                #return(ConceptCardParam)null
                                #returnthis.mConceptCard[iname]
                            #
                            #publicintGetConceptCardNextExp(intrarity,intlv)
                                #return(int)this.mConceptCardLvTbl[rarity,lv-1]
                            #
                            #publicintGetConceptCardLevelExp(intrarity,intlv)
                                #intnum=0
                                #for(intindex=0index<lv++index)
                                #num+=(int)this.mConceptCardLvTbl[rarity,index]
                                #returnnum
                            #
                            #publicintCalcConceptCardLevel(intrarity,inttotalExp,intlevelCap)
                                #intval2=levelCap
                                #intnum=0
                                #intval1=0
                                #for(intindex=0index<val2++index)
                                    #num+=this.GetConceptCardNextExp(rarity,index+1)
                                    #if(num<=totalExp)
                                    #++val1
                                    #else
                                    #break
                                #returnMath.Min(Math.Max(val1,1),val2)
                            #
                            #publicConceptCardConditionsParamGetConceptCardConditions(stringiname)
                                #if(string.IsNullOrEmpty(iname))
                                #return(ConceptCardConditionsParam)null
                                #if(!this.mConceptCardConditions.ContainsKey(iname))
                                #return(ConceptCardConditionsParam)null
                                #returnthis.mConceptCardConditions[iname]
                            #
                            #publicUnitGroupParamGetUnitGroup(stringiname)
                                #if(string.IsNullOrEmpty(iname))
                                #return(UnitGroupParam)null
                                #if(!this.mUnitGroup.ContainsKey(iname))
                                #return(UnitGroupParam)null
                                #returnthis.mUnitGroup[iname]
                            #
                            #publicJobGroupParamGetJobGroup(stringiname)
                                #if(string.IsNullOrEmpty(iname))
                                #return(JobGroupParam)null
                                #if(!this.mJobGroup.ContainsKey(iname))
                                #return(JobGroupParam)null
                                #returnthis.mJobGroup[iname]
                            #
                            #publicConceptCardTrustRewardParamGetTrustReward(stringiname)
                                #if(string.IsNullOrEmpty(iname))
                                #return(ConceptCardTrustRewardParam)null
                                #if(!this.mConceptCardTrustReward.ContainsKey(iname))
                                #return(ConceptCardTrustRewardParam)null
                                #returnthis.mConceptCardTrustReward[iname]
                            #
                            #publicCustomTargetParamGetCustomTarget(stringiname)
                                #if(string.IsNullOrEmpty(iname))
                                #return(CustomTargetParam)null
                                #if(!this.mCustomTarget.ContainsKey(iname))
                                #return(CustomTargetParam)null
                                #returnthis.mCustomTarget[iname]
                            #
                            #publicList<SkillAbilityDeriveParam>FindSkillAbilityDeriveParamWithArtifact(stringartifactIname)
                                #List<SkillAbilityDeriveParam>abilityDeriveParamList=newList<SkillAbilityDeriveParam>()
                                #if(this.mSkillAbilityDeriveParam==null)
                                #returnabilityDeriveParamList
                                #for(intindex=0index<this.mSkillAbilityDeriveParam.Length++index)
                                    #if(this.mSkillAbilityDeriveParam.CheckContainsTriggerIname(ESkillAbilityDeriveConds.EquipArtifact,artifactIname))
                                    #abilityDeriveParamList.Add(this.mSkillAbilityDeriveParam)
                                #returnabilityDeriveParamList
                            #
                            #publicList<SkillAbilityDeriveParam>FindAditionalSkillAbilityDeriveParam(SkillAbilityDeriveParamskillAbilityDeriveParam,ESkillAbilityDeriveCondstriggerType,stringtriggerIname)
                                #List<SkillAbilityDeriveParam>abilityDeriveParamList=newList<SkillAbilityDeriveParam>()
                                #if(this.mSkillAbilityDeriveParam==null)
                                #returnabilityDeriveParamList
                                #SkillAbilityDeriveTriggerParamarray=((IEnumerable<SkillAbilityDeriveTriggerParam>)skillAbilityDeriveParam.deriveTriggers).Where<SkillAbilityDeriveTriggerParam>((Func<SkillAbilityDeriveTriggerParam,bool>)(triggerParam=>triggerParam.m_TriggerIname!=triggerIname)).ToArray<SkillAbilityDeriveTriggerParam>()
                                #SkillAbilityDeriveTriggerParamderiveTriggerParam1=newSkillAbilityDeriveTriggerParam(triggerType,triggerIname)
                                #for(intindex=skillAbilityDeriveParam.m_OriginIndex+1index<this.mSkillAbilityDeriveParam.Length++index)
                                    #boolflag=false
                                    #foreach(SkillAbilityDeriveTriggerParamderiveTriggerParam2inarray)
                                        #if(this.mSkillAbilityDeriveParam.CheckContainsTriggerInames(newSkillAbilityDeriveTriggerParam[2]
                                            #deriveTriggerParam2,
                                            #deriveTriggerParam1
                                            #}))
                                                #abilityDeriveParamList.Add(this.mSkillAbilityDeriveParam)
                                                #flag=true
                                                #break
                                        #if(!flag)
                                            #if(this.mSkillAbilityDeriveParam.CheckContainsTriggerInames(newSkillAbilityDeriveTriggerParam[1]
                                                #deriveTriggerParam1
                                                #}))
                                                #abilityDeriveParamList.Add(this.mSkillAbilityDeriveParam)
                                        #returnabilityDeriveParamList
                                    #
                                    #publicList<SkillAbilityDeriveParam>FindAditionalSkillAbilityDeriveParam(SkillAbilityDeriveParamskillAbilityDeriveParam)
                                        #List<SkillAbilityDeriveParam>abilityDeriveParamList=newList<SkillAbilityDeriveParam>()
                                        #if(skillAbilityDeriveParam==null)
                                        #returnabilityDeriveParamList
                                        #foreach(SkillAbilityDeriveTriggerParamderiveTriggerinskillAbilityDeriveParam.deriveTriggers)
                                            #using(List<SkillAbilityDeriveParam>.Enumeratorenumerator=this.FindAditionalSkillAbilityDeriveParam(skillAbilityDeriveParam,deriveTrigger.m_TriggerType,deriveTrigger.m_TriggerIname).GetEnumerator())
                                                #while(enumerator.MoveNext())
                                                    #SkillAbilityDeriveParamcurrent=enumerator.Current
                                                    #if(!abilityDeriveParamList.Contains(current))
                                                    #abilityDeriveParamList.Add(current)
                                        #returnabilityDeriveParamList
                                    #
                                    #publicDictionary<string,SkillAbilityDeriveData>CreateSkillAbilityDeriveDataWithArtifacts(JobDatajobData)
                                        #if(jobData==null||jobData.Length<1)
                                        #return(Dictionary<string,SkillAbilityDeriveData>)null
                                        #Dictionary<string,SkillAbilityDeriveData>dictionary=(Dictionary<string,SkillAbilityDeriveData>)null
                                        #for(intindex=0index<jobData.Length++index)
                                            #if(jobData!=null)
                                                #SkillAbilityDeriveDatadataWithArtifacts=this.CreateSkillAbilityDeriveDataWithArtifacts(((IEnumerable<ArtifactData>)jobData.ArtifactDatas).Where<ArtifactData>((Func<ArtifactData,bool>)(artifact=>artifact!=null)).Select<ArtifactData,string>((Func<ArtifactData,string>)(artifact=>artifact.ArtifactParam.iname)).ToArray<string>())
                                                #if(dataWithArtifacts!=null)
                                                    #if(dictionary==null)
                                                    #dictionary=newDictionary<string,SkillAbilityDeriveData>()
                                                    #dictionary.Add(jobData.Param.iname,dataWithArtifacts)
                                        #returndictionary
                                    #
                                    #publicList<SkillAbilityDeriveData>FindAllSkillAbilityDeriveDataWithArtifact(stringartifactIname)
                                        #List<SkillAbilityDeriveData>abilityDeriveDataList=newList<SkillAbilityDeriveData>()
                                        #using(List<SkillAbilityDeriveData>.Enumeratorenumerator=this.mSkillAbilityDerives.GetEnumerator())
                                            #while(enumerator.MoveNext())
                                                #SkillAbilityDeriveDatacurrent=enumerator.Current
                                                #if(current.CheckContainsTriggerIname(ESkillAbilityDeriveConds.EquipArtifact,artifactIname))
                                                #abilityDeriveDataList.Add(current)
                                        #returnabilityDeriveDataList
                                    #
                                    #publicboolExistSkillAbilityDeriveDataWithArtifact(stringartifactIname)
                                        #returnthis.FindAllSkillAbilityDeriveDataWithArtifact(artifactIname).Count>0
                                    #
                                    #publicSkillAbilityDeriveDataCreateSkillAbilityDeriveDataWithArtifacts(stringartifactInames)
                                        #if(artifactInames.Length<1)
                                        #return(SkillAbilityDeriveData)null
                                        #List<SkillAbilityDeriveData>abilityDeriveDataList=newList<SkillAbilityDeriveData>()
                                        #List<SkillAbilityDeriveTriggerParam>combination=SkillAbilityDeriveTriggerParam.CreateCombination(((IEnumerable<string>)artifactInames).Select<string,SkillAbilityDeriveTriggerParam>((Func<string,SkillAbilityDeriveTriggerParam>)(iname=>newSkillAbilityDeriveTriggerParam(ESkillAbilityDeriveConds.EquipArtifact,iname))).ToArray<SkillAbilityDeriveTriggerParam>())
                                        #combination.Sort((Comparison<SkillAbilityDeriveTriggerParam>)((triggers1,triggers2)=>triggers2.Length.CompareTo(triggers1.Length)))
                                        #using(List<SkillAbilityDeriveTriggerParam>.Enumeratorenumerator1=combination.GetEnumerator())
                                            #while(enumerator1.MoveNext())
                                                #SkillAbilityDeriveTriggerParamcurrent1=enumerator1.Current
                                                #using(List<SkillAbilityDeriveData>.Enumeratorenumerator2=this.mSkillAbilityDerives.GetEnumerator())
                                                    #while(enumerator2.MoveNext())
                                                        #SkillAbilityDeriveDatacurrent2=enumerator2.Current
                                                        #if(current2.CheckContainsTriggerInames(current1))
                                                        #abilityDeriveDataList.Add(current2)
                                                #if(abilityDeriveDataList.Count>0)
                                                    #if(current1.Length==artifactInames.Length)
                                                    #break
                                        #SkillAbilityDeriveDataabilityDeriveData1=(SkillAbilityDeriveData)null
                                        #if(abilityDeriveDataList.Count>0)
                                            #abilityDeriveData1=newSkillAbilityDeriveData()
                                            #SkillAbilityDeriveDataabilityDeriveData2=abilityDeriveDataList[0]
                                            #List<SkillAbilityDeriveParam>additionalSkillAbilityDeriveParams=newList<SkillAbilityDeriveParam>()
                                            #using(HashSet<SkillAbilityDeriveParam>.Enumeratorenumerator=abilityDeriveData2.m_AdditionalSkillAbilityDeriveParam.GetEnumerator())
                                                #while(enumerator.MoveNext())
                                                    #SkillAbilityDeriveParamcurrent=enumerator.Current
                                                    #if(!additionalSkillAbilityDeriveParams.Contains(current))
                                                    #additionalSkillAbilityDeriveParams.Add(current)
                                            #for(intindex=1index<abilityDeriveDataList.Count++index)
                                                #if(!additionalSkillAbilityDeriveParams.Contains(abilityDeriveDataList.m_SkillAbilityDeriveParam))
                                                #additionalSkillAbilityDeriveParams.Add(abilityDeriveDataList.m_SkillAbilityDeriveParam)
                                                #using(HashSet<SkillAbilityDeriveParam>.Enumeratorenumerator=abilityDeriveDataList.m_AdditionalSkillAbilityDeriveParam.GetEnumerator())
                                                    #while(enumerator.MoveNext())
                                                        #SkillAbilityDeriveParamcurrent=enumerator.Current
                                                        #if(!additionalSkillAbilityDeriveParams.Contains(current))
                                                        #additionalSkillAbilityDeriveParams.Add(current)
                                            #abilityDeriveData1.Setup(abilityDeriveData2.m_SkillAbilityDeriveParam,additionalSkillAbilityDeriveParams)
                                        #returnabilityDeriveData1
                                    #
                                    #publicTowerScoreParamFindTowerScoreParam(stringscore_iname)
                                        #TowerScoreParamtowerScoreParamArray=(TowerScoreParam)null
                                        #this.mTowerScores.TryGetValue(score_iname,outtowerScoreParamArray)
                                        #returntowerScoreParamArray
                            #
return this
